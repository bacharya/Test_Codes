cscope 15 $HOME/development/Test_Codes/C               0000273363
	@DP/catalan_number.c

1 
	~"°dio.h
"

3 
	gdp
[100] = {1};

5 
	$ˇèœn
(
n
){

7 
i
, 
cou¡
;

8 if(
n
 == 0){

11 if(
dp
[
n
]!=0){

12  
dp
[
n
];

14 
dp
[
n
] = 0;

15 
i
=1; i<=
n
; i++){

16 
dp
[
n
] +
	`ˇèœn
(
i
-1)*catalan(n-i);

19  
dp
[
n
];

20 
	}
}

22 
	$maö
() {

24 
n
;

26 
	`¥ötf
("\nEnterÅheÇumber of vertices:\n");

27 
	`sˇnf
("%d", &
n
);

28 
	`¥ötf
("\nNumbî o‡possibÀ BST†f‹ %d vîti˚†¨e:%d\n", 
n
, 
	`ˇèœn
(n));

31 
	}
}

	@DP/logest_common_string.c

1 
	~"°dio.h
"

2 
	~"°dlib.h
"

3 
	~"°rög.h
"

5 
	gdp
[100][100] = {0};

7 
	$max
(
a
, 
b
){

8  
a
>
b
?a:b;

9 
	}
}

18 
	$lcs_dp
(*
X
, 
m
, *
Y
, 
n
) {

20 
i
, 
j
;

22 
i
=
m
-1; i>=0;i--) {

23 
j
=
n
-1;j>=0;j--){

24 if(
X
[
i
] =
Y
[
j
]) {

25 
dp
[
i
][
j
]=
	`max
(dp[i][j], dp[i-1][j-1]);

30  
dp
[0][0];

31 
	}
}

34 
	$lcs_dp_ªs
(*
X
, 
i
, 
j
) {

36 i‡(
i
 < 0 || 
j
 < 0){

40 if(
dp
[
i
][
j
] == 1){

42  1+
	`lcs_dp_ªs
(
X
, 
i
-1, 
j
-1);

45  
	`max
(
	`lcs_dp_ªs
(
X
, 
i
-1, 
j
),Ücs_dp_res(X, i, j-1));

48 
	}
}

50 
	$lcs
(*
X
, 
i
, 
m
, *
Y
, 
j
, 
n
) {

52 if(
i
 =
m
 || 
j
 =
n
)

54 if(
X
[
i
] =
Y
[
j
])

55  1+
	`lcs
(
X
, 
i
+1, 
m
, 
Y
, 
j
+1, 
n
);

57  
	`max
(
	`lcs
(
X
, 
i
, 
m
, 
Y
, 
j
+1, 
n
),Ücs(X, i+1, m, Y, j,Ç));

58 
	}
}

61 
	$¥öt_dp_¨øy
(
m
, 
n
) {

63 
i
, 
j
;

64 
	`¥ötf
("\nContents of DPárray:\n");

65 
i
=0;i<=
m
;i++) {

66 
j
=0;j<=
n
;j++)

67 
	`¥ötf
("%d ", 
dp
[
i
][
j
]);

68 
	`¥ötf
("\n");

70 
	}
}

72 
	$maö
(){

74 *
a
 = "ABCBDAB", *
b
= "BDCABAB";

75 
m
, 
n
, 
ªs
, 
i
, 
j
;

77 
	`¥ötf
("\nE¡îed såög†¨e:%†& %s\n", 
a
, 
b
);

78 
m
 = 
	`°æí
(
a
);

79 
n
 = 
	`°æí
(
b
);

80 
	`¥öt_dp_¨øy
(
m
, 
n
);

81 
	`¥ötf
("Àngth o‡l⁄ge° sub°rög i†:%d\n", 
	`lcs
(
a
, 0, 
m
, 
b
, 0, 
n
));

83 
	`lcs_dp
(
a
, 
m
, 
b
, 
n
);

84 
	`¥öt_dp_¨øy
(
m
, 
n
);

85 
ªs
 = 
	`lcs_dp_ªs
(
a
, 
m
-1,
n
-1);

86 
	`¥ötf
("\nResu… i†%d\n", 
ªs
);

89 
	}
}

	@DP/longest_increasing_sequence.c

1 
	~"°dio.h
"

2 
	~"°dlib.h
"

5 
	gdp
[100] = {0};

10 
	$max
(
a
, 
b
) {

11  
a
>
b
?a:b;

12 
	}
}

20 
	$l⁄ge°_öc_£q
(*
a
, 
n
){

22 
i
, 
j
, 
high
;

23 if(
n
<0){

26 if(
n
==1){

30 
j
=0;j<
n
;j++) {

31 
dp
[
j
] = 1;

33 
i
=0;i<
n
;i++)

34 
	`¥ötf
("%d ", 
dp
[
i
]);

35 
	`¥ötf
("\n");

36 
i
=1;i<
n
;i++) {

37 
j
=0;j<
i
;j++) {

38 if(
a
[
i
] >á[
j
]) {

39 
dp
[
i
] = 
	`max
(dp[i], dp[
j
]+1);

43 
high
 = 
dp
[0];

44 
i
=1;i<
n
;i++){

45 if(
dp
[
i
] > 
high
){

46 
high
 = 
dp
[
i
];

50 
i
=0;i<
n
;i++)

51 
	`¥ötf
("%d ", 
dp
[
i
]);

52 
	`¥ötf
("\n");

53  
high
;

54 
	}
}

56 
	$maö
(){

58 
¨r
[] = {10,9,2,5,3,7,101,18},
n
,
i
,
ªs
;

59 
n
 = (
¨r
)/();

60 
	`¥ötf
("\nGivenárray is:\n");

61 
i
=0;i<
n
;i++)

62 
	`¥ötf
("%d ", 
¨r
[
i
]);

63 
	`¥ötf
("\nDPárray is:\n");

64 
i
=0;i<
n
;i++)

65 
	`¥ötf
("%d ", 
dp
[
i
]);

66 
	`¥ötf
("\n");

67 
ªs
 = 
	`l⁄ge°_öc_£q
(
¨r
,
n
);

68 
	`¥ötf
("L⁄ge° in¸ósög sequí˚ i†o‡Àngth:%d\n", 
ªs
);

71 
	}
}

	@DP/making_change.c

1 
	~"°dio.h
"

2 
	~"limôs.h
"

4 
	gd
[5] = {1, 2, 5, 10, 50};

5 
	gn_d
 = 5;

6 
	gdp
[100] = {0};

8 
	$mö
(
a
, 
b
) {

10  
a
<
b
?a:b;

11 
	}
}

13 
	$makög_ch™ge
(
n
) {

15 
i
, 
ªs
;

16 i‡(
n
 < 0){

19 i‡(
n
 == 0) {

22 i‡(
dp
[
n
] != 0) {

23  
dp
[
n
];

26 
ªs
 = 
INT_MAX
;

27 
i
 = 0; i<
n_d
; i++){

28 if(
n
-
d
[
i
] < 0)

30 
ªs
 = 
	`mö
‘es, 
	`makög_ch™ge
(
n
-
d
[
i
])+1);

33 
dp
[
n
] = 
ªs
;

34  
dp
[
n
];

35 
	}
}

37 
	$maö
() {

39 
n
;

40 
	`¥ötf
("\nEnterÅhe value:\n");

41 
	`sˇnf
("%d", &
n
);

42 
	`¥ötf
("\nMöimum ch™gêdíomö©i⁄†ªquúed is:%d\n", 
	`makög_ch™ge
(
n
));

44 
	}
}

	@DP/maxSubArray.c

1 
	~"°dio.h
"

2 
	~"°dlib.h
"

4 
	gdp
[100];

7 
	$max
(
a
, 
b
){

9  
a
>
b
?a:b;

10 
	}
}

13 
	$maxSubAºayRec
(*
a
, 
n
){

15 if(
n
 == 0){

16  
	`max
(0, 
a
[0]);

18 i‡(
dp
[
n
])

19  
dp
[
n
];

21 
dp
[
n
] = 
	`max
(
	`maxSubAºayRec
(
a
,Ç-1)+a[n], dp[n-1]);

23  
dp
[
n
];

24 
	}
}

27 
	$maxSubAºaySum
(*
a
, 
n
) {

29 
i
, 
j
, 
maxVÆ
= 0;

30 
i
=0;i<
n
;i++){

31 
maxVÆ
 = 0;

32 
j
=0;j<
i
;j++) {

33 if(
a
[
j
]+
dp
[
i
-1] > 
maxVÆ
){

34 
maxVÆ
 = 
a
[
j
]+
dp
[j];

39 
i
=0;i<
n
;i++){

40 if(
dp
[
i
] > 
maxVÆ
)

41 
maxVÆ
 = 
dp
[
i
];

44  
maxVÆ
;

45 
	}
}

48 
	$maö
() {

50 
a
[] = {-2,1,-3,4,-1,2,1,-5,4};

51 
n
, 
ªs
, 
i
, 
maxVÆ
;

52 
n
 = (
a
)/();

53 
	`¥ötf
("\nArray is:\n");

54 
i
=0;i<
n
;i++)

55 
	`¥ötf
("%d ", 
a
[
i
]);

57 
i
=0;i<
n
;i++)

58 
dp
[
i
] = 0;

61 
ªs
 = 
	`maxSubAºayRec
(
a
, 
n
-1);

63 
	`¥ötf
("\nDpárray is:\n");

64 
i
=0;i<
n
;i++)

65 
	`¥ötf
("%d ", 
dp
[
i
]);

67 
i
=0;i<
n
;i++){

68 if(
dp
[
i
] > 
maxVÆ
)

69 
maxVÆ
 = 
dp
[
i
];

71 
	`¥ötf
("\nMaximum sum is:%d\n", 
maxVÆ
);

73 
	}
}

	@DP/max_sum.c

1 
	~"°dio.h
"

2 
	~"°dlib.h
"

3 
	~"m©h.h
"

4 
	gdp
[100] = {0};

7 
	$max
(
a
, 
b
){

8  
a
>
b
?a:b;

9 
	}
}

11 
	$maxThªe
(
a
, 
b
, 
c
){

13  
a
>
b
?◊>
c
?a:c):(b>c?b:c);

14 
	}
}

17 
	$max_vÆue
(*
a
, 
m
){

19 
i
=0, 
j
=0, 
maxVÆ
=0;

21 if(
a
[
i
] >= 0)

22 
dp
[0] = 
a
[
i
];

23 
i
=1;i<
m
;i++){

24 if((
a
[
i
]+
dp
[i-1] > 0)){

25 
dp
[
i
] = 
a
[i]+dp[i-1];

27 
dp
[
i
] = 0;

31 
maxVÆ
 = 
dp
[0];

32 
	`¥ötf
("%d ", 
maxVÆ
);

33 
j
=1;j<
m
;j++){

34 
	`¥ötf
("%d ", 
dp
[
j
]);

35 if(
dp
[
j
] > 
maxVÆ
){

36 
maxVÆ
 = 
dp
[
j
];

40  
maxVÆ
;

41 
	}
}

44 
	$max_vÆue_2
(*
a
, 
m
){

46 
i
=0, 
j
=0, 
maxVÆ
=0;

48 if(
a
[0] >= 0)

49 
dp
[0] = 
a
[0];

50 if(
a
[1] >á[0]){

51 
dp
[1] = 
a
[1];

53 
dp
[1] = 
a
[0];

55 
i
=2;i<
m
;i++){

56 if(
	`max
(
a
[
i
]+
dp
[i-2], dp[i-1]) > 0) {

57 
dp
[
i
] = 
	`max
(
a
[i]+dp[i-2], dp[i-1]);

59 
dp
[
i
] = 0;

63 
maxVÆ
 = 
dp
[0];

64 
	`¥ötf
("%d ", 
maxVÆ
);

65 
j
=1;j<
m
;j++){

66 
	`¥ötf
("%d ", 
dp
[
j
]);

67 if(
dp
[
j
] > 
maxVÆ
){

68 
maxVÆ
 = 
dp
[
j
];

72  
maxVÆ
;

73 
	}
}

76 
	$max_vÆue_3
(*
a
, 
m
){

78 
i
=0, 
j
=0, 
maxVÆ
=0;

80 
dp
[0] = 
	`max
(
a
[0], 0);

81 
dp
[1] = 
	`max
(
a
[1],á[0]);

82 
dp
[2] = 
	`maxThªe
(
a
[2],á[1],á[0]);

84 
i
=3;i<
m
;i++){

85 if(
	`maxThªe
(
a
[
i
]+
dp
[i-3], dp[i-2], dp[i-1]) > 0) {

86 
dp
[
i
] = 
	`maxThªe
(
a
[i]+dp[i-3], dp[i-2], dp[i-1]);

88 
dp
[
i
] = 0;

92 
maxVÆ
 = 
dp
[0];

93 
	`¥ötf
("%d ", 
maxVÆ
);

94 
j
=1;j<
m
;j++){

95 
	`¥ötf
("%d ", 
dp
[
j
]);

96 if(
dp
[
j
] > 
maxVÆ
){

97 
maxVÆ
 = 
dp
[
j
];

101  
maxVÆ
;

102 
	}
}

104 
	$maö
(){

106 
¨r
[7] = {2, 11, -3, -4, 13, -5, 2};

107 
i
, 
size
=7, 
ªs
;

108 
	`¥ötf
("\nEntered Array is:\n");

109 
i
=0;i<
size
;i++){

110 
	`¥ötf
("%d ", 
¨r
[
i
]);

112 
	`¥ötf
("\nDP Array is:\n");

113 
ªs
 = 
	`max_vÆue
(
¨r
, 
size
);

114 
	`¥ötf
("\nMaximum subsum is:%d\n", 
ªs
);

115 
ªs
 = 
	`max_vÆue_2
(
¨r
, 
size
);

116 
	`¥ötf
("\nMaximum subsum(2Ç⁄-c⁄tiguousËis:%d\n", 
ªs
);

117 
ªs
 = 
	`max_vÆue_3
(
¨r
, 
size
);

118 
	`¥ötf
("\nMaximum subsum(3Ç⁄-c⁄tiguousËis:%d\n", 
ªs
);

120 
	}
}

	@LC/binary_search.c

1 
	~"°dio.h
"

2 
	~"°dlib.h
"

3 
	#INT_MAX
 9999

	)

5 
	$£¨ch
(* 
nums
, 
numsSize
, 
èrgë
){

6 i‡(
èrgë
 =
nums
[
numsSize
-1]) {

7  
numsSize
;

8 } if–
èrgë
 > 
nums
[((
numsSize
-1)/2)]) {

9  
	`£¨ch
(
nums
+((
numsSize
-1)/2),ÇumsSize, 
èrgë
);

11  
	`£¨ch
(
nums
, (
numsSize
-1)/2, 
èrgë
);

14 
	}
}

16 
	$£¨ch
(* 
nums
, 
numsSize
, 
èrgë
){

17 
low
=0, 
high
 = 
numsSize
-1, 
i
;

18 
i
 = (
high
-
low
)/2;

19 
i
 < 
high
 && i > 
low
) {

20 i‡(
èrgë
 =
nums
[
i
]) {

21  
i
;

22 } i‡(
èrgë
 > 
nums
[
i
]) {

23 
low
 = 
i
;

24 
i
 = i+((
high
-
low
)/2);

26 
high
 = 
i
;

27 
i
 = 
low
+((
high
-low)/2);

31 
	}
}

34 
	$bö_£¨ch
(*
nums
, 
l
, 
r
, 
èrgë
) {

35 
mid
 = (
r
+
l
)/2;

36 if(
nums
[
mid
] =
èrgë
) {

37  
mid
;

39 if(
nums
[
mid
] > 
èrgë
) {

40  
	`bö_£¨ch
(
nums
, 
l
, 
mid
, 
èrgë
);

42  
	`bö_£¨ch
(
nums
, 
mid
, 
r
, 
èrgë
);

45 
	}
}

47 
	$£¨ch
(* 
nums
, 
numsSize
, 
èrgë
){

48 
low
=0, 
high
 = 
numsSize
;

49  
	`bö_£¨ch
(
nums
, 
low
, 
high
, 
èrgë
);

51 
	}
}

53 
	$mövÆ
(
a
, 
b
){

54  
a
<
b
?a:b;

55 
	}
}

57 
	$möSubAºayLí
(
èrgë
, * 
nums
, 
numsSize
){

58 
sums
[
numsSize
];

59 
sums
[0] = 
nums
[0];

60 
i
, 
j
, 
mö

INT_MAX
;

61 
i
 =1; i< 
numsSize
; i++){

62 
sums
[
i
] = 
nums
[i]+sums[i-1];

64 
i
 = 0; i< 
numsSize
; i++) {

65 if(
sums
[
i
] < 
èrgë
) {

68 
	`¥ötf
("%d ",
i
);

70 
j
 = 0; j < 
i
; j++){

71 i‡(
sums
[
i
]-sums[
j
] >
èrgë
) {

72 
mö
 = 
	`mövÆ
(mö, (
i
-
j
));

76 
mö
 = (mö, 
	`£¨ch
(
sums
, 
i
, 
èrgë
));

78 i‡(
mö
 =
INT_MAX
)

80  
mö
;

81 
	}
}

83 
	$maö
() {

85 
nums
[] = {2,3,1,2,4,3}, 
èrgë
 = 7, 
idx
, 
size
 = 6;

87 
idx
 = 
	`möSubAºayLí
(
èrgë
, 
nums
, 
size
);

89 
	`¥ötf
("\nSórchÑesu…áàödex :%d\n", 
idx
);

92 
	}
}

	@LC/merge_sort.c

1 
	~"°dio.h
"

2 
	~"°dlib.h
"

4 
	$mîge
(*
¨r
, 
l
, 
m
, 
r
) {

5 
n1
, 
n2
, 
i
, 
j
, 
k
;

6 
n1
 = 
m
-
l
+1;

7 
n2
 = 
r
-
m
;

9 
L
[
n1
], 
R
[
n2
];

11 
i
 = 0; i< 
n1
; i++)

12 
L
[
i
] = 
¨r
[
l
+i];

13 
j
=0;j< 
n2
; j++)

14 
R
[
j
] = 
¨r
[
m
+1+j];

16 
i
 = 
j
 = 0;

17 
k
 = 
l
;

19 
i
 < 
n1
 && 
j
 < 
n2
) {

21 if(
L
[
i
] <
R
[
j
]) {

22 
¨r
[
k
] = 
L
[
i
];

23 
i
++;

25 
¨r
[
k
] = 
R
[
j
];

26 
j
++;

28 
k
++;

30 
i
 < 
n1
) {

31 
¨r
[
k
] = 
L
[
i
];

32 
i
++;

33 
k
++;

35 
j
 < 
n2
) {

36 
¨r
[
k
] = 
R
[
j
];

37 
j
++;

38 
k
++;

40 
	}
}

41 
	$mîge_s‹t
–*
¨r
, 
l
, 
r
) {

42 i‡–
l
< 
r
) {

43 
m
 = 
l
 + (
r
-l)/2;

44 
	`mîge_s‹t
(
¨r
, 
l
, 
m
);

45 
	`mîge_s‹t
(
¨r
, 
m
+1, 
r
);

46 
	`mîge
(
¨r
, 
l
, 
m
, 
r
);

48 
	}
}

50 
	$maö
() {

52 
nums
[] = {-1,0,3,5,9,12}, 
èrgë
 = 12, 
idx
, 
size
 = 6;

53 
	`mîge_s‹t
(
nums
, 0, 
size
-1);

55 
	`¥ötf
("\nSortÑesult :\n");

57 
i
 = 0;i<
size
;i++) {

58 
	`¥ötf
("%d ", 
nums
[
i
]);

60 
	`¥ötf
("\n");

62 
	}
}

	@array.c

1 
	~"°dio.h
"

2 
	~"°dlib.h
"

6 
	$¥öt_¨øy_vÆ
(
¨r
[3][5], 
m
, 
n
){

7 
i
, 
j
;

8 *
±r
 = 
NULL
;

9 
i
=0;i<
m
;i++)

12 
j
=0;j<
n
;j++) {

13 
	`¥ötf
("%c",
¨r
[
i
][
j
]);

14 if(' ' =
¨r
[
i
][
j
]){

15 
¨r
[
i
][
j
] = '0';

18 
	`¥ötf
("\n");

22 
	}
}

25 
¥öt_¨øy_ªf
((*
¨r
)[5], 
m
, 
n
){

26 
	gi
, 
	gj
;

27 *
	g±r
 = 
NULL
;

28 
	gi
=0;i<
	gm
;i++)

31 
	gj
=0;j<
	gn
;j++) {

32 
¥ötf
("%c",
¨r
[
i
][
j
]);

33 if('0' =
¨r
[
i
][
j
]){

34 
¨r
[
i
][
j
] = '_';

37 
¥ötf
("\n");

44 
	$¥öt_sd_¨øy
(*
¨r
, 
n
){

45 
i
;

46 
i
=0;i<
n
;i++)

48 
	`¥ötf
("%d ",
¨r
[
i
]);

50 
	`¥ötf
("\n");

53 
	}
}

56 
	$∑ss_by_ªf
(*
a
, 
n
){

58 
a
[0] = 0;

60 
	}
}

63 
	$com∑ª
(*
a
, *
b
){

65 
x
, 
y
;

66 
x
 = *(*)
a
;

67 
y
 = *(*)
b
;

69 if(
x
 =
y
)

72  
x
<
y
?-1:1;

73 
	}
}

75 
	$maö
() {

76 
¨r
[3][5] = { ' ', ' ','1', ' ', ' ',

80 
n
;

82 
¨
[5] = {5,4,3,2,1};

84 
n
 = (
¨
)/();

86 
	`¥öt_¨øy_vÆ
(
¨r
, 3, 5);

87 
	`¥ötf
("--------------------------------------\n");

88 
	`¥öt_¨øy_ªf
(
¨r
, 3, 5);

89 
	`¥ötf
("--------------------------------------\n");

90 
	`¥öt_¨øy_vÆ
(
¨r
, 3, 5);

91 
	`¥ötf
("--------------------------------------\n");

92 
	`¥öt_sd_¨øy
(
¨
, 
n
);

93 
	`∑ss_by_ªf
(
¨
, 
n
);

94 
	`¥öt_sd_¨øy
(
¨
, 
n
);

95 
	`¥ötf
("--------------------------------------\n");

96 
	`qs‹t
(
¨
, 
n
, (), 
com∑ª
);

97 
	`¥öt_sd_¨øy
(
¨
, 
n
);

98 
	`¥ötf
("--------------------------------------\n");

101 
	}
}

	@array_2_bst.c

1 
	~"°dio.h
"

2 
	~"°dlib.h
"

3 
	#COUNT
 10

	)

5 
	snode_
 {

7 
	md©a
;

8 
node_
 *
	mÀ·
, *
	mright
;

9 } 
	tnode_t
;

11 
node_t
 * 
	tnode
;

14 
	$max
(
a
, 
b
){

15  
a
>
b
?a:b;

16 
	}
}

20 
	$¥öt2DUtû
(
node
 
roŸ
, 
•a˚
)

23 i‡(
roŸ
 =
NULL
)

27 
•a˚
 +
COUNT
;

30 
	`¥öt2DUtû
(
roŸ
->
right
, 
•a˚
);

34 
	`¥ötf
("\n");

35 
i
 = 
COUNT
; i < 
•a˚
; i++)

36 
	`¥ötf
(" ");

37 
	`¥ötf
("%d\n", 
roŸ
->
d©a
);

40 
	`¥öt2DUtû
(
roŸ
->
À·
, 
•a˚
);

41 
	}
}

45 
	$ö‹dî
(
node
 
roŸ
, *
cou¡
, 
pos
){

47 
ªs
 = -1;

48 if(!
roŸ
)

49  
ªs
;

50 
ªs
 = 
	`ö‹dî
(
roŸ
->
À·
, 
cou¡
, 
pos
);

52 i‡(
ªs
 != -1)

53  
ªs
;

54 if(++(*
cou¡
Ë=
pos
){

56  
roŸ
->
d©a
;

58 
ªs
 = 
	`ö‹dî
(
roŸ
->
right
, 
cou¡
, 
pos
);

59  
ªs
;

60 
	}
}

62 
node


63 
	$buûdBST
(
node
 
roŸ
, 
a
[], 
low
, 
high
){

65 
mid
;

67 if(
low
<
high
){

68 
mid
 = (
low
+
high
)/2;

69 if(!
roŸ
){

70 
roŸ
 = (
node
Ë
	`ˇŒoc
(1, (
node_t
));

72 
roŸ
->
d©a
 = 
a
[
mid
];

73 
roŸ
->
À·
 = 
	`buûdBST
‘oŸ->À·, 
a
, 
low
, 
mid
);

74 
roŸ
->
right
 = 
	`buûdBST
‘oŸ->right, 
a
, 
mid
+1, 
high
);

77  
roŸ
;

79 
	}
}

81 
	$∑πôi⁄
(*
a
, 
low
, 
high
) {

83 
pivŸ
, 
i
, 
j
, 
tmp
;

84 
pivŸ
 = 
a
[
low
];

85 
i
 = 
low
;

86 
j
 = 
high
;

87 
i
 < 
j
){

88 
a
[
i
] <
pivŸ
)

89 
i
++;

90 
a
[
j
] > 
pivŸ
)

91 
j
--;

92 if(
i
 < 
j
) {

93 
tmp
 = 
a
[
i
];

94 
a
[
i
] =á[
j
];

95 
a
[
j
] = 
tmp
;

98 
a
[
low
] =á[
j
];

99 
a
[
j
] = 
pivŸ
;

100  
j
;

101 
	}
}

104 
	$q_s‹t
(*
a
, 
low
, 
high
){

105 
p
;

106 if(
low
 < 
high
) {

107 
p
 = 
	`∑πôi⁄
(
a
, 
low
, 
high
);

108 
	`q_s‹t
(
a
, 
low
, 
p
-1);

109 
	`q_s‹t
(
a
, 
p
+1, 
high
);

112 
	}
}

116 
	$max_∑th_sum
(
node
 
roŸ
){

117 
À·Sum
, 
rightSum
;

118 if(!
roŸ
)

120 
À·Sum
 = 
	`max_∑th_sum
(
roŸ
->
À·
);

121 
rightSum
 = 
	`max_∑th_sum
(
roŸ
->
right
);

122  
	`max
(
À·Sum
, 
rightSum
)+
roŸ
->
d©a
;

123 
	}
}

125 
	$maö
() {

127 
node
 
roŸ
 = 
NULL
;

128 
¨r
[] = {100, 2, 6, 26, 4, 82, 88, 67, 99, 98, 101};

129 
n
, 
i
, 
max
, 
max2
, 
ªs
, 
cou¡
 = 0, 
pos
=7;

130 
n
 = (
¨r
)/();

132 
	`¥ötf
("\nArrayÉlementsáre:\n");

133 
i
=0;i<
n
;i++)

134 
	`¥ötf
("%d ", 
¨r
[
i
]);

136 
	`¥ötf
("\n");

139 
	`¥ötf
("\nAfter sorting: ArrayÉlementsáre:\n");

140 
i
=0;i<
n
;i++)

141 
	`¥ötf
("%d ", 
¨r
[
i
]);

143 
	`¥ötf
("\n");

145 
roŸ
 = 
	`buûdBST
‘oŸ, 
¨r
, 0, 
n
-1);

146 
	`¥ötf
("Tree:\n");

147 
	`¥öt2DUtû
(
roŸ
, 2);

149 
	`¥ötf
("\n%dth smÆÀ°ÉÀmíàis:\n", 
pos
);

150 
ªs
 = 
	`ö‹dî
(
roŸ
, &
cou¡
, 
pos
);

151 
	`¥ötf
("Resu… i†: %d\n", 
ªs
);

152 
	`¥ötf
("MaxÖ©h sum o‡BST : %d\n", 
	`max_∑th_sum
(
roŸ
));

155 
	}
}

	@avl_tree.c

1 
	~"åì.h
"

3 
uöt32_t
 
	gg_cou¡
 = 0;

4 
node


5 
	$avl_sögÀ_rŸ©e_À·
(
node
 
roŸ
) {

6 
node
 
tmp
 = 
roŸ
->
À·
;

7 
roŸ
->
À·
 = 
tmp
->
right
;

8 
tmp
->
right
 = 
roŸ
;

9 
tmp
->
height
 = 
	`max
(
	`åì_height
—mp->
À·
),Åªe_height—mp->
right
))+1;

10 
roŸ
->
height
 = 
	`max
(
	`åì_height
‘oŸ->
À·
),Ñoot->height)+1;

11  
tmp
;

12 
	}
}

14 
node


15 
	$avl_sögÀ_rŸ©e_right
(
node
 
roŸ
) {

16 
node
 
tmp
 = 
roŸ
->
right
;

17 
roŸ
->
right
 = 
tmp
->
À·
;

18 
tmp
->
À·
 = 
roŸ
;

19 
tmp
->
height
 = 
	`max
(
	`åì_height
—mp->
À·
),Åªe_height—mp->
right
))+1;

20 
roŸ
->
height
 = 
	`max
(
	`åì_height
‘oŸ->
À·
),Ñoot->height)+1;

21  
tmp
;

22 
	}
}

24 
node


25 
	$avl_doubÀ_rŸ©e_À·
(
node
 
Z
) {

26 
Z
->
À·
 = 
	`avl_sögÀ_rŸ©e_right
(Z->left);

27  
	`avl_sögÀ_rŸ©e_À·
(
Z
);

28 
	}
}

30 
node


31 
	$avl_doubÀ_rŸ©e_right
(
node
 
Z
) {

32 
Z
->
right
 = 
	`avl_sögÀ_rŸ©e_À·
(Z->right);

33  
	`avl_sögÀ_rŸ©e_right
(
Z
);

34 
	}
}

36 
node


37 
	$avl_ö£π
(
node
 
roŸ
,Çodê
∑ª¡
, 
d©a
) {

38 if(!
roŸ
) {

39 
roŸ
 = 
	`gë_√w_node
();

40 if(!
roŸ
){

41 
	`¥ötf
("\nMalloc Error");

43 
roŸ
->
d©a
 = data;

44 
roŸ
->
height
 = 0;

45 
roŸ
->
cou¡
 = 
g_cou¡
++;

46 
roŸ
->
À·
 =ÑoŸ->
right
 = 
NULL
;

49 i‡(
d©a
 < 
roŸ
->data) {

50 
roŸ
->
À·
 = 
	`avl_ö£π
‘oŸ->À·,ÑoŸ, 
d©a
);

51 if(
	`åì_height
(
roŸ
->
À·
Ë-Åªe_height‘oŸ->
right
) > 1) {

52 i‡(
roŸ
->
À·
->
d©a
 > data) {

53 
roŸ
 = 
	`avl_sögÀ_rŸ©e_À·
(root);

55 
roŸ
 = 
	`avl_doubÀ_rŸ©e_À·
(root);

58 } i‡(
d©a
 > 
roŸ
->data) {

59 
roŸ
->
right
 = 
	`avl_ö£π
‘oŸ->right,ÑoŸ, 
d©a
);

60 if(
	`åì_height
(
roŸ
->
right
Ë-Åªe_height‘oŸ->
À·
) > 1) {

61 i‡(
roŸ
->
right
->
d©a
 < data) {

62 
roŸ
 = 
	`avl_sögÀ_rŸ©e_right
(root);

64 
roŸ
 = 
	`avl_doubÀ_rŸ©e_right
(root);

69 
roŸ
->
height
 = 
	`max
(
	`åì_height
‘oŸ->
À·
),Åªe_height‘oŸ->
right
))+1;

70  
roŸ
;

71 
	}
}

73 
node


74 
	$avl_dñëe
(
node
 
roŸ
,Çodê
∑ª¡
, 
d©a
){

76 
node
 
tmp
=
NULL
;

78 if(!
roŸ
){

79  
NULL
;

81 if(
d©a
 < 
roŸ
->data){

82  
	`avl_dñëe
(
roŸ
->
À·
,ÑoŸ, 
d©a
);

83 } if–
d©a
 > 
roŸ
->data) {

84  
	`avl_dñëe
(
roŸ
->
right
,ÑoŸ, 
d©a
);

86 
tmp
 = 
roŸ
;

87 if(
tmp
->
À·
 =
NULL
 ||Åmp->
right
 == NULL){

89 if(
∑ª¡
->
d©a
 > 
tmp
->data) {

90 
∑ª¡
->
À·
 = 
NULL
;

93 
	`åì_height
(
roŸ
->
À·
);

97 
	}
}

100 
	$avl_isAVL
(
node
 
roŸ
) {

102 
À·
 = 0;

103 
right
 = 0;

104 if(!
roŸ
){

107 
À·
 = 
	`avl_isAVL
(
roŸ
->left);

108 if(
À·
 < 0) {

111 
right
 = 
	`avl_isAVL
(
roŸ
->right);

112 if(
right
 < 0) {

116 if(
	`abs
(
À·
-
right
) > 1)

119  
	`max
(
À·
, 
right
) +1 ;

121 
	}
}

124 
	$avl_cou¡_nodes_ö_ønge
(
node
 
roŸ
, 
a
, 
b
) {

126 if(!
roŸ
)

129 if(
b
 > 
roŸ
->
d©a
) {

130  
	`avl_cou¡_nodes_ö_ønge
(
roŸ
->
À·
, 
a
, 
b
);

131 } i‡(
a
 < 
roŸ
->
d©a
) {

132  
	`avl_cou¡_nodes_ö_ønge
(
roŸ
->
right
, 
a
, 
b
);

133 } i‡–
roŸ
->
d©a
 >
a
 &&ÑoŸ->d©®<
b
) {

134  
	`avl_cou¡_nodes_ö_ønge
(
roŸ
->
À·
, 
a
, 
b
Ë+ávl_cou¡_nodes_ö_ønge‘oŸ->
right
,á, b) + 1;

136 
	}
}

138 
node


139 
	$avl_föd_˛o£_key
(
node
 
roŸ
, 
d©a
) {

141 
node
 
tmp
;

142 if(!
roŸ
)

143  
roŸ
;

145 if(
roŸ
->
d©a
 == data){

146  
roŸ
;

149 if(
d©a
 < 
roŸ
->data) {

150 if(!
roŸ
->
À·
)

151  
roŸ
;

152 
tmp
 = 
	`avl_föd_˛o£_key
(
roŸ
->
À·
, 
d©a
);

153  
	`abs
(
roŸ
->
d©a
-d©aË<ábs(
tmp
->data-data)?root:tmp;

155 if(!
roŸ
->
right
)

156  
roŸ
;

157 
tmp
 = 
	`avl_föd_˛o£_key
(
roŸ
->
right
, 
d©a
);

158  
	`abs
(
roŸ
->
d©a
-d©aË<ábs(
tmp
->data-data)?root:tmp;

161  
NULL
;

162 
	}
}

164 
	$avl_max_vÆ
(
node
 
roŸ
){

165 if(!
roŸ
)

167 if(!
roŸ
->
right
)

168  
roŸ
->
d©a
;

169  
	`avl_max_vÆ
(
roŸ
->
right
);

170 
	}
}

172 
	$avl_mö_vÆ
(
node
 
roŸ
){

173 if(!
roŸ
)

175 if(!
roŸ
->
À·
)

176  
roŸ
->
d©a
;

177  
	`avl_mö_vÆ
(
roŸ
->
À·
);

178 
	}
}

181 
	$avl_medün
(
node
 
roŸ
){

182 
uöt32_t
 
tmp
;

183 
ªs
;

185 if(!
roŸ
)

187 if(
g_cou¡
 %2 == 0){

188 
tmp
 = 
	`avl_mö_vÆ
(
roŸ
->
right
)+roŸ->
d©a
;

189 
ªs
 = 
tmp
/2;

191 
ªs
 = ()
roŸ
->
d©a
;

193 
	}
}

	@avl_tree.h

1 
	~"åì.h
"

3 
node
 
avl_ö£π
“odê
roŸ
,Çodê
∑ª¡
, 
d©a
);

5 
avl_isAVL
(
node
 
roŸ
);

7 
avl_cou¡_nodes_ö_ønge
(
node
 
roŸ
, 
a
, 
b
);

9 
node
 
avl_föd_˛o£_key
“odê
roŸ
, 
d©a
);

11 
avl_medün
(
node
 
roŸ
);

	@b_plus_tree.c

	@b_tree.c

1 
	~"åì.h
"

2 
	#COUNT
 10

	)

4 
node
 
gë_√w_node
();

5 
‰ì_node
(
node
 
n
);

8 
	$max
(
a
, 
b
) {

9  
a
>
b
?a:b;

10 
	}
}

12 
node
 
	$gë_√w_node
() {

13 
node
 
√w_node
 = (nodeË
	`ˇŒoc
(1,(
Node
));

14  
√w_node
;

15 
	}
}

17 
	$‰ì_node
(
node
 
n
) {

18 
	`‰ì
(
n
);

20 
	}
}

22 * 
	$föd_max_b°
(
node
 
roŸ
) {

24 if(
NULL
 =
roŸ
)

25  
NULL
;

26 if(
NULL
 =
roŸ
->
right
)

27  
roŸ
;

28  
	`föd_max_b°
(
roŸ
->
right
);

29 
	}
}

31 
	$ö£π_node_b°
(
node
 
roŸ
,Çodê
√w_node
) {

32 
node
 
tmp
 = 
roŸ
;

33 
tmp
) {

34 if(
√w_node
->
d©a
 < 
tmp
->data) {

35 if–
NULL
 =
tmp
->
À·
) {

36 
tmp
->
À·
 = 
√w_node
;

39 
tmp
 =Åmp->
À·
;

41 if–
NULL
 =
tmp
->
right
) {

42 
tmp
->
right
 = 
√w_node
;

45 
tmp
 =Åmp->
right
;

48 
	}
}

50 
node
 
	$dñëe_node_b°_ªc
(
node
 
roŸ
, 
d©a
) {

52 
node
 
tmp
;

54 i‡(
NULL
 =
roŸ
) {

55 
	`¥ötf
("\nNoÉlements inÅheÅree\n");

57 if(
d©a
 < 
roŸ
->data) {

58 
roŸ
->
À·
 = 
	`dñëe_node_b°_ªc
‘oŸ->À·, 
d©a
);

59 } i‡(
d©a
 > 
roŸ
->data) {

60 
roŸ
->
right
 = 
	`dñëe_node_b°_ªc
‘oŸ->right, 
d©a
);

62 if(
roŸ
->
À·
 &&ÑoŸ->
right
) {

63 
tmp
 = 
	`föd_max_b°
(
roŸ
->
À·
);

64 
roŸ
->
d©a
 = 
tmp
->data;

68 
roŸ
->
À·
 = 
	`dñëe_node_b°_ªc
‘oŸ->À·,ÑoŸ->
d©a
);

70 
tmp
 = 
roŸ
;

71 if(
NULL
 =
roŸ
->
À·
) {

72 
roŸ
 =ÑoŸ->
right
;

74 i‡(
NULL
 =
roŸ
->
right
) {

75 
roŸ
 =ÑoŸ->
À·
;

77 
	`‰ì
(
tmp
);

80  
roŸ
;

81 
	}
}

83 
	$dñëe_node_b°
(
node
 
roŸ
, 
d©a
) {

84 
node
 
tmp
 = 
roŸ
;

85 
node
 
cur
 = 
NULL
;

86 
tmp_d©a
 = 
d©a
;

87 
tmp
) {

88 if(
tmp_d©a
 < 
tmp
->
d©a
) {

89 
tmp
 =Åmp->
À·
;

90 } i‡(
tmp_d©a
 > 
tmp
->
d©a
) {

91 
tmp
 =Åmp->
right
;

93 if(
tmp
->
À·
 &&Åmp->
right
) {

94 
cur
 = 
	`föd_max_b°
(
tmp
->
À·
);

95 
tmp
->
d©a
 = 
cur
->data;

96 
tmp_d©a
 = 
cur
->
d©a
;

97 
tmp
 =Åmp->
À·
;

99 
cur
 = 
tmp
;

100 if(
NULL
 =
tmp
->
À·
) {

101 
tmp
 =Åmp->
right
;

103 i‡(
NULL
 =
tmp
->
right
) {

104 
tmp
 =Åmp->
À·
;

106 
	`‰ì
(
cur
);

110 
	}
}

113 
	$ö£π_node_ødix
(
node
 
roŸ
, 
uöt32_t
 
d©a
) {

114 
node
 
tmp
 = 
roŸ
, 
√w_node1
, 
√w_node2
;

115 
uöt32_t
 
max
 = 0xFFFFFFFF;

116 
uöt32_t
 
√t
,
ho°1
, 
ho°2
, 
v¨
, 
mask
, 
Àn
, 
À·
, 
right
;

118 if(!
roŸ
){

119 
√w_node1
 = 
	`gë_√w_node
();

120 
√w_node1
->
d©a
 = data;

121 
√w_node1
->
À·
 = 
NULL
;

122 
√w_node1
->
right
 = 
NULL
;

123 
roŸ
 = 
√w_node1
;

127 
v¨
 = (
tmp
->
d©a
 ^ data);

128 
Àn
 = ()(
	`log2
(
v¨
));

130 
√t
 = 
tmp
->
d©a
 & (
max
<<(
Àn
+1));

131 
ho°1
 = (
tmp
->
d©a
^
√t
);

132 
ho°2
 = 
d©a
^
√t
;

133 
À·
 = 
ho°1
 < 
ho°2
?host1:host2;

134 
right
 = 
ho°2
 < 
ho°1
?host2:host1;

136 if(
√t
 < 
tmp
->
d©a
) {

137 if–
NULL
 =
tmp
->
À·
){

138 
√w_node1
 = 
	`gë_√w_node
();

139 
√w_node1
->
d©a
 = data;

140 
√w_node1
->
À·
 = 
NULL
;

141 
√w_node1
->
right
 = 
NULL
;

142 
tmp
->
À·
 = 
√w_node1
;

144 
	`ö£π_node_ødix
(
tmp
->
À·
,Üeft);

145 
	`ö£π_node_ødix
(
tmp
->
À·
, 
right
);

147 } i‡(
√t
 > 
tmp
->
d©a
) {

148 if–
NULL
 =
tmp
->
right
){

149 
√w_node1
 = 
	`gë_√w_node
();

150 
√w_node1
->
d©a
 = data;

151 
√w_node1
->
À·
 = 
NULL
;

152 
√w_node1
->
right
 = 
NULL
;

153 
tmp
->
À·
 = 
√w_node1
;

155 
	`ö£π_node_ødix
(
tmp
->
right
, 
À·
);

156 
	`ö£π_node_ødix
(
tmp
->
right
,Ñight);

161 
	}
}

163 
	$ö£π_node
(
Node
 **
roŸ
, 
uöt32_t
 
d©a
, 
åì_ty≥
 
ty≥
) {

164 
node
 
tmp
;

165 if(
NULL
 =
roŸ
) {

168 
ty≥
) {

169 
TREE_BST
:

170 
tmp
 = 
	`gë_√w_node
();

171 
tmp
->
d©a
 = data;

172 
tmp
->
À·
 = 
NULL
;

173 
tmp
->
right
 = 
NULL
;

175 if(
NULL
 =*
roŸ
) {

176 *
roŸ
 = 
tmp
;

179 
	`ö£π_node_b°
(*
roŸ
, 
tmp
);

181 
TREE_AVL
:

182 *
roŸ
 = 
	`avl_ö£π
(*roŸ, *roŸ, 
d©a
);

184 
TREE_RADIX
:

185 if(
NULL
 =*
roŸ
) {

186 
tmp
 = 
	`gë_√w_node
();

187 
tmp
->
d©a
 = data;

188 
tmp
->
À·
 = 
NULL
;

189 
tmp
->
right
 = 
NULL
;

190 *
roŸ
 = 
tmp
;

193 
	`ö£π_node_ødix
(*
roŸ
, 
d©a
);

196 
	`¥ötf
("\nUnsupportedÅree-type\n");

199 
	}
}

201 
	$dñëe_node
(
node
 
roŸ
, 
uöt32_t
 
d©a
, 
åì_ty≥
 
ty≥
) {

203 if(
NULL
 =
roŸ
) {

206 
ty≥
) {

207 
TREE_BST
:

209 
	`dñëe_node_b°_ªc
(
roŸ
, 
d©a
);

212 
	`¥ötf
("\nUnsupportedÅree-type\n");

215 
	}
}

219 
	$¥öt2DUtû
(
node
 
roŸ
, 
•a˚
)

222 i‡(
roŸ
 =
NULL
)

226 
•a˚
 +
COUNT
;

229 
	`¥öt2DUtû
(
roŸ
->
right
, 
•a˚
);

233 
	`¥ötf
("\n");

234 
i
 = 
COUNT
; i < 
•a˚
; i++)

235 
	`¥ötf
(" ");

236 
	`¥ötf
("%d\n", 
roŸ
->
d©a
);

239 
	`¥öt2DUtû
(
roŸ
->
À·
, 
•a˚
);

240 
	}
}

243 
	$¥öt_åì
(
node
 
roŸ
) {

244 
node
 
tmp
 = 
NULL
;

245 
	`¥öt2DUtû
(
roŸ
, 0);

246 
	}
}

248 
	$ö‹dî
(
node
 
roŸ
) {

249 
node
 
tmp
 = 
roŸ
;

250 i‡(
tmp
) {

251 
	`ö‹dî
(
tmp
->
À·
);

252 
	`¥ötf
("%d ", 
tmp
->
d©a
);

253 
	`ö‹dî
(
tmp
->
right
);

256 
	}
}

258 
	$Àvñ‹dî
(
node
 
roŸ
,Çodê
À·
,Çodê
right
) {

259 
node
 
tmp
 = 
roŸ
;

261 i‡(
tmp
){

262 
	`¥ötf
(" %d", 
tmp
->
d©a
);

266 
	`Àvñ‹dî
(
tmp
->
À·
,Üe·->À·, 
right
->right);

267 
	`Àvñ‹dî
(
tmp
->
right
, 
À·
->left,Ñight->right);

270 
	}
}

272 
uöt32_t
 
	$åì_height
(
node
 
roŸ
) {

274 i‡(
NULL
 =
roŸ
) {

277 if(
NULL
 !
roŸ
 && NULL =roŸ->
À·
 && NULL =roŸ->
right
) {

281  
	`åì_height
(
roŸ
->
À·
Ë>Åªe_height‘oŸ->
right
)?Åree_height(root->left)+1:Åree_height(root->right)+1;

282 
	}
}

285 
boﬁ
 
	$is_vÆid_b°
(
node
 
roŸ
){

286 
boﬁ
 
ªs
;

287 if(!
roŸ
)

288  
åue
;

289 if(
NULL
 !
roŸ
->
À·
){

290 if(
roŸ
->
d©a
 <ÑoŸ->
À·
->data)

291  
Ál£
;

293 if(
NULL
 !
roŸ
->
right
){

294 if(
roŸ
->
d©a
 >ÑoŸ->
right
->data)

295  
Ál£
;

297 
ªs
 = 
	`is_vÆid_b°
(
roŸ
->
À·
);

298 if(!
ªs
){

299  
Ál£
;

301 
ªs
 = 
	`is_vÆid_b°
(
roŸ
->
right
);

302 if(!
ªs
){

303  
Ál£
;

305  
åue
;

306 
	}
}

309 
	$Àaf_cou¡
(
node
 
roŸ
){

310 
a
,
b
;

311 i‡(!
roŸ
)

313 if(!
roŸ
->
À·
 && !roŸ->
right
)

316 
a
 = 
	`Àaf_cou¡
(
roŸ
->
À·
);

317 
b
 = 
	`Àaf_cou¡
(
roŸ
->
right
);

318  
a
+
b
;

319 
	}
}

322 
	$max_∑th_sum
(
node
 
roŸ
) {

324 
À·Sum
, 
rightSum
;

325 if(!
roŸ
)

327 
À·Sum
 = 
	`max_∑th_sum
(
roŸ
->
À·
);

328 
rightSum
 = 
	`max_∑th_sum
(
roŸ
->
right
);

330  
	`max
(
À·Sum
, 
rightSum
)+
roŸ
->
d©a
;

331 
	}
}

	@b_tree.h

1 
	~"åì.h
"

2 #¥agm®
⁄˚


4 
	sNode
 {

5 
uöt32_t
 
	md©a
;

6 
Node
 *
	mÀ·
;

7 
Node
 *
	mright
;

8 
uöt32_t
 
	mheight
;

9 
uöt32_t
 
	mcou¡
;

11 
Node
 * 
	tnode
;

13 
	eåì_ty≥_
 {

14 
	mTREE_BST
 = 0,

15 
	mTREE_AVL
,

16 
	mTREE_BAL
,

17 
	mTREE_RADIX
,

18 
	mTREE_MAX


19 } 
	tåì_ty≥
;

21 
node
 
gë_√w_node
();

22 
ö£π_node
(
Node
 **
roŸ
, 
uöt32_t
 
d©a
, 
åì_ty≥
 
ty≥
);

23 
dñëe_node
(
Node
 *
roŸ
, 
uöt32_t
 
d©a
, 
åì_ty≥
 
ty≥
);

25 
¥öt_åì
(
node
 
roŸ
);

26 
ö‹dî
(
node
 
roŸ
);

27 
Àvñ‹dî
(
node
 
roŸ
,Çodê
À·
,Çodê
right
);

28 
uöt32_t
 
åì_height
(
node
 
roŸ
);

29 
¥öt2DUtû
(
node
 
roŸ
, 
•a˚
);

30 
max
(
a
, 
b
);

31 
boﬁ
 
is_vÆid_b°
(
node
 
roŸ
);

32 
Àaf_cou¡
(
node
 
roŸ
);

33 
max_∑th_sum
(
node
 
roŸ
);

	@binary_search.c

1 
	~"°dio.h
"

2 
	~"°dlib.h
"

4 
	$bö¨y_£¨ch
(*
a
, 
Àn
, 
èrgë
){

5 
À·
, 
right
, 
mid
;

7 
À·
 = 0;

8 
right
 = 
Àn
-1;

9 
À·
 <
right
){

10 
mid
 = (
À·
+
right
)/2;

11 i‡(
a
[
mid
] =
èrgë
){

12  
mid
;

14 i‡(
a
[
mid
] < 
èrgë
) {

15 
À·
 = 
mid
+1;

17 
right
 = 
mid
-1;

21 
	}
}

23 
	$maö
(){

25 
¨r
[7] = {1,3, 5, 6, 8, 9, 23};

26 
èrgë
 = 9, 
i
;

28 
	`¥ötf
("\nGivenárray is:\n");

29 
i
=0;i<7;i++) {

30 
	`¥ötf
("%d ", 
¨r
[
i
]);

32 
	`¥ötf
("\nT¨gë:%d, sizêo‡¨øy: %lu", 
èrgë
, (
¨r
));

33 
	`¥ötf
("\nT¨gë i†©:%d\n", 
	`bö¨y_£¨ch
(
¨r
, 7, 
èrgë
));

36 
	}
}

	@bitwise.c

1 
	~"°dio.h
"

2 
	~"m©h.h
"

4 
	#ADD_BM
 0x01

	)

5 
	#UPDATE_BM
 0x02

	)

6 
	#DEL_BM
 0x04

	)

9 
	$¥öt_bö¨y
(
n
){

10 
size
 = (
n
);

11 
i
, 
tmp
=0, 
j
 =0;

12 
°r
[36] = {0}, 
°
[3] = {0}, 
•a˚
 = ' ';

13 
i
=0;i<(8*
size
);i++){

14 
tmp
 = 1 & (
n
>>
i
);

15 
	`¢¥ötf
(
°
, 2, "%d",
tmp
);

16 
°r
[34-
j
] = 
°
[0];

17 
j
++;

18 if((
i
%8) == 7){

19 
°r
[34-
j
] = 
•a˚
;

20 
j
++;

23 
	`¥ötf
("%s\n",
°r
);

24 
	}
}

27 
	$maö
() {

29 
a
 = 20, 
b
=5, 
c
 =0, 
k
, 
l
, 
r
, 
roŸ
, 
max
 = 0xFFFF;

30 
d
 = -3, 
pos
=3, 
ªs
;

31 
	`¥ötf
("\«=%i\n", 
a
);

32 
	`¥ötf
("\nb=%i\n", 
b
);

33 
c
 = (
a
^
b
);

34 
k
 = ()(
	`log2
(
c
));

35 
	`¥ötf
("\nPosôi⁄ k=%i\n", 
k
);

36 
roŸ
 = 
a
&(
max
<<(
k
+1));

37 
l
 = 
a
^
roŸ
;

38 
r
 = 
b
^
roŸ
;

39 
	`¥ötf
("\ƒoŸ=%i\n", 
roŸ
);

40 
	`¥ötf
("\∆=%i\n", 
l
);

41 
	`¥öt_bö¨y
(
l
);

42 
	`¥ötf
("\ƒ=%i\n", 
r
);

43 
	`¥öt_bö¨y
(
r
);

44 
	`¥ötf
("\nd=%d, d=%u\n", 
d
, d);

45 
	`¥öt_bö¨y
(
d
);

46 
	`¥ötf
("\∆e·-shi·: d=%i\n", 
d
>>2);

47 
	`¥öt_bö¨y
(
d
>>2);

48 
	`¥ötf
("\ƒight-shi·: d=%i\n", 
d
<<2);

49 
	`¥öt_bö¨y
(
d
<<2);

50 
d
 = 0;

51 
	`¥ötf
("\nd=%i\n", 
d
);

52 
	`¥öt_bö¨y
(
d
);

53 
	`¥ötf
("\∆e·-shi·: d=%i\n", 
d
>>2);

54 
	`¥ötf
("\ƒight-shi·: d=%i\n", 
d
<<2);

56 
d
 = 23;

57 
	`¥ötf
("\nTogÀ %dth bô o‡d=%d\n", 
pos
, 
d
);

58 
	`¥öt_bö¨y
(
d
);

60 
ªs
 = 1 &(
d
>>
pos
);

61 
ªs
 =Ñes==1?(
d
&(~(1<<
pos
))):(d|(1<<pos));

62 
	`¥ötf
("\nTogÀÑesu…=%d\n", 
ªs
);

63 
	`¥öt_bö¨y
(
ªs
);

81 
	}
}

	@buffer_extract.c

1 
	~"°dlib.h
"

2 
	~"°dio.h
"

3 
	~"°döt.h
"

5 
	sã°_ty≥_


7 
uöt32_t
 
	md1
;

8 
uöt16_t
 
	md2
;

9 
uöt16_t
 
	md3
;

10 } 
	tã°_ty≥_t
;

13 
	$exåa˘_buf„r
 (*
buf„r
)

16 
ã°_ty≥_t
 
b1
;

18 
b1
 = *(
ã°_ty≥_t
 *Ë
buf„r
;

19 i‡(!
buf„r
)

24 
	`¥ötf
 ("%x\n", 
b1
.
d1
);

25 
	`¥ötf
 ("%x\n", 
b1
.
d2
);

26 
	`¥ötf
 ("%x\n", 
b1
.
d3
);

28 
	`¥ötf
 ("%x\n", *(
uöt32_t
 *Ë
buf„r
);

29 
	`¥ötf
 ("%x\n", *(
uöt16_t
 *Ë(
buf„r
 + 4));

30 
	`¥ötf
 ("%x\n", *(
uöt16_t
 *Ë(
buf„r
 + 6));

32 
	}
}

35 
	$maö
 ()

37 
buf„r
[] = { 1, 2, 3, 4, 5, 6, 7, 8 };

40 
	`exåa˘_buf„r
 (
buf„r
);

42 
	}
}

	@check_signed.c

1 
	~"°dio.h
"

2 
	~"°dlib.h
"

4 
	$maö
(){

5 
a
 = 121;

6 
ªs
 = 0;

7 
	`¥ötf
("\«=%d\n", 
a
);

8 
ªs
 = (
a
 & (1 << 31)) == (1 << 31);

9 
	`¥ötf
("\ƒes=%d\n", 
ªs
);

12 
	}
}

	@const.c

1 
	~"°dio.h
"

2 
	~"°dlib.h
"

4 
	$maö
(){

6 
v
 = 100, 
u
 = 200;

7 c⁄° *
a
 = &
v
;

9 *
a
 = 
u
;

11 
	`¥ötf
("\®*®%d\n", *
a
);

14 
	}
}

	@contiguous_max.c

1 
	~"°dio.h
"

2 
	~"°dlib.h
"

4 
	$max
(
a
, 
b
, 
c
){

6  
a
>
b
?◊>
c
?a:c):(b>c?b:c);

7 
	}
}

14 
	$maxVÆ
(*
a
, 
l
, 
h
) {

16 
maxLe·Sum
 = 0, 
maxRightSum
=0, 
À·Sum
 = 0, 
rightSum
 = 0, 
À·BrSum
 = 0, 
rightBrSum
=0;

17 
m
, 
i
;

18 i‡(
l
 =
h
){

19  
a
[
l
];

21 
m
 = (
l
+
h
)/2;

23 
À·Sum
 = 
	`maxVÆ
(
a
, 
l
, 
m
);

24 
rightSum
 = 
	`maxVÆ
(
a
, 
m
+1,
h
);

26 
i

m
; i>=
l
;i--){

27 
À·BrSum
 +
a
[
i
];

28 if(
À·BrSum
 > 
maxLe·Sum
){

29 
maxLe·Sum
 = 
À·BrSum
;

32 
i

m
+1; i<=
h
;i++){

33 
rightBrSum
 +
a
[
i
];

34 if(
rightBrSum
 > 
maxRightSum
){

35 
maxRightSum
 = 
rightBrSum
;

39  
	`max
(
À·Sum
, 
rightSum
, 
maxLe·Sum
+
maxRightSum
);

41 
	}
}

43 
	$maö
(){

45 
¨r
[] = {1, 0, 5, -2, 4, 20, 1};

46 
a
30, 
b
20, 
c
45, 
i
, 
n
=7;

48 
	`¥ötf
("Max o‡a:%d, b:%d, c:%d i†ªs:%d", 
a
, 
b
, 
c
, 
	`max
(a,b,c));

49 
	`¥ötf
("\nArray contentsáre:\n");

50 
i
 = 0;i<
n
;i++){

51 
	`¥ötf
("%d \n", 
¨r
[
i
]);

53 
	`¥ötf
("\nMax sum o‡sub£quí˚ i†%d\n", 
	`maxVÆ
(
¨r
, 0, 
n
-1));

56 
	}
}

	@duplicate_number.c

1 
	~"°dio.h
"

2 
	~"°dlib.h
"

5 
	$maö
(){

7 
¨r
[100];

8 
i
, 
j
, 
n
, 
max
 = 0, 
maxid
;

9 
	`¥ötf
("\nEnterÅhe size ofárray ofÉlements:\n");

10 
	`sˇnf
("%d", &
n
);

11 
	`¥ötf
("\nENã∏%d AºayÉÀmíts:\n", 
n
);

12 
i
=0;i<
n
;i++)

13 
	`sˇnf
("%d", &
¨r
[
i
]);

15 
	`¥ötf
("\nArrayÉlements:\n");

16 
i
=0;i<
n
;i++)

17 
	`¥ötf
("%d ", 
¨r
[
i
]);

18 
i
=0;i<
n
;i++){

19 
¨r
[¨r[
i
]%
n
] +=Ç;

21 
	`¥ötf
("\nArrayÉlements After:\n");

22 
i
=0;i<
n
;i++)

23 
	`¥ötf
("%d ", 
¨r
[
i
]);

24 
	`¥ötf
("\nArrayÉlements After 1:\n");

25 
i
=0;i<
n
;i++){

26 if(
¨r
[
i
]/
n
 > 
max
){

27 
max
 = 
¨r
[
i
]/
n
;

28 
maxid
 = 
i
;

30 
	`¥ötf
("%d ", 
¨r
[
i
]%
n
);

33 
	`¥ötf
("\¿Index o‡thêñemíàexi°ed maxÇumbî o‡timê%d\n", 
maxid
);

34 
	}
}

	@endian.c

1 
	~<°dio.h
>

3 
	$maö
()

5 
i
 = 1;

6 *
c
 = (*)&
i
;

7 i‡(*
c
)

8 
	`¥ötf
("LittleÉndian");

10 
	`¥ötf
("BigÉndian");

11 
	`gëch¨
();

13 
	}
}

	@f32.c

1 
	~"°döt.h
"

2 
	~"°dio.h
"

4 
	$maö
() {

5 
uöt32_t
 
a
 = 10;

6 
b
, 
c
=0.01;

8 
b
 = ()
a
;

10 
b
 = b-
c
;

11 
	`¥ötf
("\nA=%d B=%lf\n", 
a
, 
b
);

12 if(
b
 > 
a
) {

13 
	`¥ötf
("B is greater\n");

16 
	}
}

	@find_missing_number.c

1 
	~"°dio.h
"

2 
	~"°dlib.h
"

4 
	$föd
(*
a
, 
l
 , 
h
){

5 
m
;

6 
v
 = -1;

7 if(
l
<
h
 && (h-l >= 2)){

9 
m
 = (
l
+
h
)/2;

10 
	`¥ötf
("món: --%d--\n", (
a
[
l
]+a[
h
])/2);

11 
	`¥ötf
("mid: --%d--\n", 
a
[
m
]);

12 
	`¥ötf
("l: --%d--\n", 
l
);

13 
	`¥ötf
("h: --%d--\n", 
h
);

14 
	`¥ötf
("m: --%d--\n", 
m
);

15 
	`¥ötf
("----------\n\n");

16 if(
a
[
m
] !◊[
l
]+a[
h
])/2)

17  (
a
[
l
]+a[
h
])/2;

18 
v
 = 
	`föd
(
a
, 
l
, 
m
);

19 if(
v
 >= 0)

20  
v
;

21 
v
 = 
	`föd
(
a
, 
m
, 
h
);

22  
v
;

25 
	}
}

27 
	$maö
(){

29 
¨r
[100] = {0};

30 
n
, 
i
;

31 
l
 = 0, 
r
 = 7, 
ªs
 = -1;

32 
	`¥ötf
("\nEnterÅhe size:\n");

33 
	`sˇnf
("%d", &
n
);

34 
	`¥ötf
("\nE¡î %dÉÀmíts:\n",
n
);

35 
i
=0;i<
n
;i++)

36 
	`sˇnf
("%d", &
¨r
[
i
]);

38 
ªs
 = 
	`föd
(
¨r
, 
l
, 
n
-1);

39 i‡(
ªs
 < 0){

40 
	`¥ötf
("\nMissingÇumber isÇot found\n");

43 
	`¥ötf
("\nMissögÇumbî i†%d\n", 
ªs
);

45 
	}
}

	@float.c

1 
	~"°dio.h
"

2 
	~"°dlib.h
"

4 
	#THRESH
 0.1

	)

6 
	$maö
() {

8 
a
 = 0;

9 
b
 = 10;

11 
c
;

13 
c
 = 
b
*
THRESH
;

14 
	`¥ötf
("\nc=%d\n", 
c
);

16 if–
a
 >
b
*
THRESH
){

17 
	`¥ötf
("TestÖassed\n");

19 
	`¥ötf
("Test failed\n");

22 
	}
}

	@fork.c

1 
	~"°dio.h
"

2 
	~"°dlib.h
"

3 
	~"time.h
"

4 
	~"limôs.h
"

5 
	~"uni°d.h
"

6 
	~"sys/waô.h
"

8 
	$maö
(){

10 
i
=0;

11 
pid
, 
°©us
;

12 
time_t
 
cur_time1
, 
cur_time2
;

14 
cur_time1
 = 
	`time
(
NULL
);

15 
	`¥ötf
("\nP¨ít(%dËSèπedát: %ld", 
	`gëpid
(),
cur_time1
);

16 
i
<
INT_MAX
){

17 
i
++;

19 
pid
 = 
	`f‹k
();

20 if(
pid
 == 0){

22 
i
=0;

23 
cur_time1
 = 
	`time
(
NULL
);

24 
	`¥ötf
("\nChûd(%d): Sèπedát: %ld", 
	`gëpid
(), 
cur_time1
);

25 
i
<
INT_MAX
){

26 
i
++;

28 
cur_time2
 = 
	`time
(
NULL
);

29 
	`¥ötf
("\nChûd(%d): Endedát: %ld, dif„ªn˚:%ld\n", 
	`gëpid
(), 
cur_time2
, (cur_time2-
cur_time1
));

31 
	`waôpid
(
pid
, &
°©us
, 0);

32 if(
	`WIFEXITED
(
°©us
)){

33 
	`¥ötf
("\nP¨ít(%d): ChûdÖro˚s†ãrmö©edÇ‹mÆly", 
	`gëpid
());

35 
	`¥ötf
("\nP¨ít(%d): ChûdÖro˚s†ãrmö©edábn‹mÆly!!!!!",
	`gëpid
());

38 
cur_time2
 = 
	`time
(
NULL
);

39 
	`¥ötf
("\nP¨ít(%d): Endedát: %ld, dif„ªn˚:%ld\n", 
	`gëpid
(), 
cur_time2
, (
cur_time1
-cur_time2));

44 
	}
}

	@forloop.c

1 
	~"°dio.h
"

3 
	$maö
() {

5 
¨r
[] = {1, 2, 3, 4, 5, 6, 7, 8};

6 
i
;

7 
i
=0;i<8;i++) {

8 
	`¥ötf
(" %d", 
¨r
[
i
]);

9 
i
 = i+1;

11 
	`¥ötf
("\n");

14 
	}
}

	@format_specifier.c

1 
	~"°dio.h
"

3 
	$maö
() {

5 
a
 = 0xaa00aa00;

7 
	`¥ötf
("\n%x", 
a
);

8 
	`¥ötf
("\n%2x", 
a
);

9 
	`¥ötf
("\n%2x", 
a
);

10 
	`¥ötf
("\n%x", 
a
);

11 
	`¥ötf
("\n");

13 
	}
}

	@graph.c

1 
	~"°dio.h
"

2 
	~"°dlib.h
"

4 
	sLi°Node
 {

5 
	mvîãxNumbî
;

	@hash.c

1 
	~"hash.h
"

4 
	$hash_decode_ ode
(
h ode
 
node
, *
decode
){

6 if(!
node
){

7 
	`•rötf
(
decode
, "NULL");

10 
	`•rötf
(
decode
, "%d:%d", *(
uöt32_t
 *)
node
->
key
, *(uöt32_à*Íode->
d©a
);

12 
	}
}

14 
uöt32_t


15 
	$hash
(
uöt8_t
 *
key
, 
uöt32_t
 
Àn
, uöt32_à
size
) {

17 
i
;

18 
uöt64_t
 
tmp
 = 19;

19 
i
=0;i<
Àn
; i++){

20 
tmp
 +(
uöt64_t
)
key
[
i
]+tmp;

22  
tmp
%
size
;

23 
	}
}

25 
h ode


26 
	$hash_gë_li°_node
(){

27 
h ode
 
 ode
 = 
NULL
;

28 
 ode
 = (
h ode
)
	`mÆloc
((
hashLi°Node
));

29  
 ode
;

30 
	}
}

32 
hèbÀ


33 
	$hash_¸óã_èbÀ
(
uöt32_t
 
size
) {

35 
hèbÀ
 
èbÀ
 = 
NULL
;

36 
häode
 
node
 = 
NULL
;

37 
i
 = 0, 
√w_size
;

39 
√w_size
 = 
	`√¨e°_¥ime
(
size
);

41 
èbÀ
 = (
hèbÀ
Ë
	`mÆloc
((
hashTabÀ
));

42 i‡(!
èbÀ
) {

43 
	`¥ötf
("\nHash Table creation failed\n");

44  
NULL
;

46 
èbÀ
->
size
 = 
√w_size
;

47 
node
 = (
häode
Ë
	`mÆloc
((
hashTabÀNode
)*
√w_size
);

48 if(!
node
) {

49 
	`¥ötf
("\nHash Table creation failed\n");

50 
	`‰ì
(
èbÀ
);

51  
NULL
;

53 
èbÀ
->èbÀ = 
node
;

55 
i
=0;i<
size
;i++){

56 
node
[
i
].
ödex
 = i;

57 
node
[
i
].
cou¡
 = 0;

58 
node
[
i
].
√xt
 = 
NULL
;

61  
èbÀ
;

62 
	}
}

64 
hash_ªt


65 
	$hash_ö£π
(
hèbÀ
 
èbÀ
, 
uöt8_t
 *
key
, 
uöt32_t
 
key_Àn
, uöt8_à*
d©a
, uöt32_à
d©a_Àn
) {

67 
öt32_t
 
ödex
;

68 
h ode
 
 ode
 = 
NULL
, 
tmp
 = NULL;

69 i‡(!
key
 || !
d©a
 || !
èbÀ
 || !table->table){

70 
	`¥ötf
("\nNULL check failed during insertion\n");

71  
HASH_ERROR
;

74 
ödex
 = 
	`hash
(
key
, 
key_Àn
, 
èbÀ
->
size
);

76 if(
ödex
 < 0){

77 
	`¥ötf
("\nHashing failed\n");

78  
HASH_ERROR
;

81 
 ode
 = 
	`hash_gë_li°_node
();

82 
 ode
->
key
 = (
uöt8_t
 *)
	`ˇŒoc
(
key_Àn
, (uint8_t));

83 
 ode
->
d©a
 = (
uöt8_t
 *)
	`ˇŒoc
(
d©a_Àn
, (uint8_t));

84 
	`mem˝y
(
 ode
->
key
, key, 
key_Àn
);

85 
	`mem˝y
(
 ode
->
d©a
, d©a, 
d©a_Àn
);

87 if(!
èbÀ
->èbÀ[
ödex
].
√xt
){

88 
èbÀ
->èbÀ[
ödex
].
√xt
 = 
 ode
;

91 
tmp
 = 
èbÀ
->èbÀ[
ödex
].
√xt
;

92 
NULL
 !
tmp
->
√xt
){

93 
tmp
 =Åmp->
√xt
;

95 
tmp
->
√xt
 = 
 ode
;

97 
èbÀ
->èbÀ[
ödex
].
cou¡
++;

99  
HASH_SUCCESS
;

100 
	}
}

103 
	$hash_¥öt_èbÀ
(
hèbÀ
 
èbÀ
){

105 
häode
 
hnode
 = 
NULL
;

106 
h ode
 
 ode
 = 
NULL
;

107 
i
;

108 
decode
[100] = {0};

109 if(!
èbÀ
){

110 
	`¥ötf
("\nTable doesn'tÉxist\n");

114 
hnode
 = 
èbÀ
->table;

115 
	`¥ötf
("\n|");

116 
i
 = 0; i<
èbÀ
->
size
;i++){

117 
 ode
 = 
hnode
[
i
].
√xt
;

118 
	`¥ötf
("%d|", 
hnode
[
i
].
cou¡
);

119 
 ode
){

120 
	`hash_decode_ ode
(
 ode
, 
decode
);

121 
	`¥ötf
("->[%s]",
decode
);

122 
 ode
 =Ünode->
√xt
;

124 
	`¥ötf
("->NULL");

125 
	`¥ötf
("\n|");

128 
	}
}

130 
	$maö
(){

132 
i
, 
key
, 
d©a
, 
n
;

133 
hèbÀ
 
èbÀ
 = 
NULL
;

134 
FILE
 *
Â
 = 
NULL
;

136 
	`¥ötf
("\nEnterÅhe hash-table size :");

137 
	`sˇnf
("%d", &
n
);

138 
èbÀ
 = 
	`hash_¸óã_èbÀ
(
n
);

139 
	`¥ötf
("\nHashÅable contentsáre:\n");

140 
	`hash_¥öt_èbÀ
(
èbÀ
);

142 
	`¥ötf
("\nEnterÅheÇumber ofÉlementsÅo beáddedÅo hash-table :");

143 
	`sˇnf
("%d", &
n
);

145 
Â
 = 
	`f›í
("tc.txt", "r");

146 if(!
Â
){

147 
	`¥ötf
("\nFailedÅo open file:\n");

150 
	`¥ötf
("\nE¡î %dÉÀmíts(key, d©a):\n", 
n
);

151 
i
=0;i<
n
;i++){

152 
	`fsˇnf
(
Â
, "%d %d", &
key
, &
d©a
);

153 
	`hash_ö£π
(
èbÀ
, (
uöt8_t
 *)&
key
, (key), (uöt8_à*)&
d©a
, (data));

155 
	`f˛o£
(
Â
);

157 
	`¥ötf
("\nHashÅable contentsáre:\n");

158 
	`hash_¥öt_èbÀ
(
èbÀ
);

159 
	}
}

	@hash.h

1 
	~"°dio.h
"

2 
	~"°döt.h
"

3 
	~"°dlib.h
"

4 
	~"°rög.h
"

5 
	~"¥ime.h
"

6 
	~<öây≥s.h
>

8 
	ehash_ªt_
 {

9 
	mHASH_SUCCESS
 = 0,

10 
	mHASH_ERROR


11 } 
	thash_ªt
;

13 
	shashLi°Node_
 {

14 
uöt8_t
 *
	mkey
;

15 
uöt8_t
 *
	md©a
;

16 
hashLi°Node_
 *
	m√xt
;

17 } 
	thashLi°Node
;

19 
hashLi°Node
 * 
	th ode
;

21 
	shashTabÀNode_
 {

22 
uöt8_t
 
	mcou¡
;

23 
uöt32_t
 
	mödex
;

24 
h ode
 
	m√xt
;

25 } 
	thashTabÀNode
;

27 
hashTabÀNode
 * 
	thäode
;

29 
	shashTabÀ_
 {

30 
uöt32_t
 
	msize
;

31 
hashTabÀNode
 *
	mèbÀ
;

32 } 
	thashTabÀ
;

34 
hashTabÀ
 * 
	thèbÀ
;

36 
uöt32_t


37 
hash
(
uöt8_t
 *
key
, 
uöt32_t
 
Àn
, uöt32_à
size
);

39 
hèbÀ


40 
hash_¸óã_èbÀ
(
uöt32_t
 
size
);

42 
hash_ªt


43 
hash_ö£π
(
hèbÀ
 
èbÀ
, 
uöt8_t
 *
key
, 
uöt32_t
 
key_Àn
, uöt8_à*
d©a
, uöt32_à
d©a_Àn
);

45 
hash_ªt


46 
hash_dñëe
(
hèbÀ
 
èbÀ
);

48 
hash_ªt


49 
hash_£¨ch
(
hèbÀ
 
èbÀ
);

51 
√¨e°_¥ime
(
n
);

	@heap.c

1 
	~"°dio.h
"

2 
	~"°dlib.h
"

4 
	#MAX_HEAP
 0

	)

5 
	#MIN_HEAP
 1

	)

7 
	#COUNT
 2

	)

9 
	shóp_
 {

10 *
	m¨r
;

11 
	mcou¡
;

12 
	mˇ∑côy
;

13 
	mty≥
;

14 } 
	thóp
;

17 
hóp
* 
	$¸óã_hóp
(
ˇ∑côy
, 
ty≥
) {

19 
hóp
 *
h
 = (hó∞*Ë
	`mÆloc
((heap));

21 
h
->
ˇ∑côy
 = capacity;

22 
h
->
cou¡
 = 0;

23 
h
->
ty≥
 =Åype;

24 
h
->
¨r
 = (*Ë
	`mÆloc
(
ˇ∑côy
*());

26  
h
;

27 
	}
}

29 
	$∑ª¡
(
hóp
 *
h
, 
i
) {

31 i‡((
i
<0Ë|| i>
h
->
cou¡
){

35  (
i
-1)/2;

36 
	}
}

38 
	$À·_chûd
(
hóp
 *
h
, 
i
) {

40 
l
 = 2*
i
+1;

41 i‡((
i
<0Ë|| i>
h
->
cou¡
){

44 if(
l
 >
h
->
cou¡
) {

48  
l
;

49 
	}
}

51 
	$right_chûd
(
hóp
 *
h
, 
i
) {

53 
r
 = 2*
i
+2;

54 i‡((
i
<0Ë|| i>
h
->
cou¡
){

57 if(
r
 >
h
->
cou¡
) {

61  
r
;

62 
	}
}

64 
	$gë_max
(
hóp
 *
h
) {

66 if(0 <
h
->
cou¡
) {

70  
h
->
¨r
[0];

72 
	}
}

74 
	$hópify
(
hóp
 *
h
, 
i
) {

76 
max
, 
tmp
;

77 
l
 = 
	`À·_chûd
(
h
, 
i
);

78 
r
 = 
	`right_chûd
(
h
, 
i
);

80 if–
l
 < 0 && 
r
 < 0)

83 
max
 = 
i
;

85 if–
l
 >0 && 
h
->
¨r
[
i
] < h->arr[l])

86 
max
 = 
l
;

87 i‡(
r
 >0 && 
h
->
¨r
[r] > h->¨r[
max
])

88 
max
 = 
r
;

90 i‡(
i
 !
max
) {

91 
tmp
 = 
h
->
¨r
[
i
];

92 
h
->
¨r
[
i
] = h->¨r[
max
];

93 
h
->
¨r
[
max
] = 
tmp
;

98 
	`hópify
(
h
, 
max
);

99 
	}
}

102 
	$ö£π
(
hóp
 *
h
, 
d©a
) {

104 
i
, 
tmp
;

106 if(
h
->
ˇ∑côy
 =h->
cou¡
) {

107 
	`¥ötf
("\nHeap full\n");

111 
h
->
cou¡
++;

112 
i
 = 
h
->
cou¡
-1;

114 
i
 > 0 && 
d©a
 > 
h
->
¨r
[(i-1)/2]) {

115 
tmp
 = 
h
->
¨r
[(
i
-1)/2];

116 
h
->
¨r
[(
i
-1)/2] = h->arr[i];

117 
h
->
¨r
[
i
] = 
tmp
;

118 
i
 = (i-1)/2;

121 
h
->
¨r
[
i
] = 
d©a
;

123 
	}
}

126 
	$dñëe
(
hóp
 *
h
) {

128 
d©a
;

129 if(
h
->
cou¡
 <= 0) {

130 
	`¥ötf
("\nEmpty heap\n");

134 
d©a
 = 
h
->
¨r
[0];

136 
h
->
¨r
[0] = h->¨r[h->
cou¡
-1];

137 
h
->
¨r
[h->
cou¡
-1] = 0;

138 
h
->
cou¡
--;

139 
	`hópify
(
h
, 0);

140 
	}
}

142 
	$¥öt
(
hóp
 *
h
) {

144 
i
;

146 if(
h
->
cou¡
 <= 0) {

147 
	`¥ötf
("\nEmpty heap\n");

151 
i
0; i< 
h
->
cou¡
; i++) {

152 
	`¥ötf
(" %d", 
h
->
¨r
[
i
]);

154 
	`¥ötf
("\n");

157 
	}
}

160 
	$¥öt2DUtû
(
hóp
 *
h
, 
idx
, 
•a˚
)

162 
right
, 
À·
;

164 i‡(
idx
 >
h
->
cou¡
)

168 
•a˚
 +
COUNT
;

170 
right
 = 
	`right_chûd
(
h
, 
idx
);

171 i‡(
right
 < 0)

175 
	`¥öt2DUtû
(
h
, 
right
, 
•a˚
);

179 
	`¥ötf
("\n");

180 
i
 = 
COUNT
; i < 
•a˚
; i++)

181 
	`¥ötf
(" ");

182 
	`¥ötf
("%d\n", 
h
->
¨r
[
idx
]);

184 
À·
 = 
	`À·_chûd
(
h
, 
idx
);

185 i‡(
À·
 < 0)

188 
	`¥öt2DUtû
(
h
, 
À·
, 
•a˚
);

189 
	}
}

192 
	$¥öt_hóp
(
hóp
 *
h
) {

193 
	`¥öt2DUtû
(
h
, 0, 0);

194 
	}
}

197 
	$dñëe_ödex
(
hóp
 *
h
, 
idx
) {

198 
key
;

199 if(
idx
 > 
h
->
cou¡
 && idx < 0){

200 
	`¥ötf
("\nIncorrect index\n");

203 
key
 = 
h
->
¨r
[
idx
];

204 
h
->
¨r
[
idx
] = h->¨r[h->
cou¡
-1];

205 
h
->
cou¡
--;

206 
	`hópify
(
h
, 
idx
);

207  
key
;

208 
	}
}

211 
	$¥öt_vÆ_gª©î
(
hóp
 *
h
, 
idx
, 
d©a
){

213 
À·
, 
right
;

214 if(
idx
 >
h
->
cou¡
){

218 i‡(
h
->
¨r
[
idx
] < 
d©a
){

221 
	`¥ötf
(" %d", 
h
->
¨r
[
idx
]);

222 
À·
 = 
	`À·_chûd
(
h
, 
idx
);

223 i‡(
À·
 >= 0)

224 
	`¥öt_vÆ_gª©î
(
h
, 
À·
, 
d©a
);

225 
right
 = 
	`right_chûd
(
h
, 
idx
);

226 i‡(
right
 >= 0)

227 
	`¥öt_vÆ_gª©î
(
h
, 
right
, 
d©a
);

229 
	}
}

232 
	$maö
() {

234 
a
[100];

235 
i
, 
idx
, 
d©a
;

236 
n
;

237 
	`¥ötf
("\nEnterÅhe size ofÅhe HEAP:");

238 
	`sˇnf
("%d",&
n
);

239 
	`¥ötf
("\nE¡î %dÉÀmíts:\n", 
n
);

240 
i
 =0;i< 
n
; i++)

241 
	`sˇnf
("%d", &
a
[
i
]);

242 
	`¥ötf
("\nCreated heap forÅhe same is:\n");

244 
hóp
 *
h
 = 
	`¸óã_hóp
(
n
, 
MAX_HEAP
);

246 
i
=0; i<
n
;i++) {

247 
	`ö£π
(
h
, 
a
[
i
]);

250 
	`¥öt
(
h
);

251 
	`¥ötf
("\n++++++++++++++++++++++++++++++++++++++++\n");

252 
	`¥öt_hóp
(
h
);

253 
	`¥ötf
("\n++++++++++++++++++++++++++++++++++++++++\n");

254 
	`¥ötf
("\nDelete Max\n");

255 
	`dñëe
(
h
);

256 
	`¥öt
(
h
);

257 
	`¥ötf
("\nEnterÅhe index ofÅheÉlementÅo be deleted:");

258 
	`sˇnf
("%d",&
idx
);

259 
	`¥ötf
("\nDñëedÉÀmíà© index: %d\n", 
	`dñëe_ödex
(
h
, 
idx
));

260 
	`¥öt
(
h
);

261 
	`¥ötf
("\nEnterÅhe value for whichÅhe greaterÉlements should be searched for:");

262 
	`sˇnf
("%d",&
d©a
);

263 
	`¥öt_vÆ_gª©î
(
h
, 0, 
d©a
);

265 
	}
}

	@if.c

1 
	~"°dio.h
"

2 
	~"°dlib.h
"

4 
	$maö
() {

5 
a
 = 5;

7 i‡(
a
 > 5) {

8 
	`¥ötf
("Failed\n");

10 
	`¥ötf
("Success\n");

14 i‡(
a
 < 5) {

15 
	`¥ötf
("Failed\n");

17 
	`¥ötf
("Success\n");

21 
	}
}

	@linked_list.c

1 
	~"löked_li°.h
"

3 
	eŒ_ªt_
 {

4 
	mLL_SUCCESS
 = 0,

5 
	mLL_ERROR


6 } 
	tŒ_ªt
;

8 
Œ_ªt


9 
	$Œ_ö£π
(
node
 *
hód
, 
uöt32_t
 
d©a
) {

11 
node
 
√w_node
 = (nodeË
	`mÆloc
((
Node
));

12 
√w_node
->
d©a
 = data;

13 i‡(*
hód
 =
NULL
) {

14 *
hód
 = 
√w_node
;

15  
LL_SUCCESS
;

17 
√w_node
->
√xt
 = *
hód
;

18 *
hód
 = 
√w_node
;

19  
LL_SUCCESS
;

20 
	}
}

23 
Œ_ªt


24 
	$Œ_dñëe
(
node
 *
hód
, 
uöt32_t
 
d©a
) {

26 
node
 
tmp
, 
¥ev
;

27 i‡(*
hód
 =
NULL
) {

28  
LL_ERROR
;

31 
tmp
 = *
hód
;

32 i‡(
tmp
->
d©a
 == data) {

33 *
hód
 = 
tmp
->
√xt
;

34 
	`‰ì
(
tmp
);

35  
LL_SUCCESS
;

37 
NULL
 !
tmp
) {

38 if(
tmp
->
d©a
 == data) {

39 
¥ev
->
√xt
 = 
tmp
->next;

40 
	`‰ì
(
tmp
);

43 
¥ev
 = 
tmp
;

44 
tmp
 =Åmp->
√xt
;

47  
LL_SUCCESS
;

48 
	}
}

51 
	$Œ_¥öt
 (
node
 
hód
) {

52 
node
 
tmp
 = 
hód
;

54 
tmp
) {

55 
	`¥ötf
("%d->", 
tmp
->
d©a
);

56 
tmp
 =Åmp->
√xt
;

58 
	`¥ötf
("NULL\n");

60 
	}
}

63 
	$Œ_ªvî£
(
node
 *
hód
) {

65 
node
 
cur
, 
tmp
 = 
NULL
, 
¥ev
 = NULL;

66 i‡(*
hód
 =
NULL
) {

69 
cur
 = *
hód
;

70 
NULL
 !
cur
) {

71 
tmp
 = 
cur
->
√xt
;

72 
cur
->
√xt
 = 
¥ev
;

73 
¥ev
 = 
cur
;

74 
cur
 = 
tmp
;

76 *
hód
 = 
¥ev
;

77 
	}
}

80 
	$maö
() {

82 
node
 
HEAD
 = 
NULL
;

83 
uöt8_t
 
ch
;

84 
uöt32_t
 
d©a
[100], 
n
;

85 
	`¥ötf
("\nEnter 1ÅoáddÇodeÅoÅreeánd 0ÅoÉxit:\n");

86 
	`sˇnf
("%" 
SCNu8
 "", &
ch
);

87 if(
ch
) {

88 
	`¥ötf
("\nEnter data size:\n");

89 
	`sˇnf
("%" 
SCNu32
 "", &
n
);

90 
i
 = 0; i< 
n
; i++) {

91 
	`sˇnf
("%" 
SCNu32
 "", &
d©a
[
i
]);

92 
	`Œ_ö£π
(&
HEAD
, 
d©a
[
i
]);

95 
	`Œ_¥öt
(
HEAD
);

96 
	`¥ötf
("\nEnter dataÅo be deleted:\n");

97 
	`sˇnf
("%" 
SCNu32
 "", &
n
);

98 
	`Œ_dñëe
(&
HEAD
, 
n
);

99 
	`Œ_¥öt
(
HEAD
);

100 
	`Œ_ªvî£
(&
HEAD
);

101 
	`Œ_¥öt
(
HEAD
);

103 
	}
}

	@linked_list.h

1 
	~"°dio.h
"

2 
	~"°döt.h
"

3 
	~"°dlib.h
"

4 
	~<öây≥s.h
>

6 
	sNode_
 {

7 
uöt32_t
 
	md©a
;

8 
Node_
 *
	m√xt
;

9 } 
	tNode
;

11 
Node
 * 
	tnode
;

	@longest_palindrome.c

1 
	~"°dio.h
"

2 
	~"°rög.h
"

5 
	gl⁄ge°
 = 0;

6 
	gidx
 = -1;

7 
	$max
(
a
, 
b
){

8  
a
>
b
?a:b;

9 
	}
}

11 
	$∑lödrome_check
(*
°r
, 
m
){

13 
i
, 
Àn
;

15 
Àn
=
	`°æí
(
°r
);

16 
i
=0;

17 
m
>0 && 
i
<=m){

18 if(
°r
[
m
-
i
] != str[m+i])

20 
i
++;

22  2*(
i
-1)+1;

23 
	}
}

25 
	$∑lödrome
(*
°r
, 
l
, 
h
){

26 
m
, 
ªs
;

27 if(
l
<
h
){

28 if((
h
-
l
) == 1){

29 if(
°r
[
l
] !°r[
h
])

30 
ªs
 = 1;

32 
ªs
 = 2;

33 if(
ªs
 > 
l⁄ge°
){

34 
l⁄ge°
 = 
ªs
;

35 
idx
 = 
l
;

37  
ªs
;

40 
m
 = (
l
+
h
)/2;

41 
ªs
 = 
	`∑lödrome_check
(
°r
, 
m
);

42 if(
ªs
 > 
l⁄ge°
){

43 
l⁄ge°
 = 
ªs
;

44 
idx
 = 
ªs
/
m
;

46 (
	`max
(
	`∑lödrome
(
°r
, 
l
, 
m
),ÖÆödrome(°r, m+1,
h
)));

48 
	}
}

50 
	$maö
(){

52 *
°r
 = "aaaaamalaabcyalama";

55 
Àn
;

57 
Àn
 = 
	`°æí
(
°r
)-1;

59 
	`¥ötf
("\nGiví såög is:%†™dÜí:%d", 
°r
, 
Àn
+1);

60 
	`∑lödrome
(
°r
,0,
Àn
);

61 
	`¥ötf
("\nMaximumÜígth o‡thê∑lidromêsub°rög is:%dáàödex:%d\n", 
l⁄ge°
, 
idx
);

63 
	}
}

	@merge_sort.c

1 
	~"°dio.h
"

2 
	~"°dlib.h
"

4 
	$mîge
(*
a
, *
tmp
, 
l
, 
m
, 
r
) {

6 
À·_íd
, 
i
, 
j
,
k
, 
size
;

7 
À·_íd
 = 
m
-1;

8 
size
 = 
r
-
l
+1;

9 
i
 = 
l
;

10 
j
 = 
m
;

11 
k
 = 
l
;

13 
i
<=
À·_íd
 && 
j
<=
r
) {

14 if(
a
[
i
] <á[
j
]){

15 
tmp
[
k
] = 
a
[
i
];

16 
i
++;

18 
tmp
[
k
] = 
a
[
j
];

19 
j
++;

21 
k
++;

23 
j
<=
r
){

24 
tmp
[
k
] = 
a
[
j
];

25 
j
++;

26 
k
++;

28 
i
<=
À·_íd
){

29 
tmp
[
k
] = 
a
[
i
];

30 
i
++;

31 
k
++;

34 
i
=0;i<
size
;i++){

35 
a
[
r
] = 
tmp
[r];

36 
r
--;

39 
	}
}

41 
	$mîge
(*
a
, *
tmp
, 
l
, 
m
, 
r
){

43 
À·_íd
, 
i
, 
size
, 
k
;

44 
À·_íd
 = 
m
-1;

45 
size
 = 
r
-
l
+1;

46 
k
 = 
l
;

48 (
l
 <
À·_íd
Ë&& (
m
 <
r
)) {

49 if(
a
[
l
] <á[
m
]){

50 
tmp
[
k
] = 
a
[
l
];

51 
l
++;

53 
tmp
[
k
] = 
a
[
m
];

54 
m
++;

56 
k
++;

58 
l
 <
À·_íd
){

59 
tmp
[
k
] = 
a
[
l
];

60 
l
++;

61 
k
++;

63 
m
 <
r
){

64 
tmp
[
k
] = 
a
[
m
];

65 
m
++;

66 
k
++;

68 
i
=0;i<=
size
;i++){

69 
a
[
r
] = 
tmp
[r];

70 
r
--;

73 
	}
}

75 
	$mîge_s‹t
(*
a
, *
tmp
, 
l
, 
r
){

76 
m
;

77 if(
l
<
r
){

78 
m
 = (
l
+
r
)/2;

79 
	`mîge_s‹t
(
a
, 
tmp
, 
l
, 
m
);

80 
	`mîge_s‹t
(
a
, 
tmp
, 
m
+1,
r
);

82 
	`mîge
(
a
, 
tmp
, 
l
, 
m
+1, 
r
);

84 
	}
}

86 
	$maö
(){

87 
a
[10] = {2, 6, 9, 3, 5, 25, 94, 22, 33, 1};

88 
b
[10], 
i
;

89 
	`¥ötf
("\nBefore sorting:\n");

90 
i
 =0;i < 10; i++)

91 
	`¥ötf
(" %d", 
a
[
i
]);

92 
	`mîge_s‹t
(
a
, 
b
, 0, 9);

93 
	`¥ötf
("\nAfter sorting:\n");

94 
i
 =0;i < 10; i++)

95 
	`¥ötf
(" %d", 
a
[
i
]);

96 
	`¥ötf
("\n");

97 
	}
}

	@new_st.c

3 
	~<°dio.h
>

4 
	~<°dlib.h
>

5 
	~<m©h.h
>

8 
	$gëMid
(
s
, 
e
Ë{  s + (ê-s)/2; 
	}
}

19 
	$gëSumUtû
(*
°
, 
ss
, 
£
, 
qs
, 
qe
, 
si
)

23 i‡(
qs
 <
ss
 && 
qe
 >
£
)

24  
°
[
si
];

27 i‡(
£
 < 
qs
 || 
ss
 > 
qe
)

31 
mid
 = 
	`gëMid
(
ss
, 
£
);

32  
	`gëSumUtû
(
°
, 
ss
, 
mid
, 
qs
, 
qe
, 2*
si
+1) +

33 
	`gëSumUtû
(
°
, 
mid
+1, 
£
, 
qs
, 
qe
, 2*
si
+2);

34 
	}
}

42 
	$upd©eVÆueUtû
(*
°
, 
ss
, 
£
, 
i
, 
diff
, 
si
)

46 i‡(
i
 < 
ss
 || i > 
£
)

51 
°
[
si
] = st[si] + 
diff
;

52 i‡(
£
 !
ss
)

54 
mid
 = 
	`gëMid
(
ss
, 
£
);

55 
	`upd©eVÆueUtû
(
°
, 
ss
, 
mid
, 
i
, 
diff
, 2*
si
 + 1);

56 
	`upd©eVÆueUtû
(
°
, 
mid
+1, 
£
, 
i
, 
diff
, 2*
si
 + 2);

58 
	}
}

62 
	$upd©eVÆue
(
¨r
[], *
°
, 
n
, 
i
, 
√w_vÆ
)

65 i‡(
i
 < 0 || i > 
n
-1)

67 
	`¥ötf
("Invalid Input");

72 
diff
 = 
√w_vÆ
 - 
¨r
[
i
];

75 
¨r
[
i
] = 
√w_vÆ
;

78 
	`upd©eVÆueUtû
(
°
, 0, 
n
-1, 
i
, 
diff
, 0);

79 
	}
}

83 
	$gëSum
(*
°
, 
n
, 
qs
, 
qe
)

86 i‡(
qs
 < 0 || 
qe
 > 
n
-1 || qs > qe)

88 
	`¥ötf
("Invalid Input");

92  
	`gëSumUtû
(
°
, 0, 
n
-1, 
qs
, 
qe
, 0);

93 
	}
}

97 
	$c⁄°ru˘STUtû
(
¨r
[], 
ss
, 
£
, *
°
, 
si
)

101 i‡(
ss
 =
£
)

103 
°
[
si
] = 
¨r
[
ss
];

104  
¨r
[
ss
];

109 
mid
 = 
	`gëMid
(
ss
, 
£
);

110 
°
[
si
] = 
	`c⁄°ru˘STUtû
(
¨r
, 
ss
, 
mid
, st, si*2+1) +

111 
	`c⁄°ru˘STUtû
(
¨r
, 
mid
+1, 
£
, 
°
, 
si
*2+2);

112  
°
[
si
];

113 
	}
}

118 *
	$c⁄°ru˘ST
(
¨r
[], 
n
)

123 
x
 = ()(
	`˚û
(
	`log2
(
n
)));

126 
max_size
 = 2*()
	`pow
(2, 
x
) - 1;

129 *
°
 = (*)
	`mÆloc
(
max_size
*());

132 
	`c⁄°ru˘STUtû
(
¨r
, 0, 
n
-1, 
°
, 0);

135  
°
;

136 
	}
}

138 
	$¥öt_°
(*
°
, 
n
) {

139 
i
, 
x
, 
size
;

140 
x
 = ()(
	`˚û
(
	`log2
(
n
)));

141 
max_size
 = 2*()
	`pow
(2, 
x
) - 1;

142 
i
=0;i< 
max_size
; i++)

143 
	`¥ötf
("%d ", 
°
[
i
]);

144 
	`¥ötf
("\n");

145 
	}
}

148 
	$maö
()

150 
¨r
[] = {1, 3, 5, 7, 9, 11};

151 
n
 = (
¨r
)/(arr[0]);

154 *
°
 = 
	`c⁄°ru˘ST
(
¨r
, 
n
);

156 
	`¥ötf
("\nGivenárray is:\n");

157 
i
=0;i< 
n
; i++)

158 
	`¥ötf
("%d ", 
¨r
[
i
]);

159 
	`¥ötf
("\n");

161 
	`¥öt_°
(
°
, 
n
);

163 
	`¥ötf
("Sum of values in givenÑange = %dn\n",

164 
	`gëSum
(
°
, 
n
, 1, 3));

166 
	`¥öt_°
(
°
, 
n
);

169 
	`upd©eVÆue
(
¨r
, 
°
, 
n
, 1, 10);

171 
	`¥öt_°
(
°
, 
n
);

173 
	`¥ötf
("Updated sum of values in givenÑange = %dn\n",

174 
	`gëSum
(
°
, 
n
, 1, 3));

175 
	`¥öt_°
(
°
, 
n
);

177 
	}
}

	@non_null.c

1 
	~"°dio.h
"

2 
	~"°dlib.h
"

5 
	$ã°
() {

6  
ã°
;

7 
	}
}

9 
	$maö
(){

10 
	`¥ötf
("Test Non-NULLÑeturn\n");

11 
	`ã°
();

12 
	`¥ötf
("Tested Non-NULLÑeturn\n");

14 
	}
}

	@noop.c

1 
	~"°dio.h
"

3 
	#no›
 ()0

	)

5 
	$maö
(){

7 
x
 = 10;

8 
	`¥ötf
("\nTestÖrogram for No-Op\n");

9 
no›
;

11 
	`¥ötf
("\nPo° No-O∞: %d\n",
x
);

13 
	}
}

	@pkt_extract.c

9 
	~<°dio.h
>

10 
	~"°döt.h
"

11 
	~"°dlib.h
"

12 
	~"uni°d.h
"

13 
	~"°rög.h
"

26 
	#ADDRESS_LEN
 2

	)

29 
	$exåa˘_pkt
(*
buf„r
, 
pkt_Àn
){

31 
uöt8_t
 *
d©a
;

32 
uöt8_t
 
bôs
 = 0x03, 
Àn
=0x3F;

33 
uöt32_t
 
if_idx
 = 0xFFFFFF00;

34 
d©a_Àn
;

35 
i
;

36 if(!
buf„r
){

40 
	`¥ötf
("Src: %x", *(
uöt16_t
 *)
buf„r
);

41 
	`¥ötf
("\nD°: %x", *(
uöt16_t
 *)(
buf„r
+
ADDRESS_LEN
));

42 
	`¥ötf
("\nbô†%x", ((*(
uöt8_t
*)(
buf„r
+4Ë& 
bôs
)));

43 
	`¥ötf
("\∆í %x", ((*(
uöt8_t
*)(
buf„r
+4Ë& 
Àn
)));

45 
d©a_Àn
 = (
pkt_Àn
*()) - 8;

47 
	`¥ötf
("\nif-ödex %x",
	`ht⁄l
((*(
uöt32_t
*)(
buf„r
+5)Ë& 
if_idx
));

53 
d©a
 = 
buf„r
+8;

55 
	`¥ötf
("\nd©a-Àn: %d\n", 
d©a_Àn
);

58 
i
=0;i<
d©a_Àn
;i++){

59 
	`¥ötf
("%x ", *((
uöt8_t
 *)(
d©a
+
i
)));

61 
	`¥ötf
("\n");

64 
	}
}

70 
	$maö
()

72 
buff
[5] = {0x02020303,0xbfaeaeae,0x0c0c0c0c, 0x0d0d0d0d, 0x0e0e0e0e};

75 
i
, 
size
 = (
buff
)/();

76 
i
=0;i<
size
;i++)

77 
	`¥ötf
("%x ", 
buff
[
i
]);

78 
	`¥ötf
("\n");

79 
	`exåa˘_pkt
((*)
buff
, 
size
);

82 
	}
}

	@pointer_test.c

1 
	~"°dlib.h
"

2 
	~"°dio.h
"

4 
	$maö
() {

6 *
a
 = 
NULL
;

7 
c
 = 20, 
b
 = 10;

8 
	`¥ötf
("\n%d\n", 
a
?
b
:
c
);

11 
	}
}

	@poll.c

5 
	~<pﬁl.h
>

6 
	~<f˙é.h
>

7 
	~<sys/ty≥s.h
>

8 
	~<°dio.h
>

9 
	~<°dlib.h
>

10 
	~<uni°d.h
>

12 
	#îrExô
(
msg
Ëdÿ{ 
	`≥º‹
(msg); 
	`exô
(
EXIT_FAILURE
); \

13 } 0)

	)

16 
	$maö
(
¨gc
, *
¨gv
[])

18 
nfds
, 
num_›í_fds
;

19 
pﬁlfd
 *
pfds
;

21 i‡(
¨gc
 < 2) {

22 
	`Ârötf
(
°dîr
, "Ußge: %†fûe...\n", 
¨gv
[0]);

23 
	`exô
(
EXIT_FAILURE
);

26 
num_›í_fds
 = 
nfds
 = 
¨gc
 - 1;

27 
pfds
 = 
	`ˇŒoc
(
nfds
, (
pﬁlfd
));

28 i‡(
pfds
 =
NULL
)

29 
	`îrExô
("malloc");

33 
j
 = 0; j < 
nfds
; j++) {

34 
pfds
[
j
].
fd
 = 
	`›í
(
¨gv
[j + 1], 
O_RDONLY
);

35 i‡(
pfds
[
j
].
fd
 == -1)

36 
	`îrExô
("open");

38 
	`¥ötf
("O≥√d \"%s\" o¿fd %d\n", 
¨gv
[
j
 + 1], 
pfds
[j].
fd
);

40 
pfds
[
j
].
evíts
 = 
POLLIN
;

46 
num_›í_fds
 > 0) {

47 
ªady
;

49 
	`¥ötf
("AboutÅoÖoll()\n");

50 
ªady
 = 
	`pﬁl
(
pfds
, 
nfds
, -1);

51 i‡(
ªady
 == -1)

52 
	`îrExô
("poll");

54 
	`¥ötf
("Ródy: %d\n", 
ªady
);

58 
j
 = 0; j < 
nfds
; j++) {

59 
buf
[100];

61 i‡(
pfds
[
j
].
ªvíts
 != 0) {

62 
	`¥ötf
(" fd=%d;Évíts: %s%s%s\n", 
pfds
[
j
].
fd
,

63 (
pfds
[
j
].
ªvíts
 & 
POLLIN
) ? "POLLIN " : "",

64 (
pfds
[
j
].
ªvíts
 & 
POLLHUP
) ? "POLLHUP " : "",

65 (
pfds
[
j
].
ªvíts
 & 
POLLERR
) ? "POLLERR " : "");

67 i‡(
pfds
[
j
].
ªvíts
 & 
POLLIN
) {

68 
ssize_t
 
s
 = 
	`ªad
(
pfds
[
j
].
fd
, 
buf
, (buf));

69 i‡(
s
 == -1)

70 
	`îrExô
("read");

71 
	`¥ötf
("Ñead %zd bytes: %.*s\n",

72 
s
, (Ës, 
buf
);

74 
	`¥ötf
(" closög fd %d\n", 
pfds
[
j
].
fd
);

75 i‡(
	`˛o£
(
pfds
[
j
].
fd
) == -1)

76 
	`îrExô
("close");

77 
num_›í_fds
--;

83 
	`¥ötf
("All file descriptors closed; bye\n");

84 
	`exô
(
EXIT_SUCCESS
);

85 
	}
}

	@prime.c

1 
	~"¥ime.h
"

3 
uöt64_t
 
	gdp
[100] = {0};

5 
uöt64_t


6 
	$Á˘‹ül
(
n
){

7 
i
;

8 i‡(
n
 == 0 ||Ç == 1){

11 if(
dp
[
n
] != 0){

12  
dp
[
n
];

14 
dp
[0] = 1;

15 
dp
[1] = 1;

16 
i
=2;i<=
n
;i++){

17 
dp
[
i
] = dp[i-1]*i;

20  
dp
[
n
];

21 
	}
}

24 
	$is_¥ime
(
n
){

25 
uöt64_t
 
ªs
, 
Á˘
;

27 if(
n
<=0)

35 
Á˘
 = 
	`Á˘‹ül
(
n
-1);

36 
ªs
 = 
Á˘
%
n
;

37 
	`¥ötf
("Á˘:%ldÑes:%ld\n",
Á˘
,
ªs
);

39 if(
ªs
 =
n
-1) {

40  
n
;

44 
	}
}

47 
	$√¨e°_¥ime
(
n
){

49 
i
;

50 
i
=
n
;i<(2*n);i++){

51 if(
	`is_¥ime
(
i
) > 0) {

52  
i
;

56 
	}
}

59 
	$maö
(){

61 
n
, 
ªs
;

62 
	`¥ötf
("\nEnterÅoÅheÇumberÅo findÇearestÖrimeÇumber:\n");

63 
	`sˇnf
("%d", &
n
);

64 
ªs
 = 
	`√¨e°_¥ime
(
n
);

66 if(
ªs
 < 0){

67 
	`¥ötf
("\nNearestÖrimeÇumberÇot found\n");

68 
	`exô
(0);

70 
	`¥ötf
("\nNóª°Örimênumbî found is: %d\n", 
ªs
);

73 
	}
}

	@prime.h

1 
	~"°dio.h
"

2 
	~"°dlib.h
"

3 
	~"öây≥s.h
"

5 
√¨e°_¥ime
(
n
);

	@queue.c

1 
	~"queue.h
"

4 
qnode


5 
	$gë_√w_qnode
() {

6 
qnode
 
√w_qnode
 = (qnodeË
	`ˇŒoc
(1,(
Queuíode
));

7  
√w_qnode
;

8 
	}
}

11 
	$‰ì_qnode
(
qnode
 
n
) {

12 
	`‰ì
(
n
);

14 
	}
}

16 
qnode


17 
	$íqueue
(
qnode
 
hód
, *
d©a
, 
isI¡
) {

19 
vÆ
 = 0;

21 
qnode
 
tmp
 = 
NULL
;

22 i‡(
hód
 =
NULL
) {

23 
hód
 = 
	`gë_√w_qnode
();

24 i‡(
isI¡
) {

25 
hód
->
d©a
 = *(
uöt32_t
 *)data;

27 
hód
->
d©aPå
 = 
d©a
;

29  
hód
;

32 
tmp
 = 
	`gë_√w_qnode
();

33 i‡(
isI¡
) {

34 
tmp
->
d©a
 = *(
uöt32_t
 *)data;

36 
tmp
->
d©aPå
 = 
d©a
;

38 
tmp
->
√xt
 = 
hód
;

39 
hód
 = 
tmp
;

40  
hód
;

41 
	}
}

43 
qnode


44 
	$dequeue
(
qnode
 
hód
) {

45 
qnode
 
tmp
 = 
NULL
,

46 
¥ev
 = 
NULL
;

47 i‡(
hód
 =
NULL
) {

48  
hód
;

51 
tmp
 = 
hód
;

52 
¥ev
 = 
hód
;

53 
NULL
 !
tmp
->
√xt
) {

54 
¥ev
 = 
tmp
;

55 
tmp
 =Åmp->
√xt
;

57 
¥ev
->
√xt
 = 
NULL
;

58 
	`‰ì_qnode
(
tmp
);

59 if(
hód
 =
tmp
) {

60  
NULL
;

62  
hód
;

63 
	}
}

66 
	$¥öt_queue
(
qnode
 
hód
) {

68 
qnode
 
tmp
 = 
NULL
;

69 if(
NULL
 =
hód
)

70 
	`¥ötf
("\nEmpty queue\n");

72 
tmp
 = 
hód
;

73 
NULL
 !
tmp
) {

74 
	`¥ötf
("%d->",
tmp
->
d©a
);

75 
tmp
 =Åmp->
√xt
;

77 
	`¥ötf
("NULL\n");

78 
	}
}

81 
	$maö
() {

83 
qnode
 
HEAD
 = 
NULL
;

84 
uöt8_t
 
ch
;

85 
uöt32_t
 
d©a
;

86 
	`¥ötf
("\nEnter 1Åoádd qnodeÅo queueánd 0ÅoÉxit:\n");

87 
	`sˇnf
("%" 
SCNu8
 "", &
ch
);

88 
ch
) {

89 
	`¥ötf
("\nEnter data:\n");

90 
	`sˇnf
("%" 
SCNu32
 "", &
d©a
);

91 
HEAD
 = 
	`íqueue
(HEAD, 
d©a
);

92 
	`¥öt_queue
(
HEAD
);

93 
	`¥ötf
("\nEnter 1Åoádd qnodeÅo queueánd 0ÅoÉxit:\n");

94 
	`sˇnf
("%" 
SCNu8
 "", &
ch
);

96 
	`¥ötf
("\nEnter 1Åo del qnode from queueánd 0ÅoÉxit:\n");

97 
	`sˇnf
("%" 
SCNu8
 "", &
ch
);

98 
ch
) {

99 
HEAD
 = 
	`dequeue
(HEAD);

100 
	`¥öt_queue
(
HEAD
);

101 
	`¥ötf
("\nEnter 1Åo del qnode from queueánd 0ÅoÉxit:\n");

102 
	`sˇnf
("%" 
SCNu8
 "", &
ch
);

105 
	}
}

	@queue.h

1 
	~"°dio.h
"

2 
	~"°döt.h
"

3 
	~"°dlib.h
"

4 
	~<öây≥s.h
>

6 
	sQueuíode
 {

7 
uöt32_t
 
	md©a
;

8 *
	md©aPå
;

9 
Queuíode
 *
	m√xt
;

11 
Queuíode
 * 
	tqnode
;

12 
qnode
 
gë_√w_qnode
();

13 
‰ì_qnode
(
qnode
 
n
);

14 
qnode
 
íqueue
(qnodê
hód
, *
d©a
, 
isI¡
);

15 
qnode
 
dequeue
(qnodê
hód
);

16 
¥öt_queue
(
qnode
 
hód
);

	@queue_main.c

1 
	~"°dio.h
"

2 
	~"queue.h
"

4 
	$maö
() {

6 
qnode
 
HEAD
 = 
NULL
;

7 
uöt8_t
 
ch
;

8 
uöt32_t
 
d©a
;

9 
	`¥ötf
("\nEnter 1Åoádd qnodeÅo queueánd 0ÅoÉxit:\n");

10 
	`sˇnf
("%" 
SCNu8
 "", &
ch
);

11 
ch
) {

12 
	`¥ötf
("\nEnter data:\n");

13 
	`sˇnf
("%" 
SCNu32
 "", &
d©a
);

14 
HEAD
 = 
	`íqueue
(HEAD, &
d©a
, 1);

15 
	`¥öt_queue
(
HEAD
);

16 
	`¥ötf
("\nEnter 1Åoádd qnodeÅo queueánd 0ÅoÉxit:\n");

17 
	`sˇnf
("%" 
SCNu8
 "", &
ch
);

19 
	`¥ötf
("\nEnter 1Åo del qnode from queueánd 0ÅoÉxit:\n");

20 
	`sˇnf
("%" 
SCNu8
 "", &
ch
);

21 
ch
) {

22 
HEAD
 = 
	`dequeue
(HEAD);

23 
	`¥öt_queue
(
HEAD
);

24 
	`¥ötf
("\nEnter 1Åo del qnode from queueánd 0ÅoÉxit:\n");

25 
	`sˇnf
("%" 
SCNu8
 "", &
ch
);

28 
	}
}

	@quick_sort.c

1 
	~"°dio.h
"

2 
	~"°dlib.h
"

5 
	$sw≠
(*
a
, *
b
) {

6 
tmp
;

7 
tmp
 = *
a
;

8 *
a
 = *
b
;

9 *
b
 = 
tmp
;

10 
	}
}

13 
	$∑πôi⁄
(*
a
, 
low
, 
high
) {

14 
À·
, 
right
, 
p
 = 
a
[
low
];

15 
À·
 = 
low
;

16 
right
 = 
high
;

18 
À·
 < 
right
){

19 
a
[
À·
] <
p
)

20 
À·
++;

21 
a
[
right
] > 
p
)

22 
right
--;

23 if(
À·
 < 
right
)

24 
	`sw≠
(&
a
[
À·
], &a[
right
]);

26 
a
[
low
] =á[
right
];

27 
a
[
right
] = 
p
;

28  
right
;

29 
	}
}

32 
	$quick_s‹t
(*
a
, 
l
, 
r
) {

33 
p
;

34 if(
l
<
r
){

35 
p
 = 
	`∑πôi⁄
(
a
, 
l
, 
r
);

36 
	`quick_s‹t
(
a
, 
l
, 
p
-1);

37 
	`quick_s‹t
(
a
, 
p
+1, 
r
);

40 
	}
}

42 
	$maö
(){

43 
a
[10] = {2, 6, 9, 3, 5, 25, 94, 22, 33, 1};

44 
b
[10], 
j
, 
i
;

45 
	`¥ötf
("\nBefore sorting:\n");

46 
j
 = 0; j < 10; j++)

47 
	`¥ötf
(" %d", 
a
[
j
]);

48 
	`quick_s‹t
(
a
, 0, 9);

49 
	`¥ötf
("\nAfter sorting:\n");

50 
i
 =0;i < 10; i++)

51 
	`¥ötf
(" %d", 
a
[
i
]);

52 
	`¥ötf
("\n");

53 
	}
}

	@remove_duplicate.c

1 
	~"°dio.h
"

3 
	gd©a
[100] = {0};

4 
	gªs
[100] = {0};

6 
	$ªmove_du∂iˇã
(*
a
, 
n
){

7 
i
, 
tmp
, 
j
, 
k
;

9 
i
 = 0;

10 
j
 = 0;

11 
k
 = 
n
-1;

12 
i
<
n
){

13 if(
d©a
[
a
[
i
]] == 0){

14 
d©a
[
a
[
i
]] = 1;

15 
ªs
[
j
] = 
a
[
i
];

16 
j
++;

18 
ªs
[
k
] = 
a
[
i
];

19 
k
--;

21 
i
++;

23 
	}
}

25 
	$maö
() {

27 
n
, 
i
;

28 
a
[100];

29 
	`¥ötf
("\nEnterÅheárray size:\n");

30 
	`sˇnf
("%d", &
n
);

31 
	`¥ötf
("E¡î %dÉÀmíts:\n", 
n
);

32 
i
=0;i<
n
;i++){

33 
	`sˇnf
("%d", &
a
[
i
]);

35 
	`ªmove_du∂iˇã
(
a
, 
n
);

36 
	`¥ötf
("\nAfterÑemoving duplicateÉlements:\n");

37 
i
=0;i<
n
;i++){

38 
	`¥ötf
("%d ", 
ªs
[
i
]);

40 
	`¥ötf
("\n");

42 
	}
}

	@ring_buffer.c

1 
	~"°dio.h
"

2 
	~"°dlib.h
"

3 
	~"°rög.h
"

4 
	~"öây≥s.h
"

5 
	~"°dboﬁ.h
"

6 
	~"±hªad.h
"

7 
	~"uni°d.h
"

9 
	#BUF_SIZE
 100

	)

10 
	#BUF_BEGIN
(
buf„r
Ë(
uöt64_t
)buf„r->
buff


	)

11 
	#BUF_END
(
buf„r
Ë(
uöt64_t
)buf„r->
buff
+buf„r->
size


	)

14 
uöt32_t
 
	gr_cou¡
=0;

15 
uöt32_t
 
	gw_cou¡
=0;

16 
uöt32_t
 
	grw_cou¡
=0;

18 
	sr_buf_
 {

19 
uöt8_t
 *
	mbuff
;

20 
uöt64_t
 
	mw_hód
;

21 
uöt64_t
 
	mr_hód
;

22 
uöt32_t
 
	msize
;

23 
boﬁ
 
	mis_ªcy˛e
;

24 
r_buf_
 *
	m√xt
;

25 } 
	tr_buf_t
;

27 
öt32_t
 
	gmtx
 = 1;

30 
	$muãx_lock
() {

31 
mtx
 == 0);

32 
mtx
 -=1;

33 
	}
}

36 
	$muãx_u∆ock
() {

37 
mtx
 +=1;

38 
	}
}

40 
öt32_t


41 
	$rbuf_öô
(
r_buf_t
 *
buf„r
, 
uöt32_t
 
size
) {

42 
buf„r
->
buff
 = (
uöt8_t
 *)
	`ˇŒoc
(
size
, (uint8_t));

43 
buf„r
->
w_hód
 = 
	`BUF_BEGIN
(buffer);

44 
buf„r
->
r_hód
 = 
	`BUF_END
(buffer);

45 
buf„r
->
size
 = size;

46 
buf„r
->
is_ªcy˛e
 = 
Ál£
;

48 
	}
}

50 
öt32_t


51 
	$rbuf_wrôe
(
r_buf_t
 *
buf„r
, 
uöt8_t
 *
d©a
, 
uöt32_t
 
Àn
){

54 
uöt32_t
 
‰ì
 = 0;

55 
rw_cou¡
++;

57 if(!(
buf„r
->
is_ªcy˛e
Ë&& (buf„r->
w_hód
 < buf„r->
r_hód
)) {

58 
	`¥ötf
("Write failed\n");

62 
‰ì
 = (
	`BUF_END
(
buf„r
)-buf„r->
w_hód
)+(buf„r->
r_hód
-
	`BUF_BEGIN
(buffer)-1);

63 i‡(
Àn
 > 
‰ì
){

64 
	`¥ötf
("data size is higher\n");

68 i‡(!(
buf„r
->
is_ªcy˛e
Ë&& (
Àn
 > (
	`BUF_END
(buf„r)-buf„r->
w_hód
))) {

69 
	`mem˝y
((
uöt8_t
 *)
buf„r
->
w_hód
, 
d©a
, (
	`BUF_END
(buffer)-buffer->w_head));

70 
Àn
 -((
uöt32_t
)(
	`BUF_END
(
buf„r
)-buf„r->
w_hód
));

71 
d©a
 = d©a+(
	`BUF_END
(
buf„r
)-buf„r->
w_hód
);

72 
buf„r
->
w_hód
 = 
	`BUF_BEGIN
(buffer);

73 
buf„r
->
is_ªcy˛e
 = 
åue
;

76 
	`mem˝y
((
uöt8_t
 *)
buf„r
->
w_hód
, 
d©a
, 
Àn
);

77 
buf„r
->
w_hód
 +=
Àn
;

80 if(
buf„r
->
is_ªcy˛e
 && (buf„r->
w_hód
 > buf„r->
r_hód
)){

81 
buf„r
->
is_ªcy˛e
 = 
Ál£
;

83 
w_cou¡
++;

84  
Àn
;

85 
	}
}

87 
öt32_t


88 
	$rbuf_ªad
(
r_buf_t
 *
buf„r
, 
uöt32_t
 
Àn
, 
uöt8_t
 *
d©a
){

90 
uöt32_t
 
u£d
 = 0;

91 
rw_cou¡
++;

94 i‡(!(
buf„r
->
is_ªcy˛e
Ë&& (
Àn
 > (buf„r->
w_hód
-buf„r->
r_hód
))){

95 
	`¥ötf
("dataÑead is higher\n");

99 
u£d
 = (
	`BUF_END
(
buf„r
)-buf„r->
r_hód
Ë+ (buf„r->
w_hód
-
	`BUF_BEGIN
(buffer));

100 if((
buf„r
->
is_ªcy˛e
Ë&& (
Àn
 > 
u£d
)) {

101 
	`¥ötf
("dataÑead is higher\n");

105 i‡((
buf„r
->
is_ªcy˛e
Ë&& (
Àn
 > (
	`BUF_END
(buf„r)-buf„r->
r_hód
))) {

106 
	`mem˝y
(
d©a
, (
uöt8_t
 *)
buf„r
->
r_hód
, (
	`BUF_END
(buffer)-buffer->r_head));

107 
Àn
 -((
uöt32_t
)(
	`BUF_END
(
buf„r
)-buf„r->
r_hód
));

108 
d©a
 = d©a+(
	`BUF_END
(
buf„r
)-buf„r->
r_hód
);

109 
buf„r
->
r_hód
 = 
	`BUF_BEGIN
(buffer);

111 
	`mem˝y
(
d©a
, (
uöt8_t
 *)
buf„r
->
r_hód
, 
Àn
);

112 
buf„r
->
r_hód
 +=
Àn
;

114 
r_cou¡
++;

115  
Àn
;

116 
	}
}

119 
	$rbuf_wrôe_thªad
(*
buf
) {

121 
r_buf_t
 *
buf„r
 = (r_buf_à*)
buf
;

122 
uöt32_t
 
n
, 
w_size
;

123 *
ã°_d©a
 = "WritingÅest data in w-thread";

124 
w_size
 = 
	`°æí
(
ã°_d©a
);

126 
	`muãx_lock
();

127 
n
 = 
	`rbuf_wrôe
(
buf„r
, (
uöt8_t
 *)
ã°_d©a
, 
w_size
);

128 
	`muãx_u∆ock
();

129 
	`¥ötf
("WRITE_T: Wrôã¿ d©®size: %d\n", 
n
);

130 
	`¥ötf
("WRITE_T: Wrôe-cou¡î: %d\n", 
w_cou¡
);

131 
	`¥ötf
("WRITE_T:Ñw-cou¡î: %d\n", 
rw_cou¡
);

132 
	`¥ötf
("WRITE_T: Wrôe-hód: %lu \n", 
buf„r
->
w_hód
);

133  
NULL
;

135 
	}
}

137 
	$rbuf_ªad_thªad
(*
buf
) {

139 
r_buf_t
 *
buf„r
 = (r_buf_à*)
buf
;

140 
uöt8_t
 
d©a
[1024] = {0};

141 
uöt32_t
 
n
, 
r_size
=29;

143 
	`muãx_lock
();

144 
n
 = 
	`rbuf_ªad
(
buf„r
, 
r_size
, 
d©a
);

145 
	`muãx_u∆ock
();

146 
	`¥ötf
("\nREAD_T: Ród d©®size: %dánd d©®:%s\n", 
n
, 
d©a
);

147 
	`¥ötf
("READ_T: Ród-cou¡î: %d \n", 
r_cou¡
);

148 
	`¥ötf
("READ_T:Ñw-cou¡î: %d\n", 
rw_cou¡
);

149 
	`¥ötf
("READ_T: Ród-hód: %lu \n", 
buf„r
->
r_hód
);

150  
NULL
;

151 
	}
}

154 
	$maö
() {

156 
±hªad_t
 
w_thªad_id
, 
r_thªad_id
;

157 
r_buf_t
 
buf„r
 = {0};

158 
uöt32_t
 
ch
;

159 
	`rbuf_öô
(&
buf„r
, 
BUF_SIZE
);

162 
	`¥ötf
("\nEnter 1 if you wantÅo write dataágain:\n");

163 
	`sˇnf
("%d", &
ch
);

165 
	`±hªad_¸óã
(&
w_thªad_id
, 
NULL
, 
rbuf_wrôe_thªad
, (*)&
buf„r
);

166 
	`±hªad_¸óã
(&
r_thªad_id
, 
NULL
, 
rbuf_ªad_thªad
, (*)&
buf„r
);

167 
	`±hªad_joö
(
w_thªad_id
, 
NULL
);

168 
	`±hªad_joö
(
r_thªad_id
, 
NULL
);

169 
ch
 = 1;

170 
	`¶ìp
(1);

171 } 
ch
);

173 
	}
}

	@rotate_array.c

1 
	~"°dio.h
"

5 
	$bö¨y_£¨ch
(*
a
, 
low
, 
high
, 
èrgë
){

7 
mid
;

8 
low
 <
high
){

10 
mid
 = (
low
+
high
)/2;

11 if(
èrgë
 =
a
[
mid
])

12  
mid
;

13 if(
èrgë
 < 
a
[
mid
])

14 
high
 = 
mid
-1;

16 
low
 = 
mid
+1;

19 
	}
}

22 
	$föd_rŸ©ed_pos
(*
a
, 
low
, 
high
){

23 
mid
;

24 if(
high
 < 1)

26 
low
 <
high
){

27 
mid
 = (
low
+
high
)/2;

28 i‡(
a
[
mid
] >á[mid+1])

29  
mid
;

30 if(
a
[
mid
] >á[
low
])

31 
low
 = 
mid
+1;

33 
high
 = 
mid
;

36 
	}
}

39 
	$föd
(*
a
, 
n
, 
èrgë
){

41 
pos
, 
idx
, 
ªs
;

42 
pos
 = 
	`föd_rŸ©ed_pos
(
a
, 0, 
n
);

43 if(
pos
 < 0)

45 
ªs
 = 
	`bö¨y_£¨ch
(
a
, 0, 
pos
, 
èrgë
);

46 if(
ªs
 < 0)

47  
	`bö¨y_£¨ch
(
a
, 
pos
, 
n
, 
èrgë
);

48  
ªs
;

49 
	}
}

51 
	$maö
() {

53 
¨r
[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11};

54 
n
, 
j
, 
i
, 
k
, 
tmp1
, 
tmp2
, 
idx
, 
size
, 
èrgë
;

55 
k
 = 5;

56 
j
 = 0;

57 
size
 = (
¨r
)/();

59 
	`¥ötf
("\nGivenárray is:\n");

60 
i
 = 0;i<
size
;i++)

61 
	`¥ötf
("%d ", 
¨r
[
i
]);

62 
tmp1
 = 
¨r
[
j
];

63 
i
 = 0;ò< 
size
; i++) {

64 
idx
 = (
j
+
k
)%
size
;

65 
tmp2
 = 
¨r
[
idx
];

66 
¨r
[
idx
] = 
tmp1
;

67 
tmp1
 = 
tmp2
;

68 
j

idx
;

70 
	`¥ötf
("\nResultárray is:\n");

71 
i
 = 0;i<
size
;i++)

72 
	`¥ötf
("%d ", 
¨r
[
i
]);

73 
	`¥ötf
("\nEnterÅheÉlementÅo be searched:\n");

74 
	`sˇnf
("%d", &
èrgë
);

75 
	`¥ötf
("\nEÀmíàfoundáàödex: %d", 
	`föd
(
¨r
, 
size
-1, 
èrgë
));

76 
	`¥ötf
("\n");

77 
	}
}

	@second_max.c

1 
	~"°dio.h
"

2 
	~"limôs.h
"

4 
	$maö
(){

6 
¨r
[] = {100, 2, 6, 4, 82, 67, 99, 98, 101};

7 
n
, 
i
, 
max
, 
max2
;

8 
n
 = (
¨r
)/();

10 
	`¥ötf
("\nArrayÉlementsáre:\n");

11 
i
=0;i<
n
;i++)

12 
	`¥ötf
("%d ", 
¨r
[
i
]);

14 
	`¥ötf
("\n");

16 
max
 = 
¨r
[0];

17 
max2
 = 
INT_MIN
;

18 
i
=1;i<
n
;i++){

19 if(
¨r
[
i
] > 
max
){

20 
max2
 = 
max
;

21 
max
 = 
¨r
[
i
];

23 if(
¨r
[
i
] > 
max2
 &&áº[i] < 
max
){

24 
max2
 = 
¨r
[
i
];

28 
	`¥ötf
("\nMaximumÉÀmíàis:%d 2nd maximum is:%d\n", 
max
, 
max2
);

30 
	}
}

	@segment_tree.c

1 
	~"°dio.h
"

2 
	~"°dlib.h
"

4 
	#MAX_SEG_TREE
 0

	)

5 
	#MIN_SEG_TREE
 1

	)

7 
	#COUNT
 2

	)

9 
	s£gTªe_
 {

10 *
	m¨r
;

11 
	mcou¡
;

12 
	mˇ∑côy
;

13 
	mœ°_ödex
;

14 
	mty≥
;

15 } 
	t£gTªe
;

18 
£gTªe
* 
	$¸óã_£gTªe
(
ˇ∑côy
, 
ty≥
) {

20 
£gTªe
 *
h
 = (£gTªê*Ë
	`mÆloc
((segTree));

22 
h
->
ˇ∑côy
 = capacity;

23 
h
->
cou¡
 = 0;

24 
h
->
ty≥
 =Åype;

25 
h
->
¨r
 = (*Ë
	`ˇŒoc
(
ˇ∑côy
, ());

27  
h
;

28 
	}
}

30 
	$∑ª¡
(
£gTªe
 *
h
, 
i
) {

32 i‡((
i
<0Ë|| i>
h
->
cou¡
){

36  (
i
-1)/2;

37 
	}
}

39 
	$À·_chûd
(
£gTªe
 *
h
, 
i
) {

41 
l
 = 2*
i
+1;

42 i‡((
i
<0Ë|| i>
h
->
cou¡
){

45 if(
l
 >
h
->
cou¡
) {

49  
l
;

50 
	}
}

52 
	$right_chûd
(
£gTªe
 *
h
, 
i
) {

54 
r
 = 2*
i
+2;

55 i‡((
i
<0Ë|| i>
h
->
cou¡
){

58 if(
r
 >
h
->
cou¡
) {

62  
r
;

63 
	}
}

65 
	$gë_max
(
£gTªe
 *
h
) {

67 if(0 <
h
->
cou¡
) {

71  
h
->
¨r
[0];

73 
	}
}

75 
	$£gTªeify
(
£gTªe
 *
h
, 
i
) {

77 
max
, 
tmp
;

78 
l
 = 
	`À·_chûd
(
h
, 
i
);

79 
r
 = 
	`right_chûd
(
h
, 
i
);

81 if–
l
 < 0 && 
r
 < 0)

84 
max
 = 
i
;

86 if–
l
 >0 && 
h
->
¨r
[
i
] < h->arr[l])

87 
max
 = 
l
;

88 i‡(
r
 >0 && 
h
->
¨r
[r] > h->¨r[
max
])

89 
max
 = 
r
;

91 i‡(
i
 !
max
) {

92 
tmp
 = 
h
->
¨r
[
i
];

93 
h
->
¨r
[
i
] = h->¨r[
max
];

94 
h
->
¨r
[
max
] = 
tmp
;

99 
	`£gTªeify
(
h
, 
max
);

100 
	}
}

103 
	$ö£π
(
£gTªe
 *
h
, 
d©a
) {

105 
i
, 
tmp
;

107 if(
h
->
ˇ∑côy
 =h->
cou¡
) {

108 
	`¥ötf
("\nsegTree full\n");

111 if(
h
->
cou¡
 == 0){

112 
h
->
œ°_ödex
 = ((h->
ˇ∑côy
-1)/2)+1;

115 
h
->
cou¡
++;

116 
i
 = 
h
->
œ°_ödex
;

118 
i
 > 0) {

119 
h
->
¨r
[(
i
-1)/2] +
d©a
;

120 
i
 = (i-1)/2;

123 
h
->
¨r
[
i
] +
d©a
;

124 
h
->
œ°_ödex
++;

126 
	}
}

128 
	$dñëe
(
£gTªe
 *
h
) {

130 
d©a
;

131 if(
h
->
cou¡
 <= 0) {

132 
	`¥ötf
("\nEmpty segTree\n");

136 
d©a
 = 
h
->
¨r
[0];

138 
h
->
¨r
[0] = h->¨r[h->
cou¡
-1];

139 
h
->
¨r
[h->
cou¡
-1] = 0;

140 
h
->
cou¡
--;

141 
	`£gTªeify
(
h
, 0);

142 
	}
}

144 
	$¥öt
(
£gTªe
 *
h
) {

146 
i
;

148 if(
h
->
cou¡
 <= 0) {

149 
	`¥ötf
("\nEmpty segTree\n");

153 
i
0; i< 
h
->
cou¡
; i++) {

154 
	`¥ötf
(" %d", 
h
->
¨r
[
i
]);

156 
	`¥ötf
("\n");

159 
	}
}

162 
	$¥öt2DUtû
(
£gTªe
 *
h
, 
idx
, 
•a˚
)

164 
right
, 
À·
;

166 i‡(
idx
 >
h
->
cou¡
)

170 
•a˚
 +
COUNT
;

172 
right
 = 
	`right_chûd
(
h
, 
idx
);

173 i‡(
right
 < 0)

177 
	`¥öt2DUtû
(
h
, 
right
, 
•a˚
);

181 
	`¥ötf
("\n");

182 
i
 = 
COUNT
; i < 
•a˚
; i++)

183 
	`¥ötf
(" ");

184 
	`¥ötf
("%d\n", 
h
->
¨r
[
idx
]);

186 
À·
 = 
	`À·_chûd
(
h
, 
idx
);

187 i‡(
À·
 < 0)

190 
	`¥öt2DUtû
(
h
, 
À·
, 
•a˚
);

191 
	}
}

194 
	$¥öt_£gTªe
(
£gTªe
 *
h
) {

195 
	`¥öt2DUtû
(
h
, 0, 0);

196 
	}
}

199 
	$dñëe_ödex
(
£gTªe
 *
h
, 
idx
) {

200 
key
;

201 if(
idx
 > 
h
->
cou¡
 && idx < 0){

202 
	`¥ötf
("\nIncorrect index\n");

205 
key
 = 
h
->
¨r
[
idx
];

206 
h
->
¨r
[
idx
] = h->¨r[h->
cou¡
-1];

207 
h
->
cou¡
--;

208 
	`£gTªeify
(
h
, 
idx
);

209  
key
;

210 
	}
}

213 
	$¥öt_vÆ_gª©î
(
£gTªe
 *
h
, 
idx
, 
d©a
){

215 
À·
, 
right
;

216 if(
idx
 >
h
->
cou¡
){

220 i‡(
h
->
¨r
[
idx
] < 
d©a
){

223 
	`¥ötf
(" %d", 
h
->
¨r
[
idx
]);

224 
À·
 = 
	`À·_chûd
(
h
, 
idx
);

225 i‡(
À·
 >= 0)

226 
	`¥öt_vÆ_gª©î
(
h
, 
À·
, 
d©a
);

227 
right
 = 
	`right_chûd
(
h
, 
idx
);

228 i‡(
right
 >= 0)

229 
	`¥öt_vÆ_gª©î
(
h
, 
right
, 
d©a
);

231 
	}
}

234 
	$maö
() {

236 
a
[100];

237 
i
, 
idx
, 
d©a
;

238 
n
;

239 
	`¥ötf
("\nEnterÅhe size ofÅheárray:");

240 
	`sˇnf
("%d",&
n
);

241 
	`¥ötf
("\nE¡î %dÉÀmíts:\n", 
n
);

242 
i
 =0;i< 
n
; i++)

243 
	`sˇnf
("%d", &
a
[
i
]);

244 
	`¥ötf
("\nCreated segTree forÅhe same is:\n");

246 
£gTªe
 *
h
 = 
	`¸óã_£gTªe
((2*
n
-1), 
MAX_SEG_TREE
);

248 
i
=0; i<
n
;i++) {

249 
	`ö£π
(
h
, 
a
[
i
]);

252 
	`¥öt
(
h
);

253 
	`¥ötf
("\n++++++++++++++++++++++++++++++++++++++++\n");

254 
	`¥öt_£gTªe
(
h
);

255 
	`¥ötf
("\n++++++++++++++++++++++++++++++++++++++++\n");

256 
	`¥ötf
("\nDelete Max\n");

257 
	`dñëe
(
h
);

258 
	`¥öt
(
h
);

259 
	`¥ötf
("\nEnterÅhe index ofÅheÉlementÅo be deleted:");

260 
	`sˇnf
("%d",&
idx
);

261 
	`¥ötf
("\nDñëedÉÀmíà© index: %d\n", 
	`dñëe_ödex
(
h
, 
idx
));

262 
	`¥öt
(
h
);

263 
	`¥ötf
("\nEnterÅhe value for whichÅhe greaterÉlements should be searched for:");

264 
	`sˇnf
("%d",&
d©a
);

265 
	`¥öt_vÆ_gª©î
(
h
, 0, 
d©a
);

267 
	}
}

	@shared_mem.c

1 
	~"°dio.h
"

2 
	~"°dlib.h
"

3 
	~"sys/shm.c
"

4 
	~"sys/ùc.c
"

6 
	$maö
(
¨gc
, **
¨gv
){

8 
shmid
, 
ªtCode
;

9 *
buff
;

10 
key_t
 
key
;

11 
key
 = 
	`·ok
("shmfile", 65);

12 
shmid
 = 
	`shmgë
(
key
, 4096, 0666|
IPC_CREAT
);

13 
buff
 = (*Ë
	`shm©
(
shmid
, (*)0, 0);

14 
	`¢¥ötf
(
buff
, "Dummy dataÅrasfer forÅesting\n");

15 
	`¥ötf
("\nD©®öÅhêbuf„∏i†:%s", 
buff
);

17 
	`shmdt
(
buff
);

19 
	}
}

	@simple_fsm.c

1 
	~"°dio.h
"

2 
	~"°dlib.h
"

3 
	~"uni°d.h
"

5 
	efsm_°©e_
 {

6 
	mSTATE_A
 = 0,

7 
	mSTATE_B
,

8 
	mSTATE_C


9 } 
	tfsm_°©e
;

11 
	ssim∂e_fsm_


14 (*
	mcur_°©e
)();

15 
fsm_°©e
 
	m°©e
;

18 } 
	tsim∂e_fsm
;

20 
	gvÆue
 = 0;

23 
	$fsm_°©e_a
() {

24 
	`¥ötf
("\nIn function fsm_state_A\n");

25 
vÆue
 = value+2;

26 
	`¶ìp
(1);

27 
	`¥ötf
("VÆuêi†%d\n", 
vÆue
);

28 
	}
}

31 
	$fsm_°©e_b
() {

32 
	`¥ötf
("\nIn function fsm_state_B\n");

33 
vÆue
 = value+3;

34 
	`¶ìp
(2);

35 
	`¥ötf
("VÆuêi†%d\n", 
vÆue
);

36 
	}
}

39 
	$fsm_°©e_c
() {

40 
	`¥ötf
("\nIn function fsm_state_C\n");

41 
vÆue
 = value+1;

42 
	`¶ìp
(3);

43 
	`¥ötf
("VÆuêi†%d\n", 
vÆue
);

44 
	}
}

46 
sim∂e_fsm
 
	gfsm
[3] = {

47 { &
fsm_°©e_a
 },

48 { &
fsm_°©e_b
 },

49 { &
fsm_°©e_c
 }

52 
	$maö
() {

53 
	`¥ötf
("\nFSM started:\n");

57 if(
vÆue
 % 3 == 0) {

58 (
fsm
[2].
cur_°©e
)();

59 } i‡(
vÆue
 % 2 == 0)

62 (
fsm
[1].
cur_°©e
)();

64 (
fsm
[0].
cur_°©e
)();

66 i‡(
vÆue
 > 10) {

70 
	`¥ötf
("\nFSMÉnded:\n");

72 
	}
}

	@stack.c

1 
	~"°dio.h
"

2 
	~"°dlib.h
"

3 
	~"°döt.h
"

4 
	~"°ack.h
"

5 
	~<öây≥s.h
>

7 
°ack_ªt


8 
	$°ack_push
(
node
 *
hód
, 
uöt8_t
 *
d©a
, 
uöt32_t
 
Àn
) {

10 
node
 
√w_node
 = (nodeË
	`mÆloc
((
Node
));

11 
√w_node
->
d©a
 = (
uöt8_t
 *)
	`mÆloc
(
Àn
*(uint8_t));

12 if(!
√w_node
->
d©a
){

13 
	`‰ì
(
√w_node
);

14  
STACK_ERROR
;

16 
	`mem˝y
(
√w_node
->
d©a
, d©a, 
Àn
);

17 i‡(*
hód
 =
NULL
) {

18 *
hód
 = 
√w_node
;

19  
STACK_SUCCESS
;

21 
√w_node
->
√xt
 = *
hód
;

22 *
hód
 = 
√w_node
;

23  
STACK_SUCCESS
;

24 
	}
}

27 
°ack_ªt


28 
	$°ack_p›
(
node
 *
hód
) {

30 
node
 
tmp
;

31 i‡(*
hód
 =
NULL
) {

32  
STACK_SUCCESS
;

34 
tmp
 = *
hód
;

35 *
hód
 = 
tmp
->
√xt
;

36 
	`‰ì
(
tmp
);

38  
STACK_SUCCESS
;

39 
	}
}

42 
	$°ack_¥öt
 (
node
 
hód
) {

43 
node
 
tmp
 = 
hód
;

45 
tmp
) {

46 
	`¥ötf
("%f->", *(*)
tmp
->
d©a
);

47 
tmp
 =Åmp->
√xt
;

49 
	`¥ötf
("NULL\n");

51 
	}
}

54 
	$maö
() {

56 
node
 
HEAD
 = 
NULL
;

57 
uöt8_t
 
ch
;

58 
d©a
[100];

59 
uöt32_t
 
n
;

60 
	`¥ötf
("\nEnter 1ÅoáddÇodeÅoÅreeánd 0ÅoÉxit:\n");

61 
	`sˇnf
("%" 
SCNu8
 "", &
ch
);

62 if(
ch
) {

63 
	`¥ötf
("\nEnter data size:\n");

64 
	`sˇnf
("%" 
SCNu32
 "", &
n
);

65 
i
 = 0; i< 
n
; i++) {

67 
	`sˇnf
("%f", &
d©a
[
i
]);

68 
	`°ack_push
(&
HEAD
, (
uöt8_t
 *)&
d©a
[
i
], (data[i]));

71 
	`°ack_¥öt
(
HEAD
);

72 
	`°ack_p›
(&
HEAD
);

73 
	`°ack_¥öt
(
HEAD
);

75 
	}
}

	@stack.h

1 
	~"°dio.h
"

2 
	~"°döt.h
"

3 
	~"°dlib.h
"

4 
	~<öây≥s.h
>

6 
	e°ack_ªt_
 {

7 
	mSTACK_SUCCESS
 = 0,

8 
	mSTACK_ERROR


9 } 
	t°ack_ªt
;

11 
	sNode_
 {

12 
uöt8_t
 *
	md©a
;

13 
Node_
 *
	m√xt
;

14 } 
	tNode
;

16 
Node
 * 
	tnode
;

18 
°ack_ªt


19 
°ack_push
(
node
 *
hód
, 
uöt8_t
 *
d©a
, 
uöt32_t
 
Àn
);

21 
°ack_ªt


22 
°ack_p›
(
node
 *
hód
);

	@stack_test.c

1 
	~"°dio.h
"

3 
	gi
 = 0;

5 
	$ã°_ªc
(*
cou¡
){

6 
¨r
[8000] = {0};

7 
	`¥ötf
("\nCou¡ : %d", ++*
cou¡
);

8  
	`ã°_ªc
(
cou¡
);

10 
	}
}

12 
	$maö
(){

13 
c
 = 0;

14 
	`ã°_ªc
(&
c
);

16 
	}
}

	@struct.c

1 
	~"°d
"

	@ternery.c

1 
	~"°dio.h
"

2 
	~"°dlib.h
"

3 
	~"°rög.h
"

5 
	$maö
(){

7 *
°r1
 = "aa";

8 *
°r2
 = "aa";

9 *
°r3
 = "aab";

11 !
	`°rcmp
(
°r1
, så1)?
	`¥ötf
("\nSåög†¨êßme:%s\n", så1):¥ötf("\nSåög†¨êunique:%†& %s\n", så1, 
°r2
);

12 !
	`°rcmp
(
°r1
, 
°r3
)?
	`¥ötf
("\nStringsáre same:%s\n", str1):printf("\nStringsáre unique:%s & %s\n", str1, str3);

16 
	}
}

	@test_timer.c

1 
	~"ã°_timî.h
"

3 
uöt32_t
 
	gq_ödex
 = 0;

5 
uöt32_t


6 
	$timî_ˇŒback
(
time_t
 
exp
, 
uöt32_t
 
öãrvÆ
) {

8 
time_t
 
cur_time
;

9 
cur_time
 = 
	`time
(
NULL
);

10 if(
cur_time
 < 
exp
){

13 
	`¥ötf
(" %d",
öãrvÆ
);

16 
	`¥ötf
("Job id:%d, End Timê: %ld\n", 
öãrvÆ
, 
cur_time
);

18  
öãrvÆ
;

19 
	}
}

21 
 ode


22 
	$gë_√w_ ode
(
uöt32_t
 
öãrvÆ
, 
	$uöt32_t
 (*
timî_cb
)(
time_t
 
exp
, 
uöt32_t
 
time
)){

23 
time_t
 
expúy_time
;

24 
uöt32_t
 
öãrvÆ_cou¡
 = 0;

26 
öãrvÆ_cou¡
 = 
öãrvÆ
/
TIMER_QSIZE
;

27 
expúy_time
 = 
	`time
(
NULL
)+
öãrvÆ
;

28 
 ode
 
√w_ ode
 = ( odeË
	`ˇŒoc
(1, (
Li°Node
));

29 if(!
√w_ ode
){

30 
	`as£π
(0);

32 
√w_ ode
->
öãrvÆ
 = interval;

33 
√w_ ode
->
cou¡
 = 
öãrvÆ_cou¡
;

34 
√w_ ode
->
exp
 = 
expúy_time
;

35 
√w_ ode
->
timî_cb
 =Åimer_cb;

36 
√w_ ode
->
√xt
 = 
NULL
;

37 
	}
}

39 
qnode


40 
	$gë_√w_qnode
() {

41 
qnode
 
√w_qnode
 = (qnodeË
	`ˇŒoc
(1,(
Queuíode
));

42  
√w_qnode
;

43 
	}
}

46 
	$‰ì_ ode
(
 ode
 
hód
) {

47 
 ode
 
tmp
 = 
hód
, 
cur
=
NULL
;

48 
tmp
){

49 
cur
 = 
tmp
;

50 
tmp
 =Åmp->
√xt
;

51 
	`‰ì
(
cur
);

54 
	}
}

57 
	$‰ì_qnode
(
qnode
 
n
) {

58 
	`‰ì_ ode
(
n
->
node
);

59 
	`‰ì
(
n
);

61 
	}
}

64 
qnode


65 
	$timî_öô
() {

67 
qnode
 
HEAD
 = 
NULL
;;

68 
uöt32_t
 
i
;

70 
	`¥ötf
("\nInitializingÅimer\n");

71 
i
 = 0;i<
TIMER_QSIZE
;i++){

72 
HEAD
 = 
	`timî_node_ö£π
(HEAD);

74  
HEAD
;

75 
	}
}

77 
qnode


78 
	$timî_node_ö£π
(
qnode
 
hód
) {

80 
qnode
 
tmp
 = 
NULL
;

81 
qnode
 
√w_node
 = 
NULL
;

82 if(!
hód
){

83  
	`gë_√w_qnode
();

86 
√w_node
 = 
	`gë_√w_qnode
();

87 if(!
√w_node
)

88 
	`as£π
(0);

90 
tmp
 = 
hód
;

91 
tmp
 &&Åmp->
idx
 < 
q_ödex
){

92 
tmp
 =Åmp->
√xt
;

94 if(!
tmp
)

95 
	`as£π
(0);

97 
√w_node
->
√xt
 = 
tmp
->next;

98 
tmp
->
√xt
 = 
√w_node
;

99 
q_ödex
++;

100 
√w_node
->
idx
 = 
q_ödex
;

101  
hód
;

102 
	}
}

105 
	$timî_ö£π_job
 (
qnode
 
hód
, 
uöt32_t
 
öãrvÆ
) {

107 
qnode
 
tmp
 = 
NULL
;

108 
 ode
 
√w_ ode
 = 
NULL
, 
cur_ ode
 = NULL, 
¥ev_ ode
 = NULL;

109 
uöt32_t
 
cou¡
 = 0;

110 
uöt32_t
 
ödex
 = 0;

111 
uöt8_t
 
Êag
 = 0;

113 if(!
hód
)

114 
	`as£π
(0);

116 
ödex
 = 
öãrvÆ
%
TIMER_QSIZE
;

118 
tmp
 = 
hód
;

119 
tmp
){

120 if(
tmp
->
idx
 =
ödex
)

122 if(
cou¡
 > 
q_ödex
)

123 
	`as£π
(0);

124 
cou¡
++;

125 
tmp
 =Åmp->
√xt
;

128 
√w_ ode
 = 
	`gë_√w_ ode
(
öãrvÆ
, 
timî_ˇŒback
);

129 if(!
tmp
->
node
){

130 
tmp
->
node
 = 
√w_ ode
;

133 
cur_ ode
 = 
tmp
->
node
;

134 
¥ev_ ode
 = 
tmp
->
node
;

135 
cur_ ode
->
√xt
){

136 if(
cur_ ode
->
cou¡
 > 
√w_ ode
->count){

137 
¥ev_ ode
->
√xt
 = 
√w_ ode
;

138 
√w_ ode
->
√xt
 = 
cur_ ode
;

139 
Êag
 = 1;

142 
cur_ ode
 = cur_ ode->
√xt
;

144 if(!
Êag
){

145 
cur_ ode
->
√xt
 = 
√w_ ode
;

149 
	}
}

152 
	$timî_¥öt_job
(
 ode
 
hód
){

154 
 ode
 
tmp_ ode
 = 
hód
;

155 if(!
tmp_ ode
){

156 
	`¥ötf
("->NULL\n");

159 
tmp_ ode
){

160 
	`¥ötf
("->%d", 
tmp_ ode
->
öãrvÆ
);

161 
tmp_ ode
->
	`timî_cb
—mp_ ode->
exp
,Åmp_ ode->
öãrvÆ
);

162 
tmp_ ode
 =Åmp_ ode->
√xt
;

164 
	`¥ötf
("->NULL\n");

166 
	}
}

169 
	$timî_¥öt_timî
(
qnode
 
hód
){

170 
qnode
 
tmp_qnode
 = 
hód
;

171 
uöt32_t
 
cou¡
 = 0;

172 
time_t
 
mytime1
, 
mytime2
;

174 if(!
tmp_qnode
){

175 
	`¥ötf
("\nEmptyÅimer wheel\n");

178 
tmp_qnode
 && 
cou¡
 <
q_ödex
){

179 
mytime1
 = 
	`time
(
NULL
);

180 
	`¥ötf
("Sèπ Timê: %ld\n", 
mytime1
);

181 
	`¥ötf
("|%d|", 
tmp_qnode
->
idx
);

182 
	`timî_¥öt_job
(
tmp_qnode
->
node
);

183 
mytime2
 = 
	`time
(
NULL
);

184 
	`¥ötf
("End Timê: %ld\n", 
mytime2
);

185 
	`¥ötf
("+++++++++++++++++++\n");

186 
tmp_qnode
 =Åmp_qnode->
√xt
;

187 
cou¡
++;

189 
	}
}

192 
	$maö
() {

194 
qnode
 
HEAD
 = 
NULL
;;

195 
uöt8_t
 
ch
;

196 
uöt32_t
 
öãrvÆ
;

197 
uöt32_t
 
idx
;

199 
	`¥ötf
("\nInitializingÅimer\n");

200 
HEAD
 = 
	`timî_öô
();

202 
	`¥ötf
("\nEnter 1Åoádd jobÅo queueánd 0ÅoÉxit:\n");

203 
	`sˇnf
("%" 
SCNu8
 "", &
ch
);

204 
ch
) {

205 
	`¥ötf
("\nEnter interval:\n");

206 
	`sˇnf
("%" 
SCNu32
 "", &
öãrvÆ
);

208 
idx
 = 
d©a
%
TIMER_QSIZE
;

209 
	`timî_ö£π_job
(
HEAD
, 
öãrvÆ
);

210 
	`¥ötf
("\nEnter 1Åoádd qnodeÅo queueánd 0ÅoÉxit:\n");

211 
	`sˇnf
("%" 
SCNu8
 "", &
ch
);

214 
	`¥ötf
("\nEnter 1Åo del qnode from queueánd 0ÅoÉxit:\n");

215 
	`sˇnf
("%" 
SCNu8
 "", &
ch
);

216 
ch
) {

217 
HEAD
 = 
	`dequeue
(HEAD);

218 
	`¥öt_queue
(
HEAD
);

219 
	`¥ötf
("\nEnter 1Åo del qnode from queueánd 0ÅoÉxit:\n");

220 
	`sˇnf
("%" 
SCNu8
 "", &
ch
);

224 
	`¥ötf
("\nCurrent status ofÅheÅimer is:\n");

225 
	`timî_¥öt_timî
(
HEAD
);

227 
	}
}

	@test_timer.h

1 
	~"°dio.h
"

2 
	~"time.h
"

3 
	~"°döt.h
"

4 
	~"°dlib.h
"

5 
	~<öây≥s.h
>

6 
	~"as£π.h
"

7 
	~"°rög.h
"

8 
	~"uni°d.h
"

10 
	#TIMER_QSIZE
 10

	)

12 
	sLi°Node
 {

13 
uöt32_t
 
	möãrvÆ
;

14 
uöt32_t
 
	mcou¡
;

15 
time_t
 
	mexp
;

16 
uöt32_t
 (*
timî_cb
)(
time_t
 
	mexp
, uöt32_à
	mtime
);

17 
Li°Node
 *
	m√xt
;

20 
Li°Node
 * 
	t ode
;

22 
	sQueuíode
 {

23 
uöt32_t
 
	midx
;

24 
uöt32_t
 
	mcou¡
;

25 
 ode
 
	mnode
;

26 
Queuíode
 *
	m√xt
;

28 
Queuíode
 * 
	tqnode
;

29 
qnode
 
gë_√w_qnode
();

30 
‰ì_qnode
(
qnode
 
n
);

32 
qnode
 
timî_öô
();

34 
qnode
 
timî_node_ö£π
(qnodê
hód
);

	@threads.c

1 
	~"°dio.h
"

	@tree.c

1 
	~"åì.h
"

3 
	$maö
() {

5 
node
 
HEAD
 = 
NULL
, 
ñemít
 = NULL;

6 
uöt8_t
 
ch
;

7 
uöt8_t
 
åì_ty≥
 = 
TREE_BST
;

8 
uöt32_t
 
d©a
[100], 
n
, 
ªtVÆ
;

9 
uöt32_t
 
a
, 
b
, 
diff
;

10 
	`¥ötf
("\nEnterÅreeÅype: \n");

11 
	`¥ötf
(" BST: 0\n");

12 
	`¥ötf
(" AVL: 1\n");

13 
	`¥ötf
(" BAL: 2\n");

14 
	`¥ötf
(" RADIX: 3\n");

15 
	`sˇnf
("%" 
SCNu8
 "", &
åì_ty≥
);

16 if(
åì_ty≥
 >
TREE_MAX
 ){

17 
	`¥ötf
("\n WrongÅreeÅype");

20 
	`¥ötf
("\nEnter 1ÅoáddÇodeÅoÅreeánd 0ÅoÉxit:\n");

21 
	`sˇnf
("%" 
SCNu8
 "", &
ch
);

22 
ch
) {

23 
	`¥ötf
("\nEnter data size:\n");

24 
	`sˇnf
("%" 
SCNu32
 "", &
n
);

25 
i
 = 0; i< 
n
; i++) {

26 
	`sˇnf
("%" 
SCNu32
 "", &
d©a
[
i
]);

27 
	`ö£π_node
(&
HEAD
, 
d©a
[
i
], 
åì_ty≥
);

29 
	`¥ötf
("\nEnter 1ÅoáddÇodeÅoÅreeánd 0ÅoÉxit:\n");

30 
	`sˇnf
("%" 
SCNu8
 "", &
ch
);

32 
	`¥ötf
("\n++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n");

33 
	`¥öt_åì
(
HEAD
);

34 
	`¥ötf
("\nTree inorderÅraversal:\n");

35 
	`ö‹dî
(
HEAD
);

36 
	`¥ötf
("\n++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n");

37 
	`¥ötf
("\nTªêheight: %d\n", 
	`åì_height
(
HEAD
));

38 
	`¥ötf
("\n++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n");

39 
	`¥ötf
("\nEnter 1Åo deleteÇodeÅoÅreeánd 0ÅoÉxit:\n");

40 
	`sˇnf
("%" 
SCNu8
 "", &
ch
);

41 
ch
) {

42 
	`¥ötf
("\nEnter data:\n");

43 
	`sˇnf
("%" 
SCNu32
 "", &
n
);

44 
	`dñëe_node
(
HEAD
, 
n
, 
TREE_BST
);

45 
	`¥ötf
("\nEnter 1Åo deleteÇodeÅoÅreeánd 0ÅoÉxit:\n");

46 
	`sˇnf
("%" 
SCNu8
 "", &
ch
);

48 
	`¥ötf
("\n++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n");

49 
	`¥öt_åì
(
HEAD
);

50 
	`¥ötf
("\n++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n");

51 if(
åì_ty≥
 =
TREE_AVL
) {

52 
	`¥ötf
("\nEnter 1Åo check is AVLÅree 0ÅoÉxit:\n");

53 
	`sˇnf
("%" 
SCNu8
 "", &
ch
);

54 i‡(
ch
) {

55 
ªtVÆ
 = 
	`avl_isAVL
(
HEAD
);

56 if(
ªtVÆ
 > 0) {

57 
	`¥ötf
("\nEntered Tree is AVL");

59 
	`¥ötf
("\nEntered Tree is NOT AVL");

62 
	`¥ötf
("\nEnter 1Åo check isÇumber ofÇodes inÑange 0ÅoÉxit:\n");

63 
	`sˇnf
("%" 
SCNu8
 "", &
ch
);

64 i‡(
ch
) {

65 
	`¥ötf
("\nEnteráánd b:\n");

66 
	`sˇnf
("%" 
SCNu32
 "%" SCNu32 "", &
a
, &
b
);

67 
ªtVÆ
 = 
	`avl_cou¡_nodes_ö_ønge
(
HEAD
, 
a
, 
b
);

68 if(
ªtVÆ
 > 0) {

69 
	`¥ötf
("\nNumbî o‡node†öÑ™gêi†:%d", 
ªtVÆ
);

71 
	`¥ötf
("\nNoÇodes found withinÅheÑange");

74 
	`¥ötf
("\nEnter 1Åo check is closestÇodeÅo find; 0ÅoÉxit:\n");

75 
	`sˇnf
("%" 
SCNu8
 "", &
ch
);

76 i‡(
ch
) {

77 
	`¥ötf
("\nEnterá :\n");

78 
	`sˇnf
("%" 
SCNu32
 "", &
a
);

79 
ñemít
 = 
	`avl_föd_˛o£_key
(
HEAD
, 
a
);

80 if(!
ñemít
) {

81 
	`¥ötf
("\nClo£°Çodêi†:%d", 
ñemít
->
d©a
);

83 
	`¥ötf
("\nNoÇodes found withinÅheÑange");

86 
	`¥ötf
("\nMedian value inÅhe AVLÅree:");

87 
	`¥ötf
(":%lf\n", 
	`avl_medün
(
HEAD
));

90 
	`¥ötf
("\n++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n");

91 if(
	`is_vÆid_b°
(
HEAD
)) {

92 
	`¥ötf
("\nEntered Tree isá BST\n");

94 
	`¥ötf
("\nEntered Tree isÇotá BST\n");

96 
	`¥ötf
("\n++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n");

97 
	`¥ötf
("\nTree inorderÅraversal:\n");

98 
	`ö‹dî
(
HEAD
);

99 
	`¥ötf
("\n++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n");

100 
	`¥ötf
("\n++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n");

101 
	`¥ötf
("\nLó‡cou¡: %d\n", 
	`Àaf_cou¡
(
HEAD
));

102 
	`¥ötf
("\n++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n");

103 
	`¥ötf
("\nTªêheight: %d\n", 
	`åì_height
(
HEAD
));

104 
	`¥ötf
("\n++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n");

108 
	`¥ötf
("\nTªêheight: %d\n", 
	`åì_height
(
HEAD
));

109 
	`¥ötf
("\n++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n");

110 
	`¥ötf
("\n++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n");

111 
	`¥ötf
("\nTªêMaxÖ©h sum: %d\n", 
	`max_∑th_sum
(
HEAD
));

112 
	`¥ötf
("\n++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n");

115 
	}
}

	@tree.h

1 #i‚de‡
_INCLUDE_H_


2 
	#_INCLUDE_H_


	)

4 
	~"°dio.h
"

5 
	~"°döt.h
"

6 
	~"°dlib.h
"

7 
	~<limôs.h
>

8 
	~<öây≥s.h
>

9 
	~"°dboﬁ.h
"

10 
	~"b_åì.h
"

11 
	~"avl_åì.h
"

	@trie.c

1 
	~"°dio.h
"

2 
	~"°dlib.h
"

3 
	~<öây≥s.h
>

4 
	~<°dboﬁ.h
>

5 
	~<°rög.h
>

7 
	snode_
 {

8 
	mch
;

9 
node_
 *
	m√xt
[26];

10 
boﬁ
 
	mídOfW‹d
;

11 } 
	tnode_t
;

13 
node_t
 * 
	tnode
;

15 
node


16 
	$åõ_gë_node
() {

17 
node
 
√w
 = (nodeË
	`mÆloc
((
node_t
));

18  
√w
;

19 
	}
}

23 
	$åõ_ö£π
(
node
 *
roŸ
, *
°r
) {

25 
node
 
tmp
 = 
NULL
;

26 
node
 
√w
 = 
NULL
;

27 if(
NULL
 =*
roŸ
 && NULL =
tmp
) {

28 
√w
 = 
	`åõ_gë_node
();

29 *
roŸ
 = 
√w
;

32 
tmp
 = *
roŸ
;

34 
ch
;

35 
i
 = 0;

36 
idx
 = 0;

37 
Àn
 = 
	`°æí
(
°r
);

38 
i
 = 0; i< 
Àn
; i++) {

39 
ch
 = 
°r
[
i
];

40 
idx
 = 0;

41 
√w
 = 
	`åõ_gë_node
();

42 
√w
->
ch
 = ch;

44 if(
i
 =
Àn
-1)

45 
√w
->
ídOfW‹d
 = 
åue
;

48 
idx
 = 
ch
-'a';

49 
tmp
->
√xt
[
idx
] = 
√w
;

50 
tmp
 = 
√w
;

52 
	}
}

55 
	$åõ_£¨ch
(
node
 
roŸ
, *
°r
) {

57 
node
 
tmp
 = 
NULL
;

58 if(
NULL
 =
roŸ
) {

62 
tmp
 = 
roŸ
;

64 
ch
;

65 
i
 = 0;

66 
idx
 = 0;

67 
Àn
 = 
	`°æí
(
°r
);

68 
i
 = 0; i< 
Àn
; i++) {

69 
ch
 = 
°r
[
i
];

70 
idx
 = 0;

73 
idx
 = 
ch
-'a';

74 if(
NULL
 =
tmp
->
√xt
[
idx
]) {

77 
tmp
 =Åmp->
√xt
[
idx
];

80 
	}
}

82 
	$maö
() {

83 
node
 
HEAD
 = 
NULL
;

84 
ªs
;

85 
uöt8_t
 
ch
;

86 
d©a
[100], 
n
;

87 
	`¥ötf
("\nEnter 1ÅoáddÇodeÅoÅreeánd 0ÅoÉxit:\n");

88 
	`sˇnf
("%" 
SCNu8
 "", &
ch
);

89 
ch
) {

90 
	`¥ötf
("\nEnterÅhe string:\n");

91 
	`sˇnf
("%s", 
d©a
);

92 
	`åõ_ö£π
(&
HEAD
, 
d©a
);

93 
	`¥ötf
("\nEnter 1ÅoáddÇodeÅoÅreeánd 0ÅoÉxit:\n");

94 
	`sˇnf
("%" 
SCNu8
 "", &
ch
);

97 
	`¥ötf
("\nEnterÅhe string:\n");

98 
	`sˇnf
("%s", 
d©a
);

99 
ªs
 = 
	`åõ_£¨ch
(
HEAD
, 
d©a
);

101 if(
ªs
){

102 
	`¥ötf
("\nString found\n");

104 
	`¥ötf
("\nStringÇot found\n");

107 
	}
}

	@typecast.c

1 
	~"°dio.h
"

3 
	$maö
() {

5 
a
 = 110;

6 
c
 = 0.2*
a
;

7 
	`¥ötf
("ªsu…=%d\n", 
c
);

11 
	}
}

	@unary.c

1 
	~"°dio.h
"

3 
	$maö
(){

5 
a
 = 10;

6 
A
 = 10;

7 
B
 = 0;

8 
F
 = 0.00;

9 
D
 = 100;

10 
a1
 = 0;

11 
	`¥ötf
("\nSizêo‡sh‹t=%ld,Ü⁄g=%ld i¡=%ld flﬂt=%ldÜ⁄gÜ⁄g i¡=%ld\n",(
a
), (
A
), (
B
), (
F
), (
D
));

12 
	`¥ötf
("\«=%d\n",
a
);

13 
	`¥ötf
("\nA=%ld\n",
A
);

14 
b
 = ++
a
+a+++a+++a++;

16 
	`¥ötf
("a=%d, b=%d\n",
a
,
b
);

17 
A
++;

18 
B
+=
A
;

19 
A
++;

20 
B
+=
A
;

21 
A
++;

22 
B
+=
A
;

24 
B
+=++
A
;

25 
	`¥ötf
("A=%ld, B=%d",
A
,
B
);

27 
a1
 = 
B
 + (
A
<100);

28 
	`¥ötf
("\n%d\n",
a1
);

30 
	}
}

	@unix_socket.c

1 
	~"°dio.h
"

2 
	~"°dlib.h
"

3 
	~"°rög.h
"

4 
	~"î∫o.h
"

5 
	~"uni°d.h
"

6 
	~"sys/ty≥s.h
"

7 
	~"sys/sockë.h
"

8 
	~"sys/waô.h
"

11 
	$maö
(){

13 
sv
[2], 
Àn1
,
Àn2
, 
cou¡î1
=0,
cou¡î2
=0;

14 
buff
[100] = {0};

15 *
d©a1
 = "This isÅest dataÅo be sent(PARENT)";

16 *
d©a2
 = "This isÅest dataÅo be sent(CHILD)";

17 
Àn1
 = 
	`°æí
(
d©a1
)+1;

18 
Àn2
 = 
	`°æí
(
d©a2
)+1;

20 if(
	`sockë∑ú
(
AF_UNIX
, 
SOCK_STREAM
, 0, 
sv
) == -1){

22 
	`¥ötf
("\nFailedÅo create socket-pair");

23 
	`exô
(1);

25 if(!
	`f‹k
()){

28 
cou¡î2
++;

29 
	`ªad
(
sv
[1], 
buff
, 
Àn1
);

30 
	`¥ötf
("CHILD: d©®ªad from buf„∏is:\¿%s\n",
buff
);

31 
	`mem£t
(
buff
, 0, 
Àn1
);

32 
	`°∫˝y
(
buff
, 
d©a2
, 
Àn2
);

33 
	`wrôe
(
sv
[1], 
buff
, 
Àn2
);

34 
	`¥ötf
("CHILD: d©®wrôêtÿbuf„∏is:\¿%s\n",
buff
);

35 
	`¥ötf
("CHILD:Ñw-cou¡: %d\n\n",
cou¡î2
);

36 
	`¶ìp
(1);

41 
cou¡î1
++;

42 
	`mem£t
(
buff
, 0, 
Àn2
);

43 
	`°∫˝y
(
buff
, 
d©a1
, 
Àn1
);

44 
	`wrôe
(
sv
[0], 
buff
, 
Àn1
);

45 
	`¥ötf
("PARENT: d©®wrôêtÿbuf„∏is:\¿%s\n",
buff
);

46 
	`ªad
(
sv
[0], 
buff
, 
Àn2
);

47 
	`¥ötf
("PARENT: d©®ªad from buf„∏is:\¿%s\n",
buff
);

48 
	`¥ötf
("PARENT:Ñw-cou¡: %d\n\n",
cou¡î1
);

49 
	`waô
(
NULL
);

50 
	`¶ìp
(1);

53 
	}
}

	@url_cache_db/main.c

1 
	~"uæ_ö˛ude.h
"

3 
	$maö
(){

5 
i
, 
n
;

6 
u˘abÀ
 
èbÀ
 = 
NULL
;

7 
u˚¡ry
 
íåy
 = 
NULL
;

8 
uöt32_t
 
âl
, 
ª•⁄£_code
;

9 
uæ
[256] = {0};

10 
FILE
 *
Â
 = 
NULL
;

13 
	`¥ötf
("\nEnterÅhe hash-table size :");

14 
	`sˇnf
("%d", &
n
);

15 
èbÀ
 = 
	`uæ_ˇche_¸óã_èbÀ
(
n
, 
URL_CACHE_TBL_LIMIT
);

16 
	`¥ötf
("\nHashÅable contentsáre:\n");

17 
	`uæ_ˇche_¥öt_èbÀ
(
èbÀ
);

19 
	`¥ötf
("\nEnterÅheÇumber ofÉlementsÅo beáddedÅo hash-table :");

20 
	`sˇnf
("%d", &
n
);

21 
Â
 = 
	`f›í
("tc.txt", "r");

22 if(!
Â
){

23 
	`¥ötf
("\nFailedÅo open file:\n");

26 
	`¥ötf
("\nE¡î %dÉÀmíts(uæ,Åé,Ñe•⁄£_code):\n", 
n
);

27 
i
=0;i<
n
;i++){

28 
	`fsˇnf
(
Â
, "%†%d %d", 
uæ
, &
âl
, &
ª•⁄£_code
);

29 
íåy
 = 
	`uæ_ˇche_gë_√w_íåy
(
uæ
, 
âl
, 
ª•⁄£_code
);

30 
	`uæ_ˇche_ö£π_íåy
(
èbÀ
, 
íåy
, 
Ál£
);

32 
	`f˛o£
(
Â
);

33 
	`¥ötf
("\nHashÅable contentsáre:\n");

34 
	`uæ_ˇche_¥öt_èbÀ
(
èbÀ
);

35 
	`uæ_ˇche_dñëe_íåy_©_ödex
(
èbÀ
, 127, 
NULL
);

36 
	`uæ_ˇche_dñëe_íåy_©_ödex
(
èbÀ
, 230, 
NULL
);

37 
	`uæ_ˇche_dñëe_íåy_©_ödex
(
èbÀ
, 0, 
NULL
);

41 
	`uæ_ˇche_˛ónup
(
èbÀ
);

42 
	`uæ_ˇche_¥öt_èbÀ_°©s
(
èbÀ
);

43 
	`¶ìp
(1);

46 
	}
}

	@url_cache_db/url_cache.c

1 
	~"uæ_ö˛ude.h
"

3 
öt32_t
 
	glock
 = 1;

6 
	$uæ_ˇche_èbÀ_lock
() {

7 
lock
 == 0);

8 
lock
 -=1;

9 
	}
}

12 
	$uæ_ˇche_èbÀ_u∆ock
() {

13 
lock
 +=1;

14 
	}
}

17 
	$uæ_ˇche_decode_íåy
(
u˚¡ry
 
íåy
, *
decode
){

19 if(!
íåy
){

20 
	`•rötf
(
decode
, "NULL");

23 
	`•rötf
(
decode
, ":%d:", 
íåy
->
âl
);

24 
	`•rötf
(
decode
, "[:]");

26 
	}
}

28 
uöt32_t


29 
	$uæ_ˇche_hash
(
uöt8_t
 *
key
, 
uöt32_t
 
Àn
, uöt32_à
size
) {

31 
i
;

32 
uöt64_t
 
hash
 = 7;

33 
i
=0;i<
Àn
; i++){

34 
hash
 = hash*19+(
uöt64_t
)
key
[
i
];

36  
hash
%
size
;

37 
	}
}

40 
	$uæ_ˇche_gë_md5_dige°
(*
uæ
, 
uöt8_t
 *
buf„r
){

42 
uöt32_t
 
Àn
;

43 
MD5_CTX
 
˘x
;

44 
	`MD5_Inô
(&
˘x
);

45 
Àn
 = 
	`°æí
(
uæ
);

47 
Àn
 > 0) {

48 i‡(
Àn
 > 512) {

49 
	`MD5_Upd©e
(&
˘x
, 
uæ
, 512);

51 
	`MD5_Upd©e
(&
˘x
, 
uæ
, 
Àn
);

53 
Àn
 -= 512;

54 
uæ
 += 512;

57 
	`MD5_FöÆ
(
buf„r
, &
˘x
);

59 
	}
}

61 
öt32_t


62 
	$uæ_ˇche_com∑ª_íåy
(
u˚¡ry
 
e1
, u˚¡ry 
e2
){

64  
	`°rcmp
((*)
e1
->
uæ
, (*)
e2
->url);

65 
	}
}

67 
u˚¡ry


68 
	$uæ_ˇche_gë_√w_íåy
(*
uæ
, 
uöt32_t
 
âl
, uöt32_à
ª•⁄£_code
){

69 
u˚¡ry
 
íåy
 = 
NULL
;

70 
uöt32_t
 
Àn
;

71 
íåy
 = (
u˚¡ry
)
	`ˇŒoc
(1, (
uæ_ˇche_íåy_t
));

72 if(
NULL
 =
íåy
){

73  
NULL
;

75 
Àn
 = 
	`°æí
((*)
uæ
);

76 
íåy
->
uæ
 = (
uöt8_t
 *)
	`ˇŒoc
(
Àn
+1, (uint8_t));

77 
	`mem˝y
(
íåy
->
uæ
, uæ, 
Àn
);

78 
íåy
->
âl
 = 
	`time
(
NULL
)+ttl;

79 
íåy
->
ª•⁄£_code
 =Ñesponse_code;

81 
íåy
->
dige°
 = (
uöt8_t
 *)
	`ˇŒoc
(
URL_ENTRY_DIGEST_LEN
, (uint8_t));

82 
	`uæ_ˇche_gë_md5_dige°
(
uæ
, 
íåy
->
dige°
);

84  
íåy
;

85 
	}
}

88 
	$uæ_ˇche_‰ì_íåy
(
u˚¡ry
 
íåy
){

89 if(
NULL
 =
íåy
){

90  
NULL
;

93 
	`‰ì
(
íåy
->
uæ
);

94 
	`‰ì
(
íåy
->
dige°
);

95 
	`‰ì
(
íåy
);

96 
íåy
 = 
NULL
;

97  
NULL
;

98 
	}
}

100 
u˘abÀ


101 
	$uæ_ˇche_¸óã_èbÀ
(
uöt32_t
 
size
, uöt32_à
limô
) {

103 
u˘abÀ
 
èbÀ
 = 
NULL
;

104 
u˘node
 
äode
 = 
NULL
;

105 
uc_ve˘‹
 
gc_ve˘‹
 = 
NULL
;

106 
i
 = 0;

108 if(
size
 > 
limô
){

109 
	`¥ötf
("\nHash Table creation failed: Size is greaterÅhanÜimit\n");

110  
NULL
;

112 
èbÀ
 = (
u˘abÀ
Ë
	`ˇŒoc
(1, (
uæ_ˇche_èbÀ_t
));

113 i‡(!
èbÀ
) {

114 
	`¥ötf
("\nHash Table creation failed\n");

115  
NULL
;

117 
èbÀ
->
size
 = size;

118 
èbÀ
->
limô
 =Üimit;

119 
äode
 = (
u˘node
Ë
	`ˇŒoc
(
size
, (
uæ_ˇche_èbÀ_node_t
));

120 if(!
äode
) {

121 
	`¥ötf
("\nHash Table creation failed\n");

122 
	`‰ì
(
èbÀ
);

123  
NULL
;

125 
èbÀ
->èbÀ = 
äode
;

127 
i
=0;i<
size
;i++){

128 
äode
[
i
].
ödex
 = i;

129 
äode
[
i
].
cou¡
 = 0;

130 
äode
[
i
].
√xt
 = 
NULL
;

133 
gc_ve˘‹
 = (
uc_ve˘‹
Ë
	`ˇŒoc
(
size
, (
uæ_ˇche_timî_ve˘‹_t
));

134 if(!
gc_ve˘‹
) {

135 
	`¥ötf
("\nHash Table: GC vector creation failed\n");

137 
èbÀ
->
gc_ve˘‹
 = gc_vector;

138 
èbÀ
->
gc_œ°_ödex
 = 0;

139 
èbÀ
->
gc_˛ónup_cou¡
 = 0;

141  
èbÀ
;

142 
	}
}

144 
uæ_ˇche_ªt_code_t


145 
	$uæ_ˇche_ö£π_íåy
(
u˘abÀ
 
èbÀ
, 
u˚¡ry
 
íåy
, 
boﬁ
 
is_upd©e
) {

147 
öt32_t
 
ödex
;

148 
uöt32_t
 
key_Àn
;

149 
u˚¡ry
 
tmp
 = 
NULL
;

150 i‡(!
íåy
 || !
èbÀ
 || !table->table){

151 
	`¥ötf
("\nNULL check failed during insertion\n");

152  
URL_CACHE_ERROR
;

155 
key_Àn
 = 
	`°æí
((*)
íåy
->
uæ
);

156 
ödex
 = 
	`uæ_ˇche_hash
(
íåy
->
uæ
, 
key_Àn
, 
èbÀ
->
size
);

158 if(
ödex
 < 0){

159 
	`¥ötf
("\nHashing failed\n");

160  
URL_CACHE_ERROR
;

163 if(
åue
 =
is_upd©e
 && 
NULL
 =
èbÀ
->èbÀ[
ödex
].
√xt
) {

164 
	`¥ötf
("\nUpdate failed\n");

165  
URL_CACHE_ERROR
;

170 if(!
èbÀ
->èbÀ[
ödex
].
√xt
){

171 
	`uæ_ˇche_èbÀ_lock
();

172 
èbÀ
->èbÀ[
ödex
].
√xt
 = 
íåy
;

173 
	`uæ_ˇche_èbÀ_u∆ock
();

176 
tmp
 = 
èbÀ
->èbÀ[
ödex
].
√xt
;

177 
NULL
 !
tmp
->
√xt
){

178 
tmp
 =Åmp->
√xt
;

180 
	`uæ_ˇche_èbÀ_lock
();

181 
tmp
->
√xt
 = 
íåy
;

182 
	`uæ_ˇche_èbÀ_u∆ock
();

184 
èbÀ
->èbÀ[
ödex
].
cou¡
++;

185 
èbÀ
->
tŸÆ_cou¡
++;

188 
	`uæ_ˇche_èbÀ_lock
();

189 
èbÀ
->
gc_ve˘‹
[—abÀ->
gc_œ°_ödex
)%—abÀ->
size
)].
âl
 = 
íåy
->ttl;

190 
èbÀ
->
gc_ve˘‹
[—abÀ->
gc_œ°_ödex
)%—abÀ->
size
)].
ödex
 = index;

191 
	`uæ_ˇche_èbÀ_u∆ock
();

193  
URL_CACHE_SUCCESS
;

194 
	}
}

196 
uæ_ˇche_ªt_code_t


197 
	$uæ_ˇche_dñëe_íåy_©_ödex
(
u˘abÀ
 
èbÀ
, 
uöt32_t
 
ödex
, 
u˚¡ry
 
íåy
) {

199 
boﬁ
 
found
 = 
Ál£
;

200 
u˚¡ry
 
tmp
 = 
NULL
,

201 
¥ev
 = 
NULL
;

203 i‡(!
èbÀ
 || !table->table){

204 
	`¥ötf
("\nNULL check failed during insertion\n");

205  
URL_CACHE_ERROR
;

208 if(
ödex
 < 0){

209 
	`¥ötf
("\nHashing failed\n");

210  
URL_CACHE_ERROR
;

213 if((
NULL
 =
èbÀ
->èbÀ[
ödex
].
√xt
)) {

214 
	`¥ötf
("\nDelete failed\n");

215  
URL_CACHE_ERROR
;

218 
tmp
 = 
èbÀ
->èbÀ[
ödex
].
√xt
;

219 
¥ev
 = 
tmp
;

220 i‡(
íåy
) {

221 
NULL
 !
tmp
){

223 if(0 =
	`uæ_ˇche_com∑ª_íåy
(
tmp
, 
íåy
)) {

224 
found
 = 
åue
;

227 
¥ev
 = 
tmp
;

228 
tmp
 =Åmp->
√xt
;

230 if(
found
) {

231 
¥ev
->
√xt
 = 
tmp
->next;

233 
	`uæ_ˇche_èbÀ_lock
();

234 
	`uæ_ˇche_‰ì_íåy
(
tmp
);

235 
èbÀ
->èbÀ[
ödex
].
cou¡
--;

236 
èbÀ
->
tŸÆ_cou¡
--;

237 
	`uæ_ˇche_èbÀ_u∆ock
();

240  
URL_CACHE_FAILURE
;

243 
	`uæ_ˇche_èbÀ_lock
();

244 
NULL
 !
tmp
){

246 
	`uæ_ˇche_‰ì_íåy
(
¥ev
);

247 
tmp
 =Åmp->
√xt
;

248 
¥ev
 = 
tmp
;

249 
èbÀ
->èbÀ[
ödex
].
cou¡
--;

250 
èbÀ
->
tŸÆ_cou¡
--;

251 
	`uæ_ˇche_èbÀ_u∆ock
();

253 
èbÀ
->èbÀ[
ödex
].
√xt
 = 
NULL
;

255  
URL_CACHE_SUCCESS
;

256 
	}
}

258 
uæ_ˇche_ªt_code_t


259 
	$uæ_ˇche_dñëe_íåy
(
u˘abÀ
 
èbÀ
, 
u˚¡ry
 
íåy
) {

261 
öt32_t
 
ödex
;

262 
uöt32_t
 
key_Àn
;

264 i‡(!
íåy
 || !
èbÀ
 || !table->table){

265 
	`¥ötf
("\nNULL check failed during insertion\n");

266  
URL_CACHE_ERROR
;

269 
key_Àn
 = 
	`°æí
((*)
íåy
->
uæ
);

270 
ödex
 = 
	`uæ_ˇche_hash
(
íåy
->
uæ
, 
key_Àn
, 
èbÀ
->
size
);

272  
	`uæ_ˇche_dñëe_íåy_©_ödex
(
èbÀ
, 
ödex
, 
íåy
);

273 
	}
}

275 
u˚¡ry


276 
	$uæ_ˇche_lookup
(
u˘abÀ
 
èbÀ
, 
uöt8_t
 *
uæ
) {

278 
öt32_t
 
ödex
;

279 
uöt32_t
 
key_Àn
;

280 
boﬁ
 
found
 = 
Ál£
;

281 
u˚¡ry
 
tmp
 = 
NULL
;

283 i‡(!
uæ
 || !
èbÀ
 || !table->table){

284 
	`¥ötf
("\nNULL check failed duringÜookup\n");

285  
NULL
;

288 
key_Àn
 = 
	`°æí
((*)
uæ
);

289 
ödex
 = 
	`uæ_ˇche_hash
(
uæ
, 
key_Àn
, 
èbÀ
->
size
);

291 if(
NULL
 =
èbÀ
->èbÀ[
ödex
].
√xt
) {

292 
	`¥ötf
("\nLookup failed\n");

293  
NULL
;

296 
tmp
 = 
èbÀ
->èbÀ[
ödex
].
√xt
;

298 
NULL
 !
tmp
->
√xt
){

300 if(0 =
	`°rcmp
((*)
tmp
->
uæ
, (*)url)) {

301 
found
 = 
åue
;

304 
tmp
 =Åmp->
√xt
;

306 if(
found
){

307  
tmp
;

309  
NULL
;

310 
	}
}

313 
	$uæ_ˇche_¥öt_èbÀ
(
u˘abÀ
 
èbÀ
){

315 
u˘node
 
äode
 = 
NULL
;

316 
u˚¡ry
 
íåy
 = 
NULL
;

317 
i
,
j
=0;

318 
decode
[256] = {0};

319 if(!
èbÀ
){

320 
	`¥ötf
("\nTable doesn'tÉxist\n");

324 
äode
 = 
èbÀ
->table;

326 
i
 = 0; i<
èbÀ
->
size
;i++){

327 
	`¥ötf
("\n%4d|",
i
);

328 
íåy
 = 
äode
[
i
].
√xt
;

329 
j
 = 
äode
[
i
].
cou¡
;

330 
íåy
){

331 
	`uæ_ˇche_decode_íåy
(
íåy
, 
decode
);

332 
	`¥ötf
("->[%d]",
j
);

333 
íåy
 =É¡ry->
√xt
;

334 
j
--;

336 
	`¥ötf
("->NULL");

339 
	}
}

342 
	$uæ_ˇche_¥öt_èbÀ_°©s
(
u˘abÀ
 
èbÀ
){

344 if(!
èbÀ
){

345 
	`¥ötf
("\nTable doesn'tÉxist\n");

348 
	`¥ötf
("\nTabÀÅŸÆ-cou¡ :%d\n", 
èbÀ
->
tŸÆ_cou¡
);

349 
	`¥ötf
("TabÀ GC cÀ™-cou¡ :%d\n", 
èbÀ
->
gc_˛ónup_cou¡
);

350 
	`¥ötf
("+++++++++++++++++++++++++++++++++++\n");

352 
	}
}

354 
uöt32_t


355 
	$uæ_ˇche_˛ónup
(
u˘abÀ
 
èbÀ
) {

357 
uöt32_t
 
cur_time
;

358 
uöt32_t
 
íd_idx
, 
cur_idx
;

359 
uæ_ˇche_ªt_code_t
 
ªt_code
;

360 
uc_ve˘‹
 
gc_ve˘‹
 = 
NULL
;

361 
gc_ve˘‹
 = 
èbÀ
->gc_vector;

365 
íd_idx
 = 
èbÀ
->
gc_œ°_ödex
+
URL_CACHE_TBL_GC_WALK_LIMIT
;

366 
èbÀ
->
gc_œ°_ödex
 <
íd_idx
) {

370 
cur_time
 = 
	`time
(
NULL
);

372 
cur_idx
 = (
èbÀ
->
gc_œ°_ödex
)%èbÀ->
size
;

373 if(
gc_ve˘‹
[
cur_idx
].
âl
 && (gc_ve˘‹[cur_idx].â»<
cur_time
)) {

375 
ªt_code
 = 
URL_CACHE_SUCCESS
;

376 if(
URL_CACHE_SUCCESS
 =
ªt_code
) {

380 
èbÀ
->
gc_˛ónup_cou¡
++;

383 
èbÀ
->
gc_œ°_ödex
++;

385  
èbÀ
->
gc_˛ónup_cou¡
;

386 
	}
}

	@url_cache_db/url_cache.h

1 
	~"uæ_ö˛ude.h
"

2 #¥agm®
⁄˚


4 
	#URL_CACHE_TBL_LIMIT
 100000

	)

5 
	#URL_CACHE_TBL_DEFAULT_SIZE
 1024

	)

6 
	#URL_CACHE_TBL_SCALE_FACTOR
 2

	)

7 
	#URL_CACHE_TBL_GC_WALK_LIMIT
 2000

	)

9 
	#URL_ENTRY_DIGEST_LEN
 16

	)

13 
	euæ_ˇche_ªt_
 {

14 
	mURL_CACHE_SUCCESS
 = 0,

15 
	mURL_CACHE_FAILURE
,

16 
	mURL_CACHE_ERROR


17 } 
	tuæ_ˇche_ªt_code_t
;

19 
	suæ_ˇche_íåy_
 {

20 
uöt8_t
 *
	muæ
;

21 
uöt32_t
 
	mâl
;

22 
uöt32_t
 
	mª•⁄£_code
;

23 
uöt8_t
 *
	mdige°
;

24 
uæ_ˇche_íåy_
 *
	m√xt
;

25 } 
	tuæ_ˇche_íåy_t
;

27 
uæ_ˇche_íåy_t
 * 
	tu˚¡ry
;

29 
	suæ_ˇche_èbÀ_node_
 {

30 
uöt8_t
 
	mcou¡
;

31 
uöt32_t
 
	mödex
;

32 
u˚¡ry
 
	m√xt
;

33 } 
	tuæ_ˇche_èbÀ_node_t
;

35 
uæ_ˇche_èbÀ_node_t
 * 
	tu˘node
;

37 
	suæ_ˇche_timî_ve˘‹_
 {

38 
uöt32_t
 
	mâl
;

39 
uöt32_t
 
	mödex
;

40 } 
	tuæ_ˇche_timî_ve˘‹_t
;

42 
uæ_ˇche_timî_ve˘‹_t
 * 
	tuc_ve˘‹
;

44 
	suæ_ˇche_èbÀ_
 {

45 
uöt32_t
 
	mlimô
;

46 
uöt32_t
 
	msize
;

47 
uöt32_t
 
	mtŸÆ_cou¡
;

48 
u˘node
 
	mèbÀ
;

49 
uc_ve˘‹
 
	mgc_ve˘‹
;

50 
uöt32_t
 
	mgc_œ°_ödex
;

51 
uöt32_t
 
	mgc_˛ónup_cou¡
;

52 } 
	tuæ_ˇche_èbÀ_t
;

54 
uæ_ˇche_èbÀ_t
 * 
	tu˘abÀ
;

56 
uöt32_t


57 
uæ_ˇche_hash
(
uöt8_t
 *
key
, 
uöt32_t
 
Àn
, uöt32_à
size
);

59 
u˘abÀ


60 
uæ_ˇche_¸óã_èbÀ
(
uöt32_t
 
size
, uöt32_à
limô
);

62 
u˚¡ry


63 
uæ_ˇche_gë_√w_íåy
(*
uæ
, 
uöt32_t
 
âl
, uöt32_à
ª•⁄£_code
);

65 
uæ_ˇche_ªt_code_t


66 
uæ_ˇche_ö£π_íåy
(
u˘abÀ
 
èbÀ
, 
u˚¡ry
 
íåy
, 
boﬁ
 
is_upd©e
);

68 
uæ_ˇche_ªt_code_t


69 
uæ_ˇche_upd©e_íåy
(
u˘abÀ
 
èbÀ
, 
u˚¡ry
 
íåy
);

71 
uæ_ˇche_ªt_code_t


72 
uæ_ˇche_dñëe_íåy
(
u˘abÀ
 
èbÀ
, 
u˚¡ry
 
node
);

74 
uæ_ˇche_ªt_code_t


75 
uæ_ˇche_dñëe_íåy_©_ödex
(
u˘abÀ
 
èbÀ
, 
uöt32_t
 
ödex
, 
u˚¡ry
 
íåy
);

77 
u˚¡ry


78 
uæ_ˇche_lookup
(
u˘abÀ
 
èbÀ
, 
uöt8_t
 *
uæ
);

81 
uæ_ˇche_¥öt_èbÀ
(
u˘abÀ
 
èbÀ
);

83 
uæ_ˇche_èbÀ_lock
();

85 
uæ_ˇche_èbÀ_u∆ock
();

87 
uöt32_t
 
uæ_ˇche_˛ónup
(
u˘abÀ
 
èbÀ
);

89 
uæ_ˇche_¥öt_èbÀ_°©s
(
u˘abÀ
 
èbÀ
);

	@url_cache_db/url_include.h

1 #i‚de‡
__URL_CACHE__


2 
	#__URL_CACHE__


	)

3 
	~"°dio.h
"

4 
	~"°döt.h
"

5 
	~"°dlib.h
"

6 
	~"°rög.h
"

7 
	~"öây≥s.h
"

8 
	~"°dboﬁ.h
"

9 
	~"time.h
"

10 
	~"›ís¶/md5.h
"

11 
	~"uæ_ˇche.h
"

12 
	~"uni°d.h
"

	@while.c

1 
	~"°dio.h
"

2 
	~"°dlib.h
"

4 * 
	$twoSum
(* 
nums
, 
numsSize
, 
èrgë
, * 
ªtu∫Size
){

5 
ªtu∫Size
 = (*Ë
	`mÆloc
(2*());

6 
tmp
, 
found
,
i
, 
j
;

7 
i
=0;i<
numsSize
-1;i++){

8 
tmp
 = 
èrgë
-
nums
[
i
];

9 
found
 = 0;

10 
j
=
i
+1;j<
numsSize
;j++){

12 if(
nums
[
j
] =
tmp
){

13 
ªtu∫Size
[0] = 
i
;

14 
ªtu∫Size
[1] = 
j
;

15  
ªtu∫Size
;

19  
ªtu∫Size
;

20 
	}
}

22 
	$maö
() {

24 
nums
[4] = {2,7,11,15};

25 
èrgë
 = 9;

26 *
ªtu∫Size
 = 
NULL
;

28 
ªtu∫Size
 = 
	`twoSum
(
nums
, 4, 
èrgë
,ÑeturnSize);

30 
	`¥ötf
("%d %d", 
ªtu∫Size
[0],ÑeturnSize[1]);

35 
	}
}

	@/usr/include/assert.h

22 #ifdef 
_ASSERT_H


24 #unde‡
_ASSERT_H


25 #unde‡
as£π


26 #unde‡
__ASSERT_VOID_CAST


28 #ifdef 
__USE_GNU


29 #unde‡
as£π_≥º‹


34 
	#_ASSERT_H
 1

	)

35 
	~<„©uªs.h
>

37 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,95)

38 
	#__ASSERT_VOID_CAST
 
°©ic_ˇ°
<>

	)

40 
	#__ASSERT_VOID_CAST
 ()

	)

48 #ifdef 
NDEBUG


50 
	#as£π
(
ex¥
Ë(
	`__ASSERT_VOID_CAST
 (0))

	)

58 #ifdef 
__USE_GNU


59 
	#as£π_≥º‹
(
î∫um
Ë(
	`__ASSERT_VOID_CAST
 (0))

	)

64 #i‚de‡
_ASSERT_H_DECLS


65 
	#_ASSERT_H_DECLS


	)

66 
__BEGIN_DECLS


69 
	$__as£π_Áû
 (c⁄° *
__as£πi⁄
, c⁄° *
__fûe
,

70 
__löe
, c⁄° *
__fun˘i⁄
)

71 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

74 
	$__as£π_≥º‹_Áû
 (
__î∫um
, c⁄° *
__fûe
,

75 
__löe
, c⁄° *
__fun˘i⁄
)

76 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

81 
	$__as£π
 (c⁄° *
__as£πi⁄
, c⁄° *
__fûe
, 
__löe
)

82 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

85 
__END_DECLS


91 #i‡
deföed
 
__˝lu•lus


92 
	#as£π
(
ex¥
) \

93 (
°©ic_ˇ°
 <
boﬁ
> (
ex¥
) \

95 : 
	`__as£π_Áû
 (#ex¥, 
__FILE__
, 
__LINE__
, 
__ASSERT_FUNCTION
))

	)

96 #ñi‡!
deföed
 
__GNUC__
 || deföed 
__STRICT_ANSI__


97 
	#as£π
(
ex¥
) \

98 ((
ex¥
) \

99 ? 
	`__ASSERT_VOID_CAST
 (0) \

100 : 
	`__as£π_Áû
 (#ex¥, 
__FILE__
, 
__LINE__
, 
__ASSERT_FUNCTION
))

	)

107 
	#as£π
(
ex¥
) \

108 ((Ë ((
ex¥
Ë? 1 : 0), 
	`__exãnsi⁄__
 ({ \

109 i‡(
ex¥
) \

112 
	`__as£π_Áû
 (#ex¥, 
__FILE__
, 
__LINE__
, 
__ASSERT_FUNCTION
); \

113 
	}
}))

	)

116 #ifdef 
__USE_GNU


117 
	#as£π_≥º‹
(
î∫um
) \

118 (!(
î∫um
) \

119 ? 
	`__ASSERT_VOID_CAST
 (0) \

120 : 
	`__as£π_≥º‹_Áû
 ((
î∫um
), 
__FILE__
, 
__LINE__
, 
__ASSERT_FUNCTION
))

	)

128 #i‡
deföed
 
__˝lu•lus
 ? 
__GNUC_PREREQ
 (2, 6) : __GNUC_PREREQ (2, 4)

129 
	#__ASSERT_FUNCTION
 
__exãnsi⁄__
 
__PRETTY_FUNCTION__


	)

131 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

132 
	#__ASSERT_FUNCTION
 
__func__


	)

134 
	#__ASSERT_FUNCTION
 ((c⁄° *Ë0)

	)

141 #i‡
deföed
 
__USE_ISOC11
 && !deföed 
__˝lu•lus


142 #unde‡
°©ic_as£π


143 
	#°©ic_as£π
 
_Sètic_as£π


	)

	@/usr/include/errno.h

22 #i‚def 
_ERRNO_H


23 
	#_ERRNO_H
 1

	)

25 
	~<„©uªs.h
>

28 
	~<bôs/î∫o.h
>

32 #i‚de‡
__ASSEMBLER__


34 
__BEGIN_DECLS


37 *
	$__î∫o_loˇti⁄
 (Ë
__THROW
 
__©åibuã_c⁄°__
;

38 
	#î∫o
 (*
	`__î∫o_loˇti⁄
 ())

	)

40 #ifde‡
__USE_GNU


45 *
¥ogøm_övoˇti⁄_«me
;

46 *
¥ogøm_övoˇti⁄_sh‹t_«me
;

50 #i‚de‡
__îr‹_t_deföed


51 
	#__îr‹_t_deföed
 1

	)

52 
	tîr‹_t
;

57 
__END_DECLS


	@/usr/include/fcntl.h

22 #i‚def 
_FCNTL_H


23 
	#_FCNTL_H
 1

	)

25 
	~<„©uªs.h
>

28 
	g__BEGIN_DECLS


31 
	~<bôs/ty≥s.h
>

35 
	~<bôs/f˙é.h
>

39 #ifde‡
__O_TMPFILE


40 
	#__OPEN_NEEDS_MODE
(
oÊag
) \

41 (((
oÊag
Ë& 
O_CREAT
Ë!0 || ((oÊagË& 
__O_TMPFILE
Ë=__O_TMPFILE)

	)

43 
	#__OPEN_NEEDS_MODE
(
oÊag
Ë(((oÊagË& 
O_CREAT
Ë!0)

	)

49 #i‚de‡
__mode_t_deföed


50 
__mode_t
 
	tmode_t
;

51 
	#__mode_t_deföed


	)

54 #i‚de‡
__off_t_deföed


55 #i‚de‡
__USE_FILE_OFFSET64


56 
__off_t
 
	toff_t
;

58 
__off64_t
 
	toff_t
;

60 
	#__off_t_deföed


	)

63 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


64 
__off64_t
 
	toff64_t
;

65 
	#__off64_t_deföed


	)

68 #i‚de‡
__pid_t_deföed


69 
__pid_t
 
	tpid_t
;

70 
	#__pid_t_deföed


	)

74 #ifde‡
__USE_XOPEN2K8


75 
	~<bôs/ty≥s/°ru˘_time•ec.h
>

77 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


78 
	~<bôs/°©.h
>

80 
	#S_IFMT
 
__S_IFMT


	)

81 
	#S_IFDIR
 
__S_IFDIR


	)

82 
	#S_IFCHR
 
__S_IFCHR


	)

83 
	#S_IFBLK
 
__S_IFBLK


	)

84 
	#S_IFREG
 
__S_IFREG


	)

85 #ifde‡
__S_IFIFO


86 
	#S_IFIFO
 
__S_IFIFO


	)

88 #ifde‡
__S_IFLNK


89 
	#S_IFLNK
 
__S_IFLNK


	)

91 #i‡(
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8
Ë&& deföed 
__S_IFSOCK


92 
	#S_IFSOCK
 
__S_IFSOCK


	)

97 
	#S_ISUID
 
__S_ISUID


	)

98 
	#S_ISGID
 
__S_ISGID


	)

100 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


102 
	#S_ISVTX
 
__S_ISVTX


	)

105 
	#S_IRUSR
 
__S_IREAD


	)

106 
	#S_IWUSR
 
__S_IWRITE


	)

107 
	#S_IXUSR
 
__S_IEXEC


	)

109 
	#S_IRWXU
 (
__S_IREAD
|
__S_IWRITE
|
__S_IEXEC
)

	)

111 
	#S_IRGRP
 (
S_IRUSR
 >> 3Ë

	)

112 
	#S_IWGRP
 (
S_IWUSR
 >> 3Ë

	)

113 
	#S_IXGRP
 (
S_IXUSR
 >> 3Ë

	)

115 
	#S_IRWXG
 (
S_IRWXU
 >> 3)

	)

117 
	#S_IROTH
 (
S_IRGRP
 >> 3Ë

	)

118 
	#S_IWOTH
 (
S_IWGRP
 >> 3Ë

	)

119 
	#S_IXOTH
 (
S_IXGRP
 >> 3Ë

	)

121 
	#S_IRWXO
 (
S_IRWXG
 >> 3)

	)

124 #ifdef 
__USE_MISC


125 #i‚de‡
R_OK


128 
	#R_OK
 4

	)

129 
	#W_OK
 2

	)

130 
	#X_OK
 1

	)

131 
	#F_OK
 0

	)

136 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


137 
	#SEEK_SET
 0

	)

138 
	#SEEK_CUR
 1

	)

139 
	#SEEK_END
 2

	)

147 
f˙é
 (
__fd
, 
__cmd
, ...);

156 #i‚de‡
__USE_FILE_OFFSET64


157 
	$›í
 (c⁄° *
__fûe
, 
__oÊag
, ...Ë
	`__n⁄nuŒ
 ((1));

159 #ifde‡
__REDIRECT


160 
	`__REDIRECT
 (
›í
, (c⁄° *
__fûe
, 
__oÊag
, ...), 
›í64
)

161 
	`__n⁄nuŒ
 ((1));

163 
	#›í
 
›í64


	)

166 #ifde‡
__USE_LARGEFILE64


167 
	$›í64
 (c⁄° *
__fûe
, 
__oÊag
, ...Ë
	`__n⁄nuŒ
 ((1));

170 #ifde‡
__USE_ATFILE


180 #i‚de‡
__USE_FILE_OFFSET64


181 
	$›í©
 (
__fd
, c⁄° *
__fûe
, 
__oÊag
, ...)

182 
	`__n⁄nuŒ
 ((2));

184 #ifde‡
__REDIRECT


185 
	`__REDIRECT
 (
›í©
, (
__fd
, c⁄° *
__fûe
, 
__oÊag
,

186 ...), 
›í©64
Ë
	`__n⁄nuŒ
 ((2));

188 
	#›í©
 
›í©64


	)

191 #ifde‡
__USE_LARGEFILE64


192 
	$›í©64
 (
__fd
, c⁄° *
__fûe
, 
__oÊag
, ...)

193 
	`__n⁄nuŒ
 ((2));

202 #i‚de‡
__USE_FILE_OFFSET64


203 
	$¸ót
 (c⁄° *
__fûe
, 
mode_t
 
__mode
Ë
	`__n⁄nuŒ
 ((1));

205 #ifde‡
__REDIRECT


206 
	`__REDIRECT
 (
¸ót
, (c⁄° *
__fûe
, 
mode_t
 
__mode
),

207 
¸ót64
Ë
	`__n⁄nuŒ
 ((1));

209 
	#¸ót
 
¸ót64


	)

212 #ifde‡
__USE_LARGEFILE64


213 
	$¸ót64
 (c⁄° *
__fûe
, 
mode_t
 
__mode
Ë
	`__n⁄nuŒ
 ((1));

216 #i‡!
deföed
 
F_LOCK
 && (deföed 
__USE_MISC
 || (deföed 
__USE_XOPEN_EXTENDED
 \

217 && !
deföed
 
__USE_POSIX
))

226 
	#F_ULOCK
 0

	)

227 
	#F_LOCK
 1

	)

228 
	#F_TLOCK
 2

	)

229 
	#F_TEST
 3

	)

231 #i‚de‡
__USE_FILE_OFFSET64


232 
	`lockf
 (
__fd
, 
__cmd
, 
off_t
 
__Àn
);

234 #ifde‡
__REDIRECT


235 
	`__REDIRECT
 (
lockf
, (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
), 
lockf64
);

237 
	#lockf
 
lockf64


	)

240 #ifde‡
__USE_LARGEFILE64


241 
	`lockf64
 (
__fd
, 
__cmd
, 
off64_t
 
__Àn
);

245 #ifde‡
__USE_XOPEN2K


248 #i‚de‡
__USE_FILE_OFFSET64


249 
	$posix_Ádvi£
 (
__fd
, 
off_t
 
__off£t
, off_à
__Àn
,

250 
__advi£
Ë
__THROW
;

252 #ifde‡
__REDIRECT_NTH


253 
	`__REDIRECT_NTH
 (
posix_Ádvi£
, (
__fd
, 
__off64_t
 
__off£t
,

254 
__off64_t
 
__Àn
, 
__advi£
),

255 
posix_Ádvi£64
);

257 
	#posix_Ádvi£
 
posix_Ádvi£64


	)

260 #ifde‡
__USE_LARGEFILE64


261 
	$posix_Ádvi£64
 (
__fd
, 
off64_t
 
__off£t
, off64_à
__Àn
,

262 
__advi£
Ë
__THROW
;

270 #i‚de‡
__USE_FILE_OFFSET64


271 
	`posix_ÁŒoˇã
 (
__fd
, 
off_t
 
__off£t
, off_à
__Àn
);

273 #ifde‡
__REDIRECT


274 
	`__REDIRECT
 (
posix_ÁŒoˇã
, (
__fd
, 
__off64_t
 
__off£t
,

275 
__off64_t
 
__Àn
),

276 
posix_ÁŒoˇã64
);

278 
	#posix_ÁŒoˇã
 
posix_ÁŒoˇã64


	)

281 #ifde‡
__USE_LARGEFILE64


282 
	`posix_ÁŒoˇã64
 (
__fd
, 
off64_t
 
__off£t
, off64_à
__Àn
);

288 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄
 \

289 && 
deföed
 
__va_¨g_∑ck_Àn


290 
	~<bôs/f˙é2.h
>

293 
__END_DECLS


	@/usr/include/inttypes.h

22 #i‚de‡
_INTTYPES_H


23 
	#_INTTYPES_H
 1

	)

25 
	~<„©uªs.h
>

27 
	~<°döt.h
>

30 #i‚de‡
____gwch¨_t_deföed


31 #ifde‡
__˝lu•lus


32 
	#__gwch¨_t
 
wch¨_t


	)

33 #ñi‡
deföed
 
__WCHAR_TYPE__


34 
__WCHAR_TYPE__
 
	t__gwch¨_t
;

36 
	#__√ed_wch¨_t


	)

37 
	~<°ddef.h
>

38 
wch¨_t
 
	t__gwch¨_t
;

40 
	#____gwch¨_t_deföed
 1

	)

43 #i‡
__WORDSIZE
 == 64

44 
	#__PRI64_PREFIX
 "l"

	)

45 
	#__PRIPTR_PREFIX
 "l"

	)

47 
	#__PRI64_PREFIX
 "Œ"

	)

48 
	#__PRIPTR_PREFIX


	)

54 
	#PRId8
 "d"

	)

55 
	#PRId16
 "d"

	)

56 
	#PRId32
 "d"

	)

57 
	#PRId64
 
__PRI64_PREFIX
 "d"

	)

59 
	#PRIdLEAST8
 "d"

	)

60 
	#PRIdLEAST16
 "d"

	)

61 
	#PRIdLEAST32
 "d"

	)

62 
	#PRIdLEAST64
 
__PRI64_PREFIX
 "d"

	)

64 
	#PRIdFAST8
 "d"

	)

65 
	#PRIdFAST16
 
__PRIPTR_PREFIX
 "d"

	)

66 
	#PRIdFAST32
 
__PRIPTR_PREFIX
 "d"

	)

67 
	#PRIdFAST64
 
__PRI64_PREFIX
 "d"

	)

70 
	#PRIi8
 "i"

	)

71 
	#PRIi16
 "i"

	)

72 
	#PRIi32
 "i"

	)

73 
	#PRIi64
 
__PRI64_PREFIX
 "i"

	)

75 
	#PRIiLEAST8
 "i"

	)

76 
	#PRIiLEAST16
 "i"

	)

77 
	#PRIiLEAST32
 "i"

	)

78 
	#PRIiLEAST64
 
__PRI64_PREFIX
 "i"

	)

80 
	#PRIiFAST8
 "i"

	)

81 
	#PRIiFAST16
 
__PRIPTR_PREFIX
 "i"

	)

82 
	#PRIiFAST32
 
__PRIPTR_PREFIX
 "i"

	)

83 
	#PRIiFAST64
 
__PRI64_PREFIX
 "i"

	)

86 
	#PRIo8
 "o"

	)

87 
	#PRIo16
 "o"

	)

88 
	#PRIo32
 "o"

	)

89 
	#PRIo64
 
__PRI64_PREFIX
 "o"

	)

91 
	#PRIoLEAST8
 "o"

	)

92 
	#PRIoLEAST16
 "o"

	)

93 
	#PRIoLEAST32
 "o"

	)

94 
	#PRIoLEAST64
 
__PRI64_PREFIX
 "o"

	)

96 
	#PRIoFAST8
 "o"

	)

97 
	#PRIoFAST16
 
__PRIPTR_PREFIX
 "o"

	)

98 
	#PRIoFAST32
 
__PRIPTR_PREFIX
 "o"

	)

99 
	#PRIoFAST64
 
__PRI64_PREFIX
 "o"

	)

102 
	#PRIu8
 "u"

	)

103 
	#PRIu16
 "u"

	)

104 
	#PRIu32
 "u"

	)

105 
	#PRIu64
 
__PRI64_PREFIX
 "u"

	)

107 
	#PRIuLEAST8
 "u"

	)

108 
	#PRIuLEAST16
 "u"

	)

109 
	#PRIuLEAST32
 "u"

	)

110 
	#PRIuLEAST64
 
__PRI64_PREFIX
 "u"

	)

112 
	#PRIuFAST8
 "u"

	)

113 
	#PRIuFAST16
 
__PRIPTR_PREFIX
 "u"

	)

114 
	#PRIuFAST32
 
__PRIPTR_PREFIX
 "u"

	)

115 
	#PRIuFAST64
 
__PRI64_PREFIX
 "u"

	)

118 
	#PRIx8
 "x"

	)

119 
	#PRIx16
 "x"

	)

120 
	#PRIx32
 "x"

	)

121 
	#PRIx64
 
__PRI64_PREFIX
 "x"

	)

123 
	#PRIxLEAST8
 "x"

	)

124 
	#PRIxLEAST16
 "x"

	)

125 
	#PRIxLEAST32
 "x"

	)

126 
	#PRIxLEAST64
 
__PRI64_PREFIX
 "x"

	)

128 
	#PRIxFAST8
 "x"

	)

129 
	#PRIxFAST16
 
__PRIPTR_PREFIX
 "x"

	)

130 
	#PRIxFAST32
 
__PRIPTR_PREFIX
 "x"

	)

131 
	#PRIxFAST64
 
__PRI64_PREFIX
 "x"

	)

134 
	#PRIX8
 "X"

	)

135 
	#PRIX16
 "X"

	)

136 
	#PRIX32
 "X"

	)

137 
	#PRIX64
 
__PRI64_PREFIX
 "X"

	)

139 
	#PRIXLEAST8
 "X"

	)

140 
	#PRIXLEAST16
 "X"

	)

141 
	#PRIXLEAST32
 "X"

	)

142 
	#PRIXLEAST64
 
__PRI64_PREFIX
 "X"

	)

144 
	#PRIXFAST8
 "X"

	)

145 
	#PRIXFAST16
 
__PRIPTR_PREFIX
 "X"

	)

146 
	#PRIXFAST32
 
__PRIPTR_PREFIX
 "X"

	)

147 
	#PRIXFAST64
 
__PRI64_PREFIX
 "X"

	)

151 
	#PRIdMAX
 
__PRI64_PREFIX
 "d"

	)

152 
	#PRIiMAX
 
__PRI64_PREFIX
 "i"

	)

153 
	#PRIoMAX
 
__PRI64_PREFIX
 "o"

	)

154 
	#PRIuMAX
 
__PRI64_PREFIX
 "u"

	)

155 
	#PRIxMAX
 
__PRI64_PREFIX
 "x"

	)

156 
	#PRIXMAX
 
__PRI64_PREFIX
 "X"

	)

160 
	#PRIdPTR
 
__PRIPTR_PREFIX
 "d"

	)

161 
	#PRIiPTR
 
__PRIPTR_PREFIX
 "i"

	)

162 
	#PRIoPTR
 
__PRIPTR_PREFIX
 "o"

	)

163 
	#PRIuPTR
 
__PRIPTR_PREFIX
 "u"

	)

164 
	#PRIxPTR
 
__PRIPTR_PREFIX
 "x"

	)

165 
	#PRIXPTR
 
__PRIPTR_PREFIX
 "X"

	)

171 
	#SCNd8
 "hhd"

	)

172 
	#SCNd16
 "hd"

	)

173 
	#SCNd32
 "d"

	)

174 
	#SCNd64
 
__PRI64_PREFIX
 "d"

	)

176 
	#SCNdLEAST8
 "hhd"

	)

177 
	#SCNdLEAST16
 "hd"

	)

178 
	#SCNdLEAST32
 "d"

	)

179 
	#SCNdLEAST64
 
__PRI64_PREFIX
 "d"

	)

181 
	#SCNdFAST8
 "hhd"

	)

182 
	#SCNdFAST16
 
__PRIPTR_PREFIX
 "d"

	)

183 
	#SCNdFAST32
 
__PRIPTR_PREFIX
 "d"

	)

184 
	#SCNdFAST64
 
__PRI64_PREFIX
 "d"

	)

187 
	#SCNi8
 "hhi"

	)

188 
	#SCNi16
 "hi"

	)

189 
	#SCNi32
 "i"

	)

190 
	#SCNi64
 
__PRI64_PREFIX
 "i"

	)

192 
	#SCNiLEAST8
 "hhi"

	)

193 
	#SCNiLEAST16
 "hi"

	)

194 
	#SCNiLEAST32
 "i"

	)

195 
	#SCNiLEAST64
 
__PRI64_PREFIX
 "i"

	)

197 
	#SCNiFAST8
 "hhi"

	)

198 
	#SCNiFAST16
 
__PRIPTR_PREFIX
 "i"

	)

199 
	#SCNiFAST32
 
__PRIPTR_PREFIX
 "i"

	)

200 
	#SCNiFAST64
 
__PRI64_PREFIX
 "i"

	)

203 
	#SCNu8
 "hhu"

	)

204 
	#SCNu16
 "hu"

	)

205 
	#SCNu32
 "u"

	)

206 
	#SCNu64
 
__PRI64_PREFIX
 "u"

	)

208 
	#SCNuLEAST8
 "hhu"

	)

209 
	#SCNuLEAST16
 "hu"

	)

210 
	#SCNuLEAST32
 "u"

	)

211 
	#SCNuLEAST64
 
__PRI64_PREFIX
 "u"

	)

213 
	#SCNuFAST8
 "hhu"

	)

214 
	#SCNuFAST16
 
__PRIPTR_PREFIX
 "u"

	)

215 
	#SCNuFAST32
 
__PRIPTR_PREFIX
 "u"

	)

216 
	#SCNuFAST64
 
__PRI64_PREFIX
 "u"

	)

219 
	#SCNo8
 "hho"

	)

220 
	#SCNo16
 "ho"

	)

221 
	#SCNo32
 "o"

	)

222 
	#SCNo64
 
__PRI64_PREFIX
 "o"

	)

224 
	#SCNoLEAST8
 "hho"

	)

225 
	#SCNoLEAST16
 "ho"

	)

226 
	#SCNoLEAST32
 "o"

	)

227 
	#SCNoLEAST64
 
__PRI64_PREFIX
 "o"

	)

229 
	#SCNoFAST8
 "hho"

	)

230 
	#SCNoFAST16
 
__PRIPTR_PREFIX
 "o"

	)

231 
	#SCNoFAST32
 
__PRIPTR_PREFIX
 "o"

	)

232 
	#SCNoFAST64
 
__PRI64_PREFIX
 "o"

	)

235 
	#SCNx8
 "hhx"

	)

236 
	#SCNx16
 "hx"

	)

237 
	#SCNx32
 "x"

	)

238 
	#SCNx64
 
__PRI64_PREFIX
 "x"

	)

240 
	#SCNxLEAST8
 "hhx"

	)

241 
	#SCNxLEAST16
 "hx"

	)

242 
	#SCNxLEAST32
 "x"

	)

243 
	#SCNxLEAST64
 
__PRI64_PREFIX
 "x"

	)

245 
	#SCNxFAST8
 "hhx"

	)

246 
	#SCNxFAST16
 
__PRIPTR_PREFIX
 "x"

	)

247 
	#SCNxFAST32
 
__PRIPTR_PREFIX
 "x"

	)

248 
	#SCNxFAST64
 
__PRI64_PREFIX
 "x"

	)

252 
	#SCNdMAX
 
__PRI64_PREFIX
 "d"

	)

253 
	#SCNiMAX
 
__PRI64_PREFIX
 "i"

	)

254 
	#SCNoMAX
 
__PRI64_PREFIX
 "o"

	)

255 
	#SCNuMAX
 
__PRI64_PREFIX
 "u"

	)

256 
	#SCNxMAX
 
__PRI64_PREFIX
 "x"

	)

259 
	#SCNdPTR
 
__PRIPTR_PREFIX
 "d"

	)

260 
	#SCNiPTR
 
__PRIPTR_PREFIX
 "i"

	)

261 
	#SCNoPTR
 
__PRIPTR_PREFIX
 "o"

	)

262 
	#SCNuPTR
 
__PRIPTR_PREFIX
 "u"

	)

263 
	#SCNxPTR
 
__PRIPTR_PREFIX
 "x"

	)

266 
	g__BEGIN_DECLS


268 #i‡
__WORDSIZE
 == 64

273 
	mquŸ
;

274 
	mªm
;

275 } 
	timaxdiv_t
;

282 
__exãnsi⁄__
 
	mquŸ
;

283 
__exãnsi⁄__
 
	mªm
;

284 } 
	timaxdiv_t
;

290 
ötmax_t
 
	$imaxabs
 (
ötmax_t
 
__n
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

293 
imaxdiv_t
 
	$imaxdiv
 (
ötmax_t
 
__numî
, i¡max_à
__díom
)

294 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

297 
ötmax_t
 
	$°πoimax
 (c⁄° *
__ª°ri˘
 
__≈å
,

298 **
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

301 
uötmax_t
 
	$°πoumax
 (c⁄° *
__ª°ri˘
 
__≈å
,

302 ** 
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

305 
ötmax_t
 
	$wc°oimax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
__≈å
,

306 
__gwch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

307 
__THROW
;

310 
uötmax_t
 
	$wc°oumax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
__≈å
,

311 
__gwch¨_t
 ** 
__ª°ri˘
 
__íd±r
, 
__ba£
)

312 
__THROW
;

314 #ifde‡
__USE_EXTERN_INLINES


316 #i‡
__WORDSIZE
 == 64

318 
	$__°πﬁ_öã∫Æ
 (c⁄° *
__ª°ri˘
 
__≈å
,

319 **
__ª°ri˘
 
__íd±r
,

320 
__ba£
, 
__group
)

321 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

323 
__exã∫_ölöe
 
ötmax_t


324 
	`__NTH
 (
	$°πoimax
 (c⁄° *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

325 
ba£
))

327  
	`__°πﬁ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

328 
	}
}

330 
	$__°πoul_öã∫Æ
 (c⁄° *
__ª°ri˘
 
__≈å
,

331 ** 
__ª°ri˘
 
__íd±r
,

332 
__ba£
, 
__group
)

333 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

335 
__exã∫_ölöe
 
uötmax_t


336 
	`__NTH
 (
	$°πoumax
 (c⁄° *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

337 
ba£
))

339  
	`__°πoul_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

340 
	}
}

342 
	$__wc°ﬁ_öã∫Æ
 (c⁄° 
__gwch¨_t
 * 
__ª°ri˘
 
__≈å
,

343 
__gwch¨_t
 **
__ª°ri˘
 
__íd±r
,

344 
__ba£
, 
__group
)

345 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

347 
__exã∫_ölöe
 
ötmax_t


348 
	`__NTH
 (
	$wc°oimax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

349 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

351  
	`__wc°ﬁ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

352 
	}
}

354 
	$__wc°oul_öã∫Æ
 (c⁄° 
__gwch¨_t
 *

355 
__ª°ri˘
 
__≈å
,

356 
__gwch¨_t
 **

357 
__ª°ri˘
 
__íd±r
,

358 
__ba£
, 
__group
)

359 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

361 
__exã∫_ölöe
 
uötmax_t


362 
	`__NTH
 (
	$wc°oumax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

363 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

365  
	`__wc°oul_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

366 
	}
}

370 
__exãnsi⁄__


371 
	$__°πﬁl_öã∫Æ
 (c⁄° *
__ª°ri˘
 
__≈å
,

372 **
__ª°ri˘
 
__íd±r
,

373 
__ba£
, 
__group
)

374 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

376 
__exã∫_ölöe
 
ötmax_t


377 
	`__NTH
 (
	$°πoimax
 (c⁄° *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

378 
ba£
))

380  
	`__°πﬁl_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

381 
	}
}

383 
__exãnsi⁄__


384 
	$__°πouŒ_öã∫Æ
 (const *

385 
__ª°ri˘
 
__≈å
,

387 
__ª°ri˘
 
__íd±r
,

388 
__ba£
,

389 
__group
)

390 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

392 
__exã∫_ölöe
 
uötmax_t


393 
	`__NTH
 (
	$°πoumax
 (c⁄° *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

394 
ba£
))

396  
	`__°πouŒ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

397 
	}
}

399 
__exãnsi⁄__


400 
	$__wc°ﬁl_öã∫Æ
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
__≈å
,

401 
__gwch¨_t
 **
__ª°ri˘
 
__íd±r
,

402 
__ba£
, 
__group
)

403 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

405 
__exã∫_ölöe
 
ötmax_t


406 
	`__NTH
 (
	$wc°oimax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

407 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

409  
	`__wc°ﬁl_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

410 
	}
}

413 
__exãnsi⁄__


414 
	$__wc°ouŒ_öã∫Æ
 (c⁄° 
__gwch¨_t
 *

415 
__ª°ri˘
 
__≈å
,

416 
__gwch¨_t
 **

417 
__ª°ri˘
 
__íd±r
,

418 
__ba£
,

419 
__group
)

420 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

422 
__exã∫_ölöe
 
uötmax_t


423 
	`__NTH
 (
	$wc°oumax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

424 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

426  
	`__wc°ouŒ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

427 
	}
}

432 
	g__END_DECLS


	@/usr/include/limits.h

22 #i‚de‡
_LIBC_LIMITS_H_


23 
	#_LIBC_LIMITS_H_
 1

	)

25 
	#__GLIBC_INTERNAL_STARTING_HEADER_IMPLEMENTATION


	)

26 
	~<bôs/libc-hódî-°¨t.h
>

32 
	#MB_LEN_MAX
 16

	)

37 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2

42 #i‚de‡
_LIMITS_H


43 
	#_LIMITS_H
 1

	)

45 
	~<bôs/w‹dsize.h
>

54 
	#CHAR_BIT
 8

	)

57 
	#SCHAR_MIN
 (-128)

	)

58 
	#SCHAR_MAX
 127

	)

61 
	#UCHAR_MAX
 255

	)

64 #ifde‡
__CHAR_UNSIGNED__


65 
	#CHAR_MIN
 0

	)

66 
	#CHAR_MAX
 
UCHAR_MAX


	)

68 
	#CHAR_MIN
 
SCHAR_MIN


	)

69 
	#CHAR_MAX
 
SCHAR_MAX


	)

73 
	#SHRT_MIN
 (-32768)

	)

74 
	#SHRT_MAX
 32767

	)

77 
	#USHRT_MAX
 65535

	)

80 
	#INT_MIN
 (-
INT_MAX
 - 1)

	)

81 
	#INT_MAX
 2147483647

	)

84 
	#UINT_MAX
 4294967295U

	)

87 #i‡
__WORDSIZE
 == 64

88 
	#LONG_MAX
 9223372036854775807L

	)

90 
	#LONG_MAX
 2147483647L

	)

92 
	#LONG_MIN
 (-
LONG_MAX
 - 1L)

	)

95 #i‡
__WORDSIZE
 == 64

96 
	#ULONG_MAX
 18446744073709551615UL

	)

98 
	#ULONG_MAX
 4294967295UL

	)

101 #ifde‡
__USE_ISOC99


104 
	#LLONG_MAX
 9223372036854775807LL

	)

105 
	#LLONG_MIN
 (-
LLONG_MAX
 - 1LL)

	)

108 
	#ULLONG_MAX
 18446744073709551615ULL

	)

122 #i‡
deföed
 
__GNUC__
 && !deföed 
_GCC_LIMITS_H_


124 #ö˛ude_√xà<
limôs
.
h
>

130 #i‡
deföed
 
__USE_ISOC99
 && deföed 
__GNUC__


131 #i‚de‡
LLONG_MIN


132 
	#LLONG_MIN
 (-
LLONG_MAX
-1)

	)

134 #i‚de‡
LLONG_MAX


135 
	#LLONG_MAX
 
__LONG_LONG_MAX__


	)

137 #i‚de‡
ULLONG_MAX


138 
	#ULLONG_MAX
 (
LLONG_MAX
 * 2ULL + 1)

	)

145 #i‡
__GLIBC_USE
 (
IEC_60559_BFP_EXT
)

146 #i‚de‡
CHAR_WIDTH


147 
	#CHAR_WIDTH
 8

	)

149 #i‚de‡
SCHAR_WIDTH


150 
	#SCHAR_WIDTH
 8

	)

152 #i‚de‡
UCHAR_WIDTH


153 
	#UCHAR_WIDTH
 8

	)

155 #i‚de‡
SHRT_WIDTH


156 
	#SHRT_WIDTH
 16

	)

158 #i‚de‡
USHRT_WIDTH


159 
	#USHRT_WIDTH
 16

	)

161 #i‚de‡
INT_WIDTH


162 
	#INT_WIDTH
 32

	)

164 #i‚de‡
UINT_WIDTH


165 
	#UINT_WIDTH
 32

	)

167 #i‚de‡
LONG_WIDTH


168 
	#LONG_WIDTH
 
__WORDSIZE


	)

170 #i‚de‡
ULONG_WIDTH


171 
	#ULONG_WIDTH
 
__WORDSIZE


	)

173 #i‚de‡
LLONG_WIDTH


174 
	#LLONG_WIDTH
 64

	)

176 #i‚de‡
ULLONG_WIDTH


177 
	#ULLONG_WIDTH
 64

	)

181 #ifdef 
__USE_POSIX


183 
	~<bôs/posix1_lim.h
>

186 #ifdef 
__USE_POSIX2


187 
	~<bôs/posix2_lim.h
>

190 #ifdef 
__USE_XOPEN


191 
	~<bôs/x›í_lim.h
>

	@/usr/include/math.h

23 #i‚def 
_MATH_H


24 
	#_MATH_H
 1

	)

26 
	#__GLIBC_INTERNAL_STARTING_HEADER_IMPLEMENTATION


	)

27 
	~<bôs/libc-hódî-°¨t.h
>

29 #i‡
deföed
 
log
 && deföed 
__GNUC__


30 #w¨nög 
A
 
ma¸o
 
ˇŒed
 
log
 
was
 
Æªady
 
deföed
 
whí
 <
m©h
.
h
> wa†
ö˛uded
.

31 #w¨nög 
This
 
wûl
 
ˇu£
 
compû©i⁄
 
¥obÀms
.

34 
	g__BEGIN_DECLS


37 
	~<bôs/ty≥s.h
>

40 
	~<bôs/m©h-ve˘‹.h
>

43 
	~<bôs/Êﬂä.h
>

47 #i‡
__GNUC_PREREQ
 (3, 3)

48 
	#HUGE_VAL
 (
	`__buûtö_huge_vÆ
 ())

	)

55 
	#HUGE_VAL
 1e10000

	)

57 #ifde‡
__USE_ISOC99


58 #i‡
__GNUC_PREREQ
 (3, 3)

59 
	#HUGE_VALF
 (
	`__buûtö_huge_vÆf
 ())

	)

60 
	#HUGE_VALL
 (
	`__buûtö_huge_vÆl
 ())

	)

62 
	#HUGE_VALF
 1e10000f

	)

63 
	#HUGE_VALL
 1e10000L

	)

66 #i‡
__HAVE_FLOAT16
 && 
__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

67 
	#HUGE_VAL_F16
 (
	`__buûtö_huge_vÆf16
 ())

	)

69 #i‡
__HAVE_FLOAT32
 && 
__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

70 
	#HUGE_VAL_F32
 (
	`__buûtö_huge_vÆf32
 ())

	)

72 #i‡
__HAVE_FLOAT64
 && 
__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

73 
	#HUGE_VAL_F64
 (
	`__buûtö_huge_vÆf64
 ())

	)

75 #i‡
__HAVE_FLOAT128
 && 
__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

76 
	#HUGE_VAL_F128
 (
	`__buûtö_huge_vÆf128
 ())

	)

78 #i‡
__HAVE_FLOAT32X
 && 
__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

79 
	#HUGE_VAL_F32X
 (
	`__buûtö_huge_vÆf32x
 ())

	)

81 #i‡
__HAVE_FLOAT64X
 && 
__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

82 
	#HUGE_VAL_F64X
 (
	`__buûtö_huge_vÆf64x
 ())

	)

84 #i‡
__HAVE_FLOAT128X
 && 
__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

85 
	#HUGE_VAL_F128X
 (
	`__buûtö_huge_vÆf128x
 ())

	)

88 #ifde‡
__USE_ISOC99


90 #i‡
__GNUC_PREREQ
 (3, 3)

91 
	#INFINITY
 (
	`__buûtö_öff
 ())

	)

93 
	#INFINITY
 
HUGE_VALF


	)

97 #i‡
__GNUC_PREREQ
 (3, 3)

98 
	#NAN
 (
	`__buûtö_«nf
 (""))

	)

103 
	#NAN
 (0.0‡/ 0.0f)

	)

107 #i‡
__GLIBC_USE
 (
IEC_60559_BFP_EXT
)

109 #i‡
__GNUC_PREREQ
 (3, 3)

110 
	#SNANF
 (
	`__buûtö_«nsf
 (""))

	)

111 
	#SNAN
 (
	`__buûtö_«ns
 (""))

	)

112 
	#SNANL
 (
	`__buûtö_«n¶
 (""))

	)

115 #i‡
__HAVE_FLOAT16
 && 
__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

116 
	#SNANF16
 (
	`__buûtö_«nsf16
 (""))

	)

118 #i‡
__HAVE_FLOAT32
 && 
__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

119 
	#SNANF32
 (
	`__buûtö_«nsf32
 (""))

	)

121 #i‡
__HAVE_FLOAT64
 && 
__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

122 
	#SNANF64
 (
	`__buûtö_«nsf64
 (""))

	)

124 #i‡
__HAVE_FLOAT128
 && 
__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

125 
	#SNANF128
 (
	`__buûtö_«nsf128
 (""))

	)

127 #i‡
__HAVE_FLOAT32X
 && 
__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

128 
	#SNANF32X
 (
	`__buûtö_«nsf32x
 (""))

	)

130 #i‡
__HAVE_FLOAT64X
 && 
__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

131 
	#SNANF64X
 (
	`__buûtö_«nsf64x
 (""))

	)

133 #i‡
__HAVE_FLOAT128X
 && 
__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

134 
	#SNANF128X
 (
	`__buûtö_«nsf128x
 (""))

	)

138 
	~<bôs/Êt-evÆ-mëhod.h
>

140 #ifde‡
__USE_ISOC99


148 #i‡
__GLIBC_FLT_EVAL_METHOD
 == 0 || __GLIBC_FLT_EVAL_METHOD == 16

149 
	tÊﬂt_t
;

150 
	tdoubÀ_t
;

151 #ñi‡
__GLIBC_FLT_EVAL_METHOD
 == 1

152 
	tÊﬂt_t
;

153 
	tdoubÀ_t
;

154 #ñi‡
__GLIBC_FLT_EVAL_METHOD
 == 2

155 
	tÊﬂt_t
;

156 
	tdoubÀ_t
;

157 #ñi‡
__GLIBC_FLT_EVAL_METHOD
 == 32

158 
_Flﬂt32
 
	tÊﬂt_t
;

159 
	tdoubÀ_t
;

160 #ñi‡
__GLIBC_FLT_EVAL_METHOD
 == 33

161 
_Flﬂt32x
 
	tÊﬂt_t
;

162 
_Flﬂt32x
 
	tdoubÀ_t
;

163 #ñi‡
__GLIBC_FLT_EVAL_METHOD
 == 64

164 
_Flﬂt64
 
	tÊﬂt_t
;

165 
_Flﬂt64
 
	tdoubÀ_t
;

166 #ñi‡
__GLIBC_FLT_EVAL_METHOD
 == 65

167 
_Flﬂt64x
 
	tÊﬂt_t
;

168 
_Flﬂt64x
 
	tdoubÀ_t
;

169 #ñi‡
__GLIBC_FLT_EVAL_METHOD
 == 128

170 
_Flﬂt128
 
	tÊﬂt_t
;

171 
_Flﬂt128
 
	tdoubÀ_t
;

172 #ñi‡
__GLIBC_FLT_EVAL_METHOD
 == 129

173 
_Flﬂt128x
 
	tÊﬂt_t
;

174 
_Flﬂt128x
 
	tdoubÀ_t
;

190 
	~<bôs/Â-logb.h
>

191 #ifde‡
__USE_ISOC99


192 #i‡
__FP_LOGB0_IS_MIN


193 
	#FP_ILOGB0
 (-2147483647 - 1)

	)

195 
	#FP_ILOGB0
 (-2147483647)

	)

197 #i‡
__FP_LOGBNAN_IS_MIN


198 
	#FP_ILOGBNAN
 (-2147483647 - 1)

	)

200 
	#FP_ILOGBNAN
 2147483647

	)

203 #i‡
__GLIBC_USE
 (
IEC_60559_BFP_EXT
)

204 #i‡
__WORDSIZE
 == 32

205 
	#__FP_LONG_MAX
 0x7fffffffL

	)

207 
	#__FP_LONG_MAX
 0x7fffffffffffffffL

	)

209 #i‡
__FP_LOGB0_IS_MIN


210 
	#FP_LLOGB0
 (-
__FP_LONG_MAX
 - 1)

	)

212 
	#FP_LLOGB0
 (-
__FP_LONG_MAX
)

	)

214 #i‡
__FP_LOGBNAN_IS_MIN


215 
	#FP_LLOGBNAN
 (-
__FP_LONG_MAX
 - 1)

	)

217 
	#FP_LLOGBNAN
 
__FP_LONG_MAX


	)

233 
	~<bôs/Â-Á°.h
>

235 #i‡
__GLIBC_USE
 (
IEC_60559_BFP_EXT
)

239 
	mFP_INT_UPWARD
 =

240 
	#FP_INT_UPWARD
 0

	)

241 
FP_INT_UPWARD
,

242 
	mFP_INT_DOWNWARD
 =

243 
	#FP_INT_DOWNWARD
 1

	)

244 
FP_INT_DOWNWARD
,

245 
	mFP_INT_TOWARDZERO
 =

246 
	#FP_INT_TOWARDZERO
 2

	)

247 
FP_INT_TOWARDZERO
,

248 
	mFP_INT_TONEARESTFROMZERO
 =

249 
	#FP_INT_TONEARESTFROMZERO
 3

	)

250 
FP_INT_TONEARESTFROMZERO
,

251 
	mFP_INT_TONEAREST
 =

252 
	#FP_INT_TONEAREST
 4

	)

253 
FP_INT_TONEAREST
,

262 
	#__SIMD_DECL
(
fun˘i⁄
Ë
	`__CONCAT
 (
__DECL_SIMD_
, fun˘i⁄)

	)

264 
	#__MATHCALL_VEC
(
fun˘i⁄
, 
suffix
, 
¨gs
) \

265 
	`__SIMD_DECL
 (
	`__MATH_PRECNAME
 (
fun˘i⁄
, 
suffix
)) \

266 
	`__MATHCALL
 (
fun˘i⁄
, 
suffix
, 
¨gs
)

	)

268 
	#__MATHDECL_VEC
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
) \

269 
	`__SIMD_DECL
 (
	`__MATH_PRECNAME
 (
fun˘i⁄
, 
suffix
)) \

270 
	`__MATHDECL
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
)

	)

272 
	#__MATHCALL
(
fun˘i⁄
,
suffix
, 
¨gs
) \

273 
	`__MATHDECL
 (
_MdoubÀ_
,
fun˘i⁄
,
suffix
, 
¨gs
)

	)

274 
	#__MATHDECL
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
) \

275 
	`__MATHDECL_1
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
); \

276 
	`__MATHDECL_1
(
ty≥
, 
	`__CONCAT
(
__
,
fun˘i⁄
),
suffix
, 
¨gs
)

	)

277 
	#__MATHCALLX
(
fun˘i⁄
,
suffix
, 
¨gs
, 
©åib
) \

278 
	`__MATHDECLX
 (
_MdoubÀ_
,
fun˘i⁄
,
suffix
, 
¨gs
, 
©åib
)

	)

279 
	#__MATHDECLX
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
, 
©åib
) \

280 
	`__MATHDECL_1
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
Ë
	`__©åibuã__
 (
©åib
); \

281 
	`__MATHDECL_1
(
ty≥
, 
	`__CONCAT
(
__
,
fun˘i⁄
),
suffix
, 
¨gs
Ë
	`__©åibuã__
 (
©åib
)

	)

282 
	#__MATHDECL_1
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
) \

283 
ty≥
 
	`__MATH_PRECNAME
(
fun˘i⁄
,
suffix
Ë
¨gs
 
__THROW


	)

285 
	#_MdoubÀ_
 

	)

286 
	#__MATH_PRECNAME
(
«me
,
r
Ë
	`__CONCAT
“ame,r)

	)

287 
	#__MATH_DECLARING_DOUBLE
 1

	)

288 
	#__MATH_DECLARING_FLOATN
 0

	)

289 
	~<bôs/m©hˇŒs-hñ≥r-fun˘i⁄s.h
>

290 
	~<bôs/m©hˇŒs.h
>

291 #unde‡
_MdoubÀ_


292 #unde‡
__MATH_PRECNAME


293 #unde‡
__MATH_DECLARING_DOUBLE


294 #unde‡
__MATH_DECLARING_FLOATN


296 #ifde‡
__USE_ISOC99


302 
	#_MdoubÀ_
 

	)

303 
	#__MATH_PRECNAME
(
«me
,
r
Ë«me##
f
##
	)
r

304 
	#__MATH_DECLARING_DOUBLE
 0

	)

305 
	#__MATH_DECLARING_FLOATN
 0

	)

306 
	~<bôs/m©hˇŒs-hñ≥r-fun˘i⁄s.h
>

307 
	~<bôs/m©hˇŒs.h
>

308 #unde‡
_MdoubÀ_


309 #unde‡
__MATH_PRECNAME


310 #unde‡
__MATH_DECLARING_DOUBLE


311 #unde‡
__MATH_DECLARING_FLOATN


313 #i‡!(
deföed
 
__NO_LONG_DOUBLE_MATH
 && deföed 
_LIBC
) \

314 || 
deföed
 
__LDBL_COMPAT
 \

315 || 
deföed
 
_LIBC_TEST


316 #ifde‡
__LDBL_COMPAT


318 #ifde‡
__USE_ISOC99


319 
	$__∆dbl_√xâow¨df
 (
__x
, 
__y
)

320 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

321 #ifde‡
__REDIRECT_NTH


322 
	`__REDIRECT_NTH
 (
√xâow¨df
, (
__x
, 
__y
),

323 
__∆dbl_√xâow¨df
)

324 
	`__©åibuã__
 ((
__c⁄°__
));

325 
	`__REDIRECT_NTH
 (
√xâow¨d
, (
__x
, 
__y
),

326 
√xè·î
Ë
	`__©åibuã__
 ((
__c⁄°__
));

327 
	`__REDIRECT_NTH
 (
√xâow¨dl
,

328 (
__x
, 
__y
),

329 
√xè·î
Ë
	`__©åibuã__
 ((
__c⁄°__
));

333 #unde‡
__MATHDECL_1


334 
	#__MATHDECL_2
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
, 
Æüs
) \

335 
ty≥
 
	`__REDIRECT_NTH
(
	`__MATH_PRECNAME
(
fun˘i⁄
,
suffix
), \

336 
¨gs
, 
Æüs
)

	)

337 
	#__MATHDECL_1
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
) \

338 
	`__MATHDECL_2
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
, 
	`__CONCAT
(fun˘i⁄,suffix))

	)

344 
	#_MdoubÀ_
 

	)

345 
	#__MATH_PRECNAME
(
«me
,
r
Ë«me##
l
##
	)
r

346 
	#__MATH_DECLARING_DOUBLE
 0

	)

347 
	#__MATH_DECLARING_FLOATN
 0

	)

348 
	#__MATH_DECLARE_LDOUBLE
 1

	)

349 
	~<bôs/m©hˇŒs-hñ≥r-fun˘i⁄s.h
>

350 
	~<bôs/m©hˇŒs.h
>

351 #unde‡
_MdoubÀ_


352 #unde‡
__MATH_PRECNAME


353 #unde‡
__MATH_DECLARING_DOUBLE


354 #unde‡
__MATH_DECLARING_FLOATN


363 #i‡
__HAVE_DISTINCT_FLOAT16
 || (
__HAVE_FLOAT16
 && !
deföed
 
_LIBC
)

364 
	#_MdoubÀ_
 
_Flﬂt16


	)

365 
	#__MATH_PRECNAME
(
«me
,
r
Ë«me##
f16
##
	)
r

366 
	#__MATH_DECLARING_DOUBLE
 0

	)

367 
	#__MATH_DECLARING_FLOATN
 1

	)

368 #i‡
__HAVE_DISTINCT_FLOAT16


369 
	~<bôs/m©hˇŒs-hñ≥r-fun˘i⁄s.h
>

371 #i‡
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

372 
	~<bôs/m©hˇŒs.h
>

374 #unde‡
_MdoubÀ_


375 #unde‡
__MATH_PRECNAME


376 #unde‡
__MATH_DECLARING_DOUBLE


377 #unde‡
__MATH_DECLARING_FLOATN


380 #i‡
__HAVE_DISTINCT_FLOAT32
 || (
__HAVE_FLOAT32
 && !
deföed
 
_LIBC
)

381 
	#_MdoubÀ_
 
_Flﬂt32


	)

382 
	#__MATH_PRECNAME
(
«me
,
r
Ë«me##
f32
##
	)
r

383 
	#__MATH_DECLARING_DOUBLE
 0

	)

384 
	#__MATH_DECLARING_FLOATN
 1

	)

385 #i‡
__HAVE_DISTINCT_FLOAT32


386 
	~<bôs/m©hˇŒs-hñ≥r-fun˘i⁄s.h
>

388 #i‡
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

389 
	~<bôs/m©hˇŒs.h
>

391 #unde‡
_MdoubÀ_


392 #unde‡
__MATH_PRECNAME


393 #unde‡
__MATH_DECLARING_DOUBLE


394 #unde‡
__MATH_DECLARING_FLOATN


397 #i‡
__HAVE_DISTINCT_FLOAT64
 || (
__HAVE_FLOAT64
 && !
deföed
 
_LIBC
)

398 
	#_MdoubÀ_
 
_Flﬂt64


	)

399 
	#__MATH_PRECNAME
(
«me
,
r
Ë«me##
f64
##
	)
r

400 
	#__MATH_DECLARING_DOUBLE
 0

	)

401 
	#__MATH_DECLARING_FLOATN
 1

	)

402 #i‡
__HAVE_DISTINCT_FLOAT64


403 
	~<bôs/m©hˇŒs-hñ≥r-fun˘i⁄s.h
>

405 #i‡
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

406 
	~<bôs/m©hˇŒs.h
>

408 #unde‡
_MdoubÀ_


409 #unde‡
__MATH_PRECNAME


410 #unde‡
__MATH_DECLARING_DOUBLE


411 #unde‡
__MATH_DECLARING_FLOATN


414 #i‡
__HAVE_DISTINCT_FLOAT128
 || (
__HAVE_FLOAT128
 && !
deföed
 
_LIBC
)

415 
	#_MdoubÀ_
 
_Flﬂt128


	)

416 
	#__MATH_PRECNAME
(
«me
,
r
Ë«me##
f128
##
	)
r

417 
	#__MATH_DECLARING_DOUBLE
 0

	)

418 
	#__MATH_DECLARING_FLOATN
 1

	)

419 #i‡
__HAVE_DISTINCT_FLOAT128


420 
	~<bôs/m©hˇŒs-hñ≥r-fun˘i⁄s.h
>

422 #i‡
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

423 
	~<bôs/m©hˇŒs.h
>

425 #unde‡
_MdoubÀ_


426 #unde‡
__MATH_PRECNAME


427 #unde‡
__MATH_DECLARING_DOUBLE


428 #unde‡
__MATH_DECLARING_FLOATN


431 #i‡
__HAVE_DISTINCT_FLOAT32X
 || (
__HAVE_FLOAT32X
 && !
deföed
 
_LIBC
)

432 
	#_MdoubÀ_
 
_Flﬂt32x


	)

433 
	#__MATH_PRECNAME
(
«me
,
r
Ë«me##
f32x
##
	)
r

434 
	#__MATH_DECLARING_DOUBLE
 0

	)

435 
	#__MATH_DECLARING_FLOATN
 1

	)

436 #i‡
__HAVE_DISTINCT_FLOAT32X


437 
	~<bôs/m©hˇŒs-hñ≥r-fun˘i⁄s.h
>

439 #i‡
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

440 
	~<bôs/m©hˇŒs.h
>

442 #unde‡
_MdoubÀ_


443 #unde‡
__MATH_PRECNAME


444 #unde‡
__MATH_DECLARING_DOUBLE


445 #unde‡
__MATH_DECLARING_FLOATN


448 #i‡
__HAVE_DISTINCT_FLOAT64X
 || (
__HAVE_FLOAT64X
 && !
deföed
 
_LIBC
)

449 
	#_MdoubÀ_
 
_Flﬂt64x


	)

450 
	#__MATH_PRECNAME
(
«me
,
r
Ë«me##
f64x
##
	)
r

451 
	#__MATH_DECLARING_DOUBLE
 0

	)

452 
	#__MATH_DECLARING_FLOATN
 1

	)

453 #i‡
__HAVE_DISTINCT_FLOAT64X


454 
	~<bôs/m©hˇŒs-hñ≥r-fun˘i⁄s.h
>

456 #i‡
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

457 
	~<bôs/m©hˇŒs.h
>

459 #unde‡
_MdoubÀ_


460 #unde‡
__MATH_PRECNAME


461 #unde‡
__MATH_DECLARING_DOUBLE


462 #unde‡
__MATH_DECLARING_FLOATN


465 #i‡
__HAVE_DISTINCT_FLOAT128X
 || (
__HAVE_FLOAT128X
 && !
deföed
 
_LIBC
)

466 
	#_MdoubÀ_
 
_Flﬂt128x


	)

467 
	#__MATH_PRECNAME
(
«me
,
r
Ë«me##
f128x
##
	)
r

468 
	#__MATH_DECLARING_DOUBLE
 0

	)

469 
	#__MATH_DECLARING_FLOATN
 1

	)

470 #i‡
__HAVE_DISTINCT_FLOAT128X


471 
	~<bôs/m©hˇŒs-hñ≥r-fun˘i⁄s.h
>

473 #i‡
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

474 
	~<bôs/m©hˇŒs.h
>

476 #unde‡
_MdoubÀ_


477 #unde‡
__MATH_PRECNAME


478 #unde‡
__MATH_DECLARING_DOUBLE


479 #unde‡
__MATH_DECLARING_FLOATN


482 #unde‡
__MATHDECL_1


483 #unde‡
__MATHDECL


484 #unde‡
__MATHCALL


487 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


489 
signgam
;

492 #i‡(
__HAVE_DISTINCT_FLOAT16
 \

493 || 
__HAVE_DISTINCT_FLOAT32
 \

494 || 
__HAVE_DISTINCT_FLOAT64
 \

495 || 
__HAVE_DISTINCT_FLOAT32X
 \

496 || 
__HAVE_DISTINCT_FLOAT64X
 \

497 || 
__HAVE_DISTINCT_FLOAT128X
)

510 #ifde‡
__NO_LONG_DOUBLE_MATH


511 #i‡
__HAVE_DISTINCT_FLOAT128


514 
	#__MATH_TG
(
TG_ARG
, 
FUNC
, 
ARGS
) \

515 ( (
TG_ARG
Ë= (Ë? 
FUNC
 ## 
f
 
ARGS
 : FUNC ARGS)

	)

516 #ñi‡
__HAVE_DISTINCT_FLOAT128


517 #i‡
__HAVE_GENERIC_SELECTION


518 #i‡
__HAVE_FLOATN_NOT_TYPEDEF
 && 
__HAVE_FLOAT32


519 
	#__MATH_TG_F32
(
FUNC
, 
ARGS
Ë
_Flﬂt32
: FUNC ## 
f
 ARGS,

	)

521 
	#__MATH_TG_F32
(
FUNC
, 
ARGS
)

	)

523 #i‡
__HAVE_FLOATN_NOT_TYPEDEF
 && 
__HAVE_FLOAT64X


524 #i‡
__HAVE_FLOAT64X_LONG_DOUBLE


525 
	#__MATH_TG_F64X
(
FUNC
, 
ARGS
Ë
_Flﬂt64x
: FUNC ## 
l
 ARGS,

	)

527 
	#__MATH_TG_F64X
(
FUNC
, 
ARGS
Ë
_Flﬂt64x
: FUNC ## 
f128
 ARGS,

	)

530 
	#__MATH_TG_F64X
(
FUNC
, 
ARGS
)

	)

532 
	#__MATH_TG
(
TG_ARG
, 
FUNC
, 
ARGS
) \

533 
	`_Gíîic
 ((
TG_ARG
), \

534 : 
FUNC
 ## 
f
 
ARGS
, \

535 
	`__MATH_TG_F32
 (
FUNC
, 
ARGS
) \

536 : 
FUNC
 
ARGS
, \

537 : 
FUNC
 ## 
l
 
ARGS
, \

538 
	`__MATH_TG_F64X
 (
FUNC
, 
ARGS
) \

539 
_Flﬂt128
: 
FUNC
 ## 
f128
 
ARGS
)

	)

541 #i‡
__HAVE_FLOATN_NOT_TYPEDEF


544 
	#__MATH_TG
(
TG_ARG
, 
FUNC
, 
ARGS
) \

545 
__buûtö_choo£_ex¥
 \

546 (
	`__buûtö_ty≥s_com∑tibÀ_p
 (
	`__ty≥of
 (
TG_ARG
), ), \

547 
FUNC
 ## 
f
 
ARGS
, \

548 
__buûtö_choo£_ex¥
 \

549 (
	`__buûtö_ty≥s_com∑tibÀ_p
 (
	`__ty≥of
 (
TG_ARG
), ), \

550 
FUNC
 
ARGS
, \

551 
__buûtö_choo£_ex¥
 \

552 (
	`__buûtö_ty≥s_com∑tibÀ_p
 (
	`__ty≥of
 (
TG_ARG
), ), \

553 
FUNC
 ## 
l
 
ARGS
, \

554 
FUNC
 ## 
f128
 
ARGS
)))

	)

557 
	#__MATH_TG
(
TG_ARG
, 
FUNC
, 
ARGS
) \

558 ( (
TG_ARG
) ==  () \

559 ? 
FUNC
 ## 
f
 
ARGS
 \

560 :  (
TG_ARG
) ==  () \

561 ? 
FUNC
 
ARGS
 \

562 : 
FUNC
 ## 
l
 
ARGS
)

	)

566 #ifde‡
__USE_ISOC99


571 
FP_NAN
 =

572 
	#FP_NAN
 0

	)

573 
FP_NAN
,

574 
FP_INFINITE
 =

575 
	#FP_INFINITE
 1

	)

576 
FP_INFINITE
,

577 
FP_ZERO
 =

578 
	#FP_ZERO
 2

	)

579 
FP_ZERO
,

580 
FP_SUBNORMAL
 =

581 
	#FP_SUBNORMAL
 3

	)

582 
FP_SUBNORMAL
,

583 
FP_NORMAL
 =

584 
	#FP_NORMAL
 4

	)

585 
FP_NORMAL


593 #i‡
	`__GNUC_PREREQ
 (4,4Ë&& !
deföed
 
__SUPPORT_SNAN__
 \

594 && (!
deföed
 
__OPTIMIZE_SIZE__
 || deföed 
__˝lu•lus
)

601 
	#Â˛assify
(
x
Ë
	`__buûtö_Â˛assify
 (
FP_NAN
, 
FP_INFINITE
, \

602 
FP_NORMAL
, 
FP_SUBNORMAL
, 
FP_ZERO
, 
x
)

	)

604 
	#Â˛assify
(
x
Ë
	`__MATH_TG
 ((x), 
__Â˛assify
, (x))

	)

608 #i‡
	`__GNUC_PREREQ
 (6,0)

609 
	#signbô
(
x
Ë
	`__buûtö_signbô
 (x)

	)

610 #ñi‡
deföed
 
__˝lu•lus


618 
	#signbô
(
x
Ë
	`__buûtö_signbôl
 (x)

	)

619 #ñi‡
	`__GNUC_PREREQ
 (4,0)

620 
	#signbô
(
x
Ë
	`__MATH_TG
 ((x), 
__buûtö_signbô
, (x))

	)

622 
	#signbô
(
x
Ë
	`__MATH_TG
 ((x), 
__signbô
, (x))

	)

626 #i‡
	`__GNUC_PREREQ
 (4,4Ë&& !
deföed
 
__SUPPORT_SNAN__


627 
	#isföôe
(
x
Ë
	`__buûtö_isföôe
 (x)

	)

629 
	#isföôe
(
x
Ë
	`__MATH_TG
 ((x), 
__föôe
, (x))

	)

633 #i‡
	`__GNUC_PREREQ
 (4,4Ë&& !
deföed
 
__SUPPORT_SNAN__


634 
	#i¢‹mÆ
(
x
Ë
	`__buûtö_i¢‹mÆ
 (x)

	)

636 
	#i¢‹mÆ
(
x
Ë(
	`Â˛assify
 (xË=
FP_NORMAL
)

	)

641 #i‡
	`__GNUC_PREREQ
 (4,4Ë&& !
deföed
 
__SUPPORT_SNAN__


642 
	#i¢™
(
x
Ë
	`__buûtö_i¢™
 (x)

	)

644 
	#i¢™
(
x
Ë
	`__MATH_TG
 ((x), 
__i¢™
, (x))

	)

648 #i‡
__HAVE_DISTINCT_FLOAT128
 && !
	`__GNUC_PREREQ
 (7,0) \

649 && !
deföed
 
__SUPPORT_SNAN__
 && !deföed 
__˝lu•lus


655 
	#isöf
(
x
) \

656 (
	`__buûtö_ty≥s_com∑tibÀ_p
 (
	`__ty≥of
 (
x
), 
_Flﬂt128
) \

657 ? 
	`__isöff128
 (
x
Ë: 
	`__buûtö_isöf_sign
 (x))

	)

658 #ñi‡
	`__GNUC_PREREQ
 (4,4Ë&& !
deföed
 
__SUPPORT_SNAN__


659 
	#isöf
(
x
Ë
	`__buûtö_isöf_sign
 (x)

	)

661 
	#isöf
(
x
Ë
	`__MATH_TG
 ((x), 
__isöf
, (x))

	)

665 
	#MATH_ERRNO
 1

	)

666 
	#MATH_ERREXCEPT
 2

	)

673 #ifde‡
__FAST_MATH__


674 
	#m©h_îrh™dlög
 0

	)

675 #ñi‡
deföed
 
__NO_MATH_ERRNO__


676 
	#m©h_îrh™dlög
 (
MATH_ERREXCEPT
)

	)

678 
	#m©h_îrh™dlög
 (
MATH_ERRNO
 | 
MATH_ERREXCEPT
)

	)

683 #i‡
	`__GLIBC_USE
 (
IEC_60559_BFP_EXT
)

684 
	~<bôs/isˇn⁄iˇl.h
>

687 #i‚de‡
__˝lu•lus


688 
	#issig«lög
(
x
Ë
	`__MATH_TG
 ((x), 
__issig«lög
, (x))

	)

697 
ölöe
 
	`issig«lög
 (
__vÆ
Ë{  
	`__issig«lögf
 (__val); }

698 
ölöe
 
	`issig«lög
 (
__vÆ
Ë{  
	`__issig«lög
 (__val); }

699 
ölöe
 

700 
	`issig«lög
 (
__vÆ
)

702 #ifde‡
__NO_LONG_DOUBLE_MATH


703  
	`__issig«lög
 (
__vÆ
);

705  
	`__issig«lögl
 (
__vÆ
);

708 #i‡
__HAVE_DISTINCT_FLOAT128


709 
ölöe
 
	`issig«lög
 (
_Flﬂt128
 
__vÆ
Ë{  
	`__issig«lögf128
 (__val); }

711 
	}
}

715 
	#issubn‹mÆ
(
x
Ë(
	`Â˛assify
 (xË=
FP_SUBNORMAL
)

	)

718 #i‚de‡
__˝lu•lus


719 #ifde‡
__SUPPORT_SNAN__


720 
	#iszîo
(
x
Ë(
	`Â˛assify
 (xË=
FP_ZERO
)

	)

722 
	#iszîo
(
x
Ë(((
	`__ty≥of
 (x)Ë(x)Ë=0)

	)

726 #ifde‡
__SUPPORT_SNAN__


727 
ölöe
 

728 
iszîo
 (
__vÆ
)

730  
__Â˛assifyf
 (
__vÆ
Ë=
FP_ZERO
;

732 
ölöe
 

733 
iszîo
 (
__vÆ
)

735  
__Â˛assify
 (
__vÆ
Ë=
FP_ZERO
;

737 
ölöe
 

738 
iszîo
 (
__vÆ
)

740 #ifde‡
__NO_LONG_DOUBLE_MATH


741  
__Â˛assify
 (
__vÆ
Ë=
FP_ZERO
;

743  
__Â˛assifyl
 (
__vÆ
Ë=
FP_ZERO
;

746 #i‡
__HAVE_DISTINCT_FLOAT128


747 
ölöe
 

748 
iszîo
 (
_Flﬂt128
 
__vÆ
)

750  
__Â˛assifyf128
 (
__vÆ
Ë=
FP_ZERO
;

754 
ãm∂©e
 <
˛ass
 
__T
> 
ölöe
 
boﬁ


755 
iszîo
 (
__T
 
__vÆ
)

757  
__vÆ
 == 0;

764 #ifde‡
__USE_XOPEN


766 
	#MAXFLOAT
 3.40282347e+38F

	)

771 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


772 
	#M_E
 2.7182818284590452354

	)

773 
	#M_LOG2E
 1.4426950408889634074

	)

774 
	#M_LOG10E
 0.43429448190325182765

	)

775 
	#M_LN2
 0.69314718055994530942

	)

776 
	#M_LN10
 2.30258509299404568402

	)

777 
	#M_PI
 3.14159265358979323846

	)

778 
	#M_PI_2
 1.57079632679489661923

	)

779 
	#M_PI_4
 0.78539816339744830962

	)

780 
	#M_1_PI
 0.31830988618379067154

	)

781 
	#M_2_PI
 0.63661977236758134308

	)

782 
	#M_2_SQRTPI
 1.12837916709551257390

	)

783 
	#M_SQRT2
 1.41421356237309504880

	)

784 
	#M_SQRT1_2
 0.70710678118654752440

	)

790 #ifde‡
__USE_GNU


791 
	#M_El
 2.718281828459045235360287471352662498L

	)

792 
	#M_LOG2El
 1.442695040888963407359924681001892137L

	)

793 
	#M_LOG10El
 0.434294481903251827651128918916605082L

	)

794 
	#M_LN2l
 0.693147180559945309417232121458176568L

	)

795 
	#M_LN10l
 2.302585092994045684017991454684364208L

	)

796 
	#M_PIl
 3.141592653589793238462643383279502884L

	)

797 
	#M_PI_2l
 1.570796326794896619231321691639751442L

	)

798 
	#M_PI_4l
 0.785398163397448309615660845819875721L

	)

799 
	#M_1_PIl
 0.318309886183790671537767526745028724L

	)

800 
	#M_2_PIl
 0.636619772367581343075535053490057448L

	)

801 
	#M_2_SQRTPIl
 1.128379167095512573896158903121545172L

	)

802 
	#M_SQRT2l
 1.414213562373095048801688724209698079L

	)

803 
	#M_SQRT1_2l
 0.707106781186547524400844362104849039L

	)

806 #i‡
__HAVE_FLOAT16
 && 
deföed
 
__USE_GNU


807 
	#M_Ef16
 
	`__f16
 (2.718281828459045235360287471352662498Ë

	)

808 
	#M_LOG2Ef16
 
	`__f16
 (1.442695040888963407359924681001892137Ë

	)

809 
	#M_LOG10Ef16
 
	`__f16
 (0.434294481903251827651128918916605082Ë

	)

810 
	#M_LN2f16
 
	`__f16
 (0.693147180559945309417232121458176568Ë

	)

811 
	#M_LN10f16
 
	`__f16
 (2.302585092994045684017991454684364208Ë

	)

812 
	#M_PIf16
 
	`__f16
 (3.141592653589793238462643383279502884Ë

	)

813 
	#M_PI_2f16
 
	`__f16
 (1.570796326794896619231321691639751442Ë

	)

814 
	#M_PI_4f16
 
	`__f16
 (0.785398163397448309615660845819875721Ë

	)

815 
	#M_1_PIf16
 
	`__f16
 (0.318309886183790671537767526745028724Ë

	)

816 
	#M_2_PIf16
 
	`__f16
 (0.636619772367581343075535053490057448Ë

	)

817 
	#M_2_SQRTPIf16
 
	`__f16
 (1.128379167095512573896158903121545172Ë

	)

818 
	#M_SQRT2f16
 
	`__f16
 (1.414213562373095048801688724209698079Ë

	)

819 
	#M_SQRT1_2f16
 
	`__f16
 (0.707106781186547524400844362104849039Ë

	)

822 #i‡
__HAVE_FLOAT32
 && 
deföed
 
__USE_GNU


823 
	#M_Ef32
 
	`__f32
 (2.718281828459045235360287471352662498Ë

	)

824 
	#M_LOG2Ef32
 
	`__f32
 (1.442695040888963407359924681001892137Ë

	)

825 
	#M_LOG10Ef32
 
	`__f32
 (0.434294481903251827651128918916605082Ë

	)

826 
	#M_LN2f32
 
	`__f32
 (0.693147180559945309417232121458176568Ë

	)

827 
	#M_LN10f32
 
	`__f32
 (2.302585092994045684017991454684364208Ë

	)

828 
	#M_PIf32
 
	`__f32
 (3.141592653589793238462643383279502884Ë

	)

829 
	#M_PI_2f32
 
	`__f32
 (1.570796326794896619231321691639751442Ë

	)

830 
	#M_PI_4f32
 
	`__f32
 (0.785398163397448309615660845819875721Ë

	)

831 
	#M_1_PIf32
 
	`__f32
 (0.318309886183790671537767526745028724Ë

	)

832 
	#M_2_PIf32
 
	`__f32
 (0.636619772367581343075535053490057448Ë

	)

833 
	#M_2_SQRTPIf32
 
	`__f32
 (1.128379167095512573896158903121545172Ë

	)

834 
	#M_SQRT2f32
 
	`__f32
 (1.414213562373095048801688724209698079Ë

	)

835 
	#M_SQRT1_2f32
 
	`__f32
 (0.707106781186547524400844362104849039Ë

	)

838 #i‡
__HAVE_FLOAT64
 && 
deföed
 
__USE_GNU


839 
	#M_Ef64
 
	`__f64
 (2.718281828459045235360287471352662498Ë

	)

840 
	#M_LOG2Ef64
 
	`__f64
 (1.442695040888963407359924681001892137Ë

	)

841 
	#M_LOG10Ef64
 
	`__f64
 (0.434294481903251827651128918916605082Ë

	)

842 
	#M_LN2f64
 
	`__f64
 (0.693147180559945309417232121458176568Ë

	)

843 
	#M_LN10f64
 
	`__f64
 (2.302585092994045684017991454684364208Ë

	)

844 
	#M_PIf64
 
	`__f64
 (3.141592653589793238462643383279502884Ë

	)

845 
	#M_PI_2f64
 
	`__f64
 (1.570796326794896619231321691639751442Ë

	)

846 
	#M_PI_4f64
 
	`__f64
 (0.785398163397448309615660845819875721Ë

	)

847 
	#M_1_PIf64
 
	`__f64
 (0.318309886183790671537767526745028724Ë

	)

848 
	#M_2_PIf64
 
	`__f64
 (0.636619772367581343075535053490057448Ë

	)

849 
	#M_2_SQRTPIf64
 
	`__f64
 (1.128379167095512573896158903121545172Ë

	)

850 
	#M_SQRT2f64
 
	`__f64
 (1.414213562373095048801688724209698079Ë

	)

851 
	#M_SQRT1_2f64
 
	`__f64
 (0.707106781186547524400844362104849039Ë

	)

854 #i‡
__HAVE_FLOAT128
 && 
deföed
 
__USE_GNU


855 
	#M_Ef128
 
	`__f128
 (2.718281828459045235360287471352662498Ë

	)

856 
	#M_LOG2Ef128
 
	`__f128
 (1.442695040888963407359924681001892137Ë

	)

857 
	#M_LOG10Ef128
 
	`__f128
 (0.434294481903251827651128918916605082Ë

	)

858 
	#M_LN2f128
 
	`__f128
 (0.693147180559945309417232121458176568Ë

	)

859 
	#M_LN10f128
 
	`__f128
 (2.302585092994045684017991454684364208Ë

	)

860 
	#M_PIf128
 
	`__f128
 (3.141592653589793238462643383279502884Ë

	)

861 
	#M_PI_2f128
 
	`__f128
 (1.570796326794896619231321691639751442Ë

	)

862 
	#M_PI_4f128
 
	`__f128
 (0.785398163397448309615660845819875721Ë

	)

863 
	#M_1_PIf128
 
	`__f128
 (0.318309886183790671537767526745028724Ë

	)

864 
	#M_2_PIf128
 
	`__f128
 (0.636619772367581343075535053490057448Ë

	)

865 
	#M_2_SQRTPIf128
 
	`__f128
 (1.128379167095512573896158903121545172Ë

	)

866 
	#M_SQRT2f128
 
	`__f128
 (1.414213562373095048801688724209698079Ë

	)

867 
	#M_SQRT1_2f128
 
	`__f128
 (0.707106781186547524400844362104849039Ë

	)

870 #i‡
__HAVE_FLOAT32X
 && 
deföed
 
__USE_GNU


871 
	#M_Ef32x
 
	`__f32x
 (2.718281828459045235360287471352662498Ë

	)

872 
	#M_LOG2Ef32x
 
	`__f32x
 (1.442695040888963407359924681001892137Ë

	)

873 
	#M_LOG10Ef32x
 
	`__f32x
 (0.434294481903251827651128918916605082Ë

	)

874 
	#M_LN2f32x
 
	`__f32x
 (0.693147180559945309417232121458176568Ë

	)

875 
	#M_LN10f32x
 
	`__f32x
 (2.302585092994045684017991454684364208Ë

	)

876 
	#M_PIf32x
 
	`__f32x
 (3.141592653589793238462643383279502884Ë

	)

877 
	#M_PI_2f32x
 
	`__f32x
 (1.570796326794896619231321691639751442Ë

	)

878 
	#M_PI_4f32x
 
	`__f32x
 (0.785398163397448309615660845819875721Ë

	)

879 
	#M_1_PIf32x
 
	`__f32x
 (0.318309886183790671537767526745028724Ë

	)

880 
	#M_2_PIf32x
 
	`__f32x
 (0.636619772367581343075535053490057448Ë

	)

881 
	#M_2_SQRTPIf32x
 
	`__f32x
 (1.128379167095512573896158903121545172Ë

	)

882 
	#M_SQRT2f32x
 
	`__f32x
 (1.414213562373095048801688724209698079Ë

	)

883 
	#M_SQRT1_2f32x
 
	`__f32x
 (0.707106781186547524400844362104849039Ë

	)

886 #i‡
__HAVE_FLOAT64X
 && 
deföed
 
__USE_GNU


887 
	#M_Ef64x
 
	`__f64x
 (2.718281828459045235360287471352662498Ë

	)

888 
	#M_LOG2Ef64x
 
	`__f64x
 (1.442695040888963407359924681001892137Ë

	)

889 
	#M_LOG10Ef64x
 
	`__f64x
 (0.434294481903251827651128918916605082Ë

	)

890 
	#M_LN2f64x
 
	`__f64x
 (0.693147180559945309417232121458176568Ë

	)

891 
	#M_LN10f64x
 
	`__f64x
 (2.302585092994045684017991454684364208Ë

	)

892 
	#M_PIf64x
 
	`__f64x
 (3.141592653589793238462643383279502884Ë

	)

893 
	#M_PI_2f64x
 
	`__f64x
 (1.570796326794896619231321691639751442Ë

	)

894 
	#M_PI_4f64x
 
	`__f64x
 (0.785398163397448309615660845819875721Ë

	)

895 
	#M_1_PIf64x
 
	`__f64x
 (0.318309886183790671537767526745028724Ë

	)

896 
	#M_2_PIf64x
 
	`__f64x
 (0.636619772367581343075535053490057448Ë

	)

897 
	#M_2_SQRTPIf64x
 
	`__f64x
 (1.128379167095512573896158903121545172Ë

	)

898 
	#M_SQRT2f64x
 
	`__f64x
 (1.414213562373095048801688724209698079Ë

	)

899 
	#M_SQRT1_2f64x
 
	`__f64x
 (0.707106781186547524400844362104849039Ë

	)

902 #i‡
__HAVE_FLOAT128X
 && 
deföed
 
__USE_GNU


909 #i‡
deföed
 
__STRICT_ANSI__
 && !deföed 
__NO_MATH_INLINES


910 
	#__NO_MATH_INLINES
 1

	)

913 #ifde‡
__USE_ISOC99


914 #i‡
__GNUC_PREREQ
 (3, 1)

921 
	#isgª©î
(
x
, 
y
Ë
	`__buûtö_isgª©î
(x, y)

	)

922 
	#isgª©îequÆ
(
x
, 
y
Ë
	`__buûtö_isgª©îequÆ
(x, y)

	)

923 
	#i¶ess
(
x
, 
y
Ë
	`__buûtö_i¶ess
(x, y)

	)

924 
	#i¶es£quÆ
(
x
, 
y
Ë
	`__buûtö_i¶es£quÆ
(x, y)

	)

925 
	#i¶essgª©î
(
x
, 
y
Ë
	`__buûtö_i¶essgª©î
(x, y)

	)

926 
	#isun‹dîed
(
x
, 
y
Ë
	`__buûtö_isun‹dîed
(x, y)

	)

928 
	#isgª©î
(
x
, 
y
) \

929 (
	`__exãnsi⁄__
 ({ 
	`__ty≥of__
 (
x
Ë
__x
 = (x); __ty≥of__ (
y
Ë
__y
 = (y); \

930 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x > __y; }))

	)

931 
	#isgª©îequÆ
(
x
, 
y
) \

932 (
	`__exãnsi⁄__
 ({ 
	`__ty≥of__
 (
x
Ë
__x
 = (x); __ty≥of__ (
y
Ë
__y
 = (y); \

933 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x >__y; }))

	)

934 
	#i¶ess
(
x
, 
y
) \

935 (
	`__exãnsi⁄__
 ({ 
	`__ty≥of__
 (
x
Ë
__x
 = (x); __ty≥of__ (
y
Ë
__y
 = (y); \

936 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x < __y; }))

	)

937 
	#i¶es£quÆ
(
x
, 
y
) \

938 (
	`__exãnsi⁄__
 ({ 
	`__ty≥of__
 (
x
Ë
__x
 = (x); __ty≥of__ (
y
Ë
__y
 = (y); \

939 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x <__y; }))

	)

940 
	#i¶essgª©î
(
x
, 
y
) \

941 (
	`__exãnsi⁄__
 ({ 
	`__ty≥of__
 (
x
Ë
__x
 = (x); __ty≥of__ (
y
Ë
__y
 = (y); \

942 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x !__y; }))

	)

944 
	#isun‹dîed
(
x
, 
y
) \

945 (
	`__exãnsi⁄__
 ({ 
	`__ty≥of__
 (
x
Ë
__u
 = (x); __ty≥of__ (
y
Ë
__v
 = (y); \

946 
__u
 !
__v
 && (__u !__u || __v !__v); }))

	)

951 #ifde‡
__USE_EXTERN_INLINES


952 
	~<bôs/m©hölöe.h
>

957 #i‡
deföed
 
__FINITE_MATH_ONLY__
 && __FINITE_MATH_ONLY__ > 0

960 
	#_MdoubÀ_
 

	)

961 
	#__MATH_DECLARING_DOUBLE
 1

	)

962 
	#__MATH_DECLARING_FLOATN
 0

	)

963 
	#__REDIRFROM_X
(
fun˘i⁄
, 
ªíå™t
) \

964 
fun˘i⁄
 ## 
ªíå™t


	)

965 
	#__REDIRTO_X
(
fun˘i⁄
, 
ªíå™t
) \

966 
__
 ## 
fun˘i⁄
 ## 
ªíå™t
 ## 
_föôe


	)

967 
	~<bôs/m©h-föôe.h
>

968 #unde‡
_MdoubÀ_


969 #unde‡
__MATH_DECLARING_DOUBLE


970 #unde‡
__MATH_DECLARING_FLOATN


971 #unde‡
__REDIRFROM_X


972 #unde‡
__REDIRTO_X


976 #ifde‡
__USE_ISOC99


979 
	#_MdoubÀ_
 

	)

980 
	#__MATH_DECLARING_DOUBLE
 0

	)

981 
	#__MATH_DECLARING_FLOATN
 0

	)

982 
	#__REDIRFROM_X
(
fun˘i⁄
, 
ªíå™t
) \

983 
fun˘i⁄
 ## 
f
 ## 
ªíå™t


	)

984 
	#__REDIRTO_X
(
fun˘i⁄
, 
ªíå™t
) \

985 
__
 ## 
fun˘i⁄
 ## 
f
 ## 
ªíå™t
 ## 
_föôe


	)

986 
	~<bôs/m©h-föôe.h
>

987 #unde‡
_MdoubÀ_


988 #unde‡
__MATH_DECLARING_DOUBLE


989 #unde‡
__MATH_DECLARING_FLOATN


990 #unde‡
__REDIRFROM_X


991 #unde‡
__REDIRTO_X


994 #ifde‡
__MATH_DECLARE_LDOUBLE


995 
	#_MdoubÀ_
 

	)

996 
	#__MATH_DECLARING_DOUBLE
 0

	)

997 
	#__MATH_DECLARING_FLOATN
 0

	)

998 
	#__REDIRFROM_X
(
fun˘i⁄
, 
ªíå™t
) \

999 
fun˘i⁄
 ## 
l
 ## 
ªíå™t


	)

1000 #ifde‡
__NO_LONG_DOUBLE_MATH


1001 
	#__REDIRTO_X
(
fun˘i⁄
, 
ªíå™t
) \

1002 
__
 ## 
fun˘i⁄
 ## 
ªíå™t
 ## 
_föôe


	)

1004 
	#__REDIRTO_X
(
fun˘i⁄
, 
ªíå™t
) \

1005 
__
 ## 
fun˘i⁄
 ## 
l
 ## 
ªíå™t
 ## 
_föôe


	)

1007 
	~<bôs/m©h-föôe.h
>

1008 #unde‡
_MdoubÀ_


1009 #unde‡
__MATH_DECLARING_DOUBLE


1010 #unde‡
__MATH_DECLARING_FLOATN


1011 #unde‡
__REDIRFROM_X


1012 #unde‡
__REDIRTO_X


1019 #i‡(
__HAVE_DISTINCT_FLOAT16
 || (
__HAVE_FLOAT16
 && !
deföed
 
_LIBC
)) \

1020 && 
	$__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

1021 
	#_MdoubÀ_
 
_Flﬂt16


	)

1022 
	#__MATH_DECLARING_DOUBLE
 0

	)

1023 
	#__MATH_DECLARING_FLOATN
 1

	)

1024 
	#__REDIRFROM_X
(
fun˘i⁄
, 
ªíå™t
) \

1025 
fun˘i⁄
 ## 
f16
 ## 
ªíå™t


	)

1026 #i‡
__HAVE_DISTINCT_FLOAT16


1027 
	#__REDIRTO_X
(
fun˘i⁄
, 
ªíå™t
) \

1028 
__
 ## 
fun˘i⁄
 ## 
f16
 ## 
ªíå™t
 ## 
_föôe


	)

1032 
	~<bôs/m©h-föôe.h
>

1033 #unde‡
_MdoubÀ_


1034 #unde‡
__MATH_DECLARING_DOUBLE


1035 #unde‡
__MATH_DECLARING_FLOATN


1036 #unde‡
__REDIRFROM_X


1037 #unde‡
__REDIRTO_X


1040 #i‡(
__HAVE_DISTINCT_FLOAT32
 || (
__HAVE_FLOAT32
 && !
deföed
 
_LIBC
)) \

1041 && 
	$__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

1042 
	#_MdoubÀ_
 
_Flﬂt32


	)

1043 
	#__MATH_DECLARING_DOUBLE
 0

	)

1044 
	#__MATH_DECLARING_FLOATN
 1

	)

1045 
	#__REDIRFROM_X
(
fun˘i⁄
, 
ªíå™t
) \

1046 
fun˘i⁄
 ## 
f32
 ## 
ªíå™t


	)

1047 #i‡
__HAVE_DISTINCT_FLOAT32


1048 
	#__REDIRTO_X
(
fun˘i⁄
, 
ªíå™t
) \

1049 
__
 ## 
fun˘i⁄
 ## 
f32
 ## 
ªíå™t
 ## 
_föôe


	)

1051 
	#__REDIRTO_X
(
fun˘i⁄
, 
ªíå™t
) \

1052 
__
 ## 
fun˘i⁄
 ## 
f
 ## 
ªíå™t
 ## 
_föôe


	)

1054 
	~<bôs/m©h-föôe.h
>

1055 #unde‡
_MdoubÀ_


1056 #unde‡
__MATH_DECLARING_DOUBLE


1057 #unde‡
__MATH_DECLARING_FLOATN


1058 #unde‡
__REDIRFROM_X


1059 #unde‡
__REDIRTO_X


1062 #i‡(
__HAVE_DISTINCT_FLOAT64
 || (
__HAVE_FLOAT64
 && !
deföed
 
_LIBC
)) \

1063 && 
	$__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

1064 
	#_MdoubÀ_
 
_Flﬂt64


	)

1065 
	#__MATH_DECLARING_DOUBLE
 0

	)

1066 
	#__MATH_DECLARING_FLOATN
 1

	)

1067 
	#__REDIRFROM_X
(
fun˘i⁄
, 
ªíå™t
) \

1068 
fun˘i⁄
 ## 
f64
 ## 
ªíå™t


	)

1069 #i‡
__HAVE_DISTINCT_FLOAT64


1070 
	#__REDIRTO_X
(
fun˘i⁄
, 
ªíå™t
) \

1071 
__
 ## 
fun˘i⁄
 ## 
f64
 ## 
ªíå™t
 ## 
_föôe


	)

1073 
	#__REDIRTO_X
(
fun˘i⁄
, 
ªíå™t
) \

1074 
__
 ## 
fun˘i⁄
 ## 
ªíå™t
 ## 
_föôe


	)

1076 
	~<bôs/m©h-föôe.h
>

1077 #unde‡
_MdoubÀ_


1078 #unde‡
__MATH_DECLARING_DOUBLE


1079 #unde‡
__MATH_DECLARING_FLOATN


1080 #unde‡
__REDIRFROM_X


1081 #unde‡
__REDIRTO_X


1084 #i‡(
__HAVE_DISTINCT_FLOAT128
 || (
__HAVE_FLOAT128
 && !
deföed
 
_LIBC
)) \

1085 && 
	$__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

1086 
	#_MdoubÀ_
 
_Flﬂt128


	)

1087 
	#__MATH_DECLARING_DOUBLE
 0

	)

1088 
	#__MATH_DECLARING_FLOATN
 1

	)

1089 
	#__REDIRFROM_X
(
fun˘i⁄
, 
ªíå™t
) \

1090 
fun˘i⁄
 ## 
f128
 ## 
ªíå™t


	)

1091 #i‡
__HAVE_DISTINCT_FLOAT128


1092 
	#__REDIRTO_X
(
fun˘i⁄
, 
ªíå™t
) \

1093 
__
 ## 
fun˘i⁄
 ## 
f128
 ## 
ªíå™t
 ## 
_föôe


	)

1095 
	#__REDIRTO_X
(
fun˘i⁄
, 
ªíå™t
) \

1096 
__
 ## 
fun˘i⁄
 ## 
l
 ## 
ªíå™t
 ## 
_föôe


	)

1098 
	~<bôs/m©h-föôe.h
>

1099 #unde‡
_MdoubÀ_


1100 #unde‡
__MATH_DECLARING_DOUBLE


1101 #unde‡
__MATH_DECLARING_FLOATN


1102 #unde‡
__REDIRFROM_X


1103 #unde‡
__REDIRTO_X


1106 #i‡(
__HAVE_DISTINCT_FLOAT32X
 || (
__HAVE_FLOAT32X
 && !
deföed
 
_LIBC
)) \

1107 && 
	$__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

1108 
	#_MdoubÀ_
 
_Flﬂt32x


	)

1109 
	#__MATH_DECLARING_DOUBLE
 0

	)

1110 
	#__MATH_DECLARING_FLOATN
 1

	)

1111 
	#__REDIRFROM_X
(
fun˘i⁄
, 
ªíå™t
) \

1112 
fun˘i⁄
 ## 
f32x
 ## 
ªíå™t


	)

1113 #i‡
__HAVE_DISTINCT_FLOAT32X


1114 
	#__REDIRTO_X
(
fun˘i⁄
, 
ªíå™t
) \

1115 
__
 ## 
fun˘i⁄
 ## 
f32x
 ## 
ªíå™t
 ## 
_föôe


	)

1117 
	#__REDIRTO_X
(
fun˘i⁄
, 
ªíå™t
) \

1118 
__
 ## 
fun˘i⁄
 ## 
ªíå™t
 ## 
_föôe


	)

1120 
	~<bôs/m©h-föôe.h
>

1121 #unde‡
_MdoubÀ_


1122 #unde‡
__MATH_DECLARING_DOUBLE


1123 #unde‡
__MATH_DECLARING_FLOATN


1124 #unde‡
__REDIRFROM_X


1125 #unde‡
__REDIRTO_X


1128 #i‡(
__HAVE_DISTINCT_FLOAT64X
 || (
__HAVE_FLOAT64X
 && !
deföed
 
_LIBC
)) \

1129 && 
	$__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

1130 
	#_MdoubÀ_
 
_Flﬂt64x


	)

1131 
	#__MATH_DECLARING_DOUBLE
 0

	)

1132 
	#__MATH_DECLARING_FLOATN
 1

	)

1133 
	#__REDIRFROM_X
(
fun˘i⁄
, 
ªíå™t
) \

1134 
fun˘i⁄
 ## 
f64x
 ## 
ªíå™t


	)

1135 #i‡
__HAVE_DISTINCT_FLOAT64X


1136 
	#__REDIRTO_X
(
fun˘i⁄
, 
ªíå™t
) \

1137 
__
 ## 
fun˘i⁄
 ## 
f64x
 ## 
ªíå™t
 ## 
_föôe


	)

1138 #ñi‡
__HAVE_FLOAT64X_LONG_DOUBLE


1139 
	#__REDIRTO_X
(
fun˘i⁄
, 
ªíå™t
) \

1140 
__
 ## 
fun˘i⁄
 ## 
l
 ## 
ªíå™t
 ## 
_föôe


	)

1142 
	#__REDIRTO_X
(
fun˘i⁄
, 
ªíå™t
) \

1143 
__
 ## 
fun˘i⁄
 ## 
f128
 ## 
ªíå™t
 ## 
_föôe


	)

1145 
	~<bôs/m©h-föôe.h
>

1146 #unde‡
_MdoubÀ_


1147 #unde‡
__MATH_DECLARING_DOUBLE


1148 #unde‡
__MATH_DECLARING_FLOATN


1149 #unde‡
__REDIRFROM_X


1150 #unde‡
__REDIRTO_X


1153 #i‡(
__HAVE_DISTINCT_FLOAT128X
 || (
__HAVE_FLOAT128X
 && !
deföed
 
_LIBC
)) \

1154 && 
	$__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

1155 
	#_MdoubÀ_
 
_Flﬂt128x


	)

1156 
	#__MATH_DECLARING_DOUBLE
 0

	)

1157 
	#__MATH_DECLARING_FLOATN
 1

	)

1158 
	#__REDIRFROM_X
(
fun˘i⁄
, 
ªíå™t
) \

1159 
fun˘i⁄
 ## 
f128x
 ## 
ªíå™t


	)

1160 #i‡
__HAVE_DISTINCT_FLOAT128X


1161 
	#__REDIRTO_X
(
fun˘i⁄
, 
ªíå™t
) \

1162 
__
 ## 
fun˘i⁄
 ## 
f128x
 ## 
ªíå™t
 ## 
_föôe


	)

1166 
	~<bôs/m©h-föôe.h
>

1167 #unde‡
_MdoubÀ_


1168 #unde‡
__MATH_DECLARING_DOUBLE


1169 #unde‡
__MATH_DECLARING_FLOATN


1170 #unde‡
__REDIRFROM_X


1171 #unde‡
__REDIRTO_X


1176 #i‡
	`__GLIBC_USE
 (
IEC_60559_BFP_EXT
)

1179 #i‡
__FLT_EVAL_METHOD__
 == 2 || __FLT_EVAL_METHOD__ > 64

1180 
	#__MATH_EVAL_FMT2
(
x
, 
y
Ë((xË+ (yË+ 0.0L)

	)

1181 #ñi‡
__FLT_EVAL_METHOD__
 == 1 || __FLT_EVAL_METHOD__ > 32

1182 
	#__MATH_EVAL_FMT2
(
x
, 
y
Ë((xË+ (yË+ 0.0)

	)

1183 #ñi‡
__FLT_EVAL_METHOD__
 == 0 || __FLT_EVAL_METHOD__ == 32

1184 
	#__MATH_EVAL_FMT2
(
x
, 
y
Ë((xË+ (yË+ 0.0f)

	)

1186 
	#__MATH_EVAL_FMT2
(
x
, 
y
Ë((xË+ (y))

	)

1191 #i‡!
deföed
 
__˝lu•lus
 || (__˝lu•lu†< 201103L && !deföed 
__GNUC__
)

1192 
	#i£qsig
(
x
, 
y
) \

1193 
	`__MATH_TG
 (
	`__MATH_EVAL_FMT2
 (
x
, 
y
), 
__i£qsig
, ((x), (y)))

	)

1206 
ãm∂©e
<
ty≥«me
> 
__i£qsig_ty≥
;

1208 
ãm∂©e
<> 
__i£qsig_ty≥
<>

1210 
	`__ˇŒ
 (
__x
, 
__y
Ë
	`throw
 ()

1212  
	`__i£qsigf
 (
__x
, 
__y
);

1216 
ãm∂©e
<> 
__i£qsig_ty≥
<>

1218 
	`__ˇŒ
 (
__x
, 
__y
Ë
	`throw
 ()

1220  
	`__i£qsig
 (
__x
, 
__y
);

1224 
ãm∂©e
<> 
__i£qsig_ty≥
<>

1226 
	`__ˇŒ
 (
__x
, 
__y
Ë
	`throw
 ()

1228 #i‚de‡
__NO_LONG_DOUBLE_MATH


1229  
	`__i£qsigl
 (
__x
, 
__y
);

1231  
	`__i£qsig
 (
__x
, 
__y
);

1236 #i‡
__HAVE_DISTINCT_FLOAT128


1237 
ãm∂©e
<> 
__i£qsig_ty≥
<
_Flﬂt128
>

1239 
	`__ˇŒ
 (
_Flﬂt128
 
__x
, _Flﬂt128 
__y
Ë
	`throw
 ()

1241  
	`__i£qsigf128
 (
__x
, 
__y
);

1246 
ãm∂©e
<
ty≥«me
 
_T1
,Åy≥«mê
_T2
>

1247 
ölöe
 

1248 
	`i£qsig
 (
_T1
 
__x
, 
_T2
 
__y
Ë
	`throw
 ()

1250 #i‡
__˝lu•lus
 >= 201103L

1251 
	`de˛ty≥
 (
	t__MATH_EVAL_FMT2
 (
	t__x
, 
	t__y
)Ë
	t_T3
;

1253 
	`__ty≥of
 (
	t__MATH_EVAL_FMT2
 (
	t__x
, 
	t__y
)Ë
	t_T3
;

1255  
__i£qsig_ty≥
<
_T3
>::
	`__ˇŒ
 (
__x
, 
__y
);

1258 
	}
}

1263 
__END_DECLS


	@/usr/include/openssl/md5.h

59 #i‚de‡
HEADER_MD5_H


60 
	#HEADER_MD5_H


	)

62 
	~<›ís¶/e_os2.h
>

63 
	~<°ddef.h
>

65 #ifde‡ 
__˝lu•lus


69 #ifde‡
OPENSSL_NO_MD5


70 #îr‹ 
MD5
 
is
 
dißbÀd
.

80 #i‡
deföed
(
__LP32__
)

81 
	#MD5_LONG
 

	)

82 #ñi‡
deföed
(
OPENSSL_SYS_CRAY
Ë|| deföed(
__ILP64__
)

83 
	#MD5_LONG
 

	)

84 
	#MD5_LONG_LOG2
 3

	)

93 
	#MD5_LONG
 

	)

96 
	#MD5_CBLOCK
 64

	)

97 
	#MD5_LBLOCK
 (
MD5_CBLOCK
/4)

	)

98 
	#MD5_DIGEST_LENGTH
 16

	)

100 
	sMD5°©e_°
 {

101 
MD5_LONG
 
A
, 
B
, 
C
, 
D
;

102 
MD5_LONG
 
Nl
, 
Nh
;

103 
MD5_LONG
 
d©a
[
MD5_LBLOCK
];

104 
num
;

105 } 
	tMD5_CTX
;

107 #ifde‡
OPENSSL_FIPS


108 
¥iv©e_MD5_Inô
(
MD5_CTX
 *
c
);

110 
MD5_Inô
(
MD5_CTX
 *
c
);

111 
MD5_Upd©e
(
MD5_CTX
 *
c
, c⁄° *
d©a
, 
size_t
 
Àn
);

112 
MD5_FöÆ
(*
md
, 
MD5_CTX
 *
c
);

113 *
MD5
(c⁄° *
d
, 
size_t
 
n
, *
md
);

114 
MD5_Tønsf‹m
(
MD5_CTX
 *
c
, c⁄° *
b
);

115 #ifde‡ 
__˝lu•lus


	@/usr/include/poll.h

1 
	~<sys/pﬁl.h
>

	@/usr/include/pthread.h

18 #i‚de‡
_PTHREAD_H


19 
	#_PTHREAD_H
 1

	)

21 
	~<„©uªs.h
>

22 
	~<ídün.h
>

23 
	~<sched.h
>

24 
	~<time.h
>

26 
	~<bôs/±hªadty≥s.h
>

27 
	~<bôs/£tjmp.h
>

28 
	~<bôs/w‹dsize.h
>

29 
	~<bôs/ty≥s/°ru˘_time•ec.h
>

35 
	mPTHREAD_CREATE_JOINABLE
,

36 
	#PTHREAD_CREATE_JOINABLE
 
PTHREAD_CREATE_JOINABLE


	)

37 
	mPTHREAD_CREATE_DETACHED


38 
	#PTHREAD_CREATE_DETACHED
 
PTHREAD_CREATE_DETACHED


	)

45 
	mPTHREAD_MUTEX_TIMED_NP
,

46 
	mPTHREAD_MUTEX_RECURSIVE_NP
,

47 
	mPTHREAD_MUTEX_ERRORCHECK_NP
,

48 
	mPTHREAD_MUTEX_ADAPTIVE_NP


49 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


51 
	mPTHREAD_MUTEX_NORMAL
 = 
PTHREAD_MUTEX_TIMED_NP
,

52 
	mPTHREAD_MUTEX_RECURSIVE
 = 
PTHREAD_MUTEX_RECURSIVE_NP
,

53 
	mPTHREAD_MUTEX_ERRORCHECK
 = 
PTHREAD_MUTEX_ERRORCHECK_NP
,

54 
	mPTHREAD_MUTEX_DEFAULT
 = 
PTHREAD_MUTEX_NORMAL


56 #ifde‡
__USE_GNU


58 , 
	mPTHREAD_MUTEX_FAST_NP
 = 
PTHREAD_MUTEX_TIMED_NP


63 #ifde‡
__USE_XOPEN2K


67 
	mPTHREAD_MUTEX_STALLED
,

68 
	mPTHREAD_MUTEX_STALLED_NP
 = 
PTHREAD_MUTEX_STALLED
,

69 
	mPTHREAD_MUTEX_ROBUST
,

70 
	mPTHREAD_MUTEX_ROBUST_NP
 = 
PTHREAD_MUTEX_ROBUST


75 #i‡
deföed
 
__USE_POSIX199506
 || deföed 
__USE_UNIX98


79 
	mPTHREAD_PRIO_NONE
,

80 
	mPTHREAD_PRIO_INHERIT
,

81 
	mPTHREAD_PRIO_PROTECT


86 #i‡
__PTHREAD_MUTEX_HAVE_PREV


87 
	#PTHREAD_MUTEX_INITIALIZER
 \

88 { { 0, 0, 0, 0, 0, 
__PTHREAD_SPINS
, { 0, 0 } } }

	)

89 #ifde‡
__USE_GNU


90 
	#PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
 \

91 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_RECURSIVE_NP
, 
__PTHREAD_SPINS
, { 0, 0 } } }

	)

92 
	#PTHREAD_ERRORCHECK_MUTEX_INITIALIZER_NP
 \

93 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_ERRORCHECK_NP
, 
__PTHREAD_SPINS
, { 0, 0 } } }

	)

94 
	#PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP
 \

95 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_ADAPTIVE_NP
, 
__PTHREAD_SPINS
, { 0, 0 } } }

	)

99 
	#PTHREAD_MUTEX_INITIALIZER
 \

100 { { 0, 0, 0, 0, 0, { 
__PTHREAD_SPINS
 } } }

	)

101 #ifde‡
__USE_GNU


102 
	#PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
 \

103 { { 0, 0, 0, 
PTHREAD_MUTEX_RECURSIVE_NP
, 0, { 
__PTHREAD_SPINS
 } } }

	)

104 
	#PTHREAD_ERRORCHECK_MUTEX_INITIALIZER_NP
 \

105 { { 0, 0, 0, 
PTHREAD_MUTEX_ERRORCHECK_NP
, 0, { 
__PTHREAD_SPINS
 } } }

	)

106 
	#PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP
 \

107 { { 0, 0, 0, 
PTHREAD_MUTEX_ADAPTIVE_NP
, 0, { 
__PTHREAD_SPINS
 } } }

	)

114 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


117 
	mPTHREAD_RWLOCK_PREFER_READER_NP
,

118 
	mPTHREAD_RWLOCK_PREFER_WRITER_NP
,

119 
	mPTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
,

120 
	mPTHREAD_RWLOCK_DEFAULT_NP
 = 
PTHREAD_RWLOCK_PREFER_READER_NP


126 #i‚de‡
__PTHREAD_RWLOCK_INT_FLAGS_SHARED


127 #i‡
__WORDSIZE
 == 64

128 
	#__PTHREAD_RWLOCK_INT_FLAGS_SHARED
 1

	)

133 
	#PTHREAD_RWLOCK_INITIALIZER
 \

134 { { 0, 0, 0, 0, 0, 0, 0, 0, 
__PTHREAD_RWLOCK_ELISION_EXTRA
, 0, 0 } }

	)

135 #ifde‡
__USE_GNU


136 #ifde‡
__PTHREAD_RWLOCK_INT_FLAGS_SHARED


137 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

138 { { 0, 0, 0, 0, 0, 0, 0, 0, 
__PTHREAD_RWLOCK_ELISION_EXTRA
, 0, \

139 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
 } }

	)

141 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


142 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

143 { { 0, 0, 0, 0, 0, 0, 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
, \

144 0, 
__PTHREAD_RWLOCK_ELISION_EXTRA
, 0, 0 } }

	)

146 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

147 { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
,\

148 0 } }

	)

158 
	mPTHREAD_INHERIT_SCHED
,

159 
	#PTHREAD_INHERIT_SCHED
 
PTHREAD_INHERIT_SCHED


	)

160 
	mPTHREAD_EXPLICIT_SCHED


161 
	#PTHREAD_EXPLICIT_SCHED
 
PTHREAD_EXPLICIT_SCHED


	)

168 
	mPTHREAD_SCOPE_SYSTEM
,

169 
	#PTHREAD_SCOPE_SYSTEM
 
PTHREAD_SCOPE_SYSTEM


	)

170 
	mPTHREAD_SCOPE_PROCESS


171 
	#PTHREAD_SCOPE_PROCESS
 
PTHREAD_SCOPE_PROCESS


	)

178 
	mPTHREAD_PROCESS_PRIVATE
,

179 
	#PTHREAD_PROCESS_PRIVATE
 
PTHREAD_PROCESS_PRIVATE


	)

180 
	mPTHREAD_PROCESS_SHARED


181 
	#PTHREAD_PROCESS_SHARED
 
PTHREAD_PROCESS_SHARED


	)

187 
	#PTHREAD_COND_INITIALIZER
 { { {0}, {0}, {0, 0}, {0, 0}, 0, 0, {0, 0} } }

	)

191 
	s_±hªad_˛ónup_buf„r


193 (*
	m__routöe
) (*);

194 *
	m__¨g
;

195 
	m__ˇn˚…y≥
;

196 
_±hªad_˛ónup_buf„r
 *
	m__¥ev
;

202 
	mPTHREAD_CANCEL_ENABLE
,

203 
	#PTHREAD_CANCEL_ENABLE
 
PTHREAD_CANCEL_ENABLE


	)

204 
	mPTHREAD_CANCEL_DISABLE


205 
	#PTHREAD_CANCEL_DISABLE
 
PTHREAD_CANCEL_DISABLE


	)

209 
	mPTHREAD_CANCEL_DEFERRED
,

210 
	#PTHREAD_CANCEL_DEFERRED
 
PTHREAD_CANCEL_DEFERRED


	)

211 
	mPTHREAD_CANCEL_ASYNCHRONOUS


212 
	#PTHREAD_CANCEL_ASYNCHRONOUS
 
PTHREAD_CANCEL_ASYNCHRONOUS


	)

214 
	#PTHREAD_CANCELED
 ((*Ë-1)

	)

218 
	#PTHREAD_ONCE_INIT
 0

	)

221 #ifde‡
__USE_XOPEN2K


225 
	#PTHREAD_BARRIER_SERIAL_THREAD
 -1

	)

229 
__BEGIN_DECLS


234 
	$±hªad_¸óã
 (
±hªad_t
 *
__ª°ri˘
 
__√wthªad
,

235 c⁄° 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

236 *(*
__°¨t_routöe
) (*),

237 *
__ª°ri˘
 
__¨g
Ë
__THROWNL
 
	`__n⁄nuŒ
 ((1, 3));

243 
	$±hªad_exô
 (*
__ªtvÆ
Ë
	`__©åibuã__
 ((
__n‹ëu∫__
));

251 
	`±hªad_joö
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
);

253 #ifde‡
__USE_GNU


256 
	$±hªad_åyjoö_≈
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
Ë
__THROW
;

264 
	`±hªad_timedjoö_≈
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
,

265 c⁄° 
time•ec
 *
__ab°ime
);

272 
	$±hªad_dëach
 (
±hªad_t
 
__th
Ë
__THROW
;

276 
±hªad_t
 
	$±hªad_£lf
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

279 
	$±hªad_equÆ
 (
±hªad_t
 
__thªad1
,Öthªad_à
__thªad2
)

280 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

288 
	$±hªad_©å_öô
 (
±hªad_©å_t
 *
__©å
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

291 
	$±hªad_©å_de°roy
 (
±hªad_©å_t
 *
__©å
)

292 
__THROW
 
	`__n⁄nuŒ
 ((1));

295 
	$±hªad_©å_gëdëach°©e
 (c⁄° 
±hªad_©å_t
 *
__©å
,

296 *
__dëach°©e
)

297 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

300 
	$±hªad_©å_£tdëach°©e
 (
±hªad_©å_t
 *
__©å
,

301 
__dëach°©e
)

302 
__THROW
 
	`__n⁄nuŒ
 ((1));

306 
	$±hªad_©å_gëgu¨dsize
 (c⁄° 
±hªad_©å_t
 *
__©å
,

307 
size_t
 *
__gu¨dsize
)

308 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

311 
	$±hªad_©å_£tgu¨dsize
 (
±hªad_©å_t
 *
__©å
,

312 
size_t
 
__gu¨dsize
)

313 
__THROW
 
	`__n⁄nuŒ
 ((1));

317 
	$±hªad_©å_gësched∑øm
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

318 
sched_∑øm
 *
__ª°ri˘
 
__∑øm
)

319 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

322 
	$±hªad_©å_£tsched∑øm
 (
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

323 c⁄° 
sched_∑øm
 *
__ª°ri˘


324 
__∑øm
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

327 
	$±hªad_©å_gëschedpﬁicy
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘


328 
__©å
, *
__ª°ri˘
 
__pﬁicy
)

329 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

332 
	$±hªad_©å_£tschedpﬁicy
 (
±hªad_©å_t
 *
__©å
, 
__pﬁicy
)

333 
__THROW
 
	`__n⁄nuŒ
 ((1));

336 
	$±hªad_©å_gëöhîôsched
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘


337 
__©å
, *
__ª°ri˘
 
__öhîô
)

338 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

341 
	$±hªad_©å_£töhîôsched
 (
±hªad_©å_t
 *
__©å
,

342 
__öhîô
)

343 
__THROW
 
	`__n⁄nuŒ
 ((1));

347 
	$±hªad_©å_gësc›e
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

348 *
__ª°ri˘
 
__sc›e
)

349 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

352 
	$±hªad_©å_£tsc›e
 (
±hªad_©å_t
 *
__©å
, 
__sc›e
)

353 
__THROW
 
	`__n⁄nuŒ
 ((1));

356 
	$±hªad_©å_gë°ackaddr
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘


357 
__©å
, **
__ª°ri˘
 
__°ackaddr
)

358 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__©åibuã_dïªˇãd__
;

364 
	$±hªad_©å_£t°ackaddr
 (
±hªad_©å_t
 *
__©å
,

365 *
__°ackaddr
)

366 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_dïªˇãd__
;

369 
	$±hªad_©å_gë°acksize
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘


370 
__©å
, 
size_t
 *
__ª°ri˘
 
__°acksize
)

371 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

376 
	$±hªad_©å_£t°acksize
 (
±hªad_©å_t
 *
__©å
,

377 
size_t
 
__°acksize
)

378 
__THROW
 
	`__n⁄nuŒ
 ((1));

380 #ifde‡
__USE_XOPEN2K


382 
	$±hªad_©å_gë°ack
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

383 **
__ª°ri˘
 
__°ackaddr
,

384 
size_t
 *
__ª°ri˘
 
__°acksize
)

385 
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

390 
	$±hªad_©å_£t°ack
 (
±hªad_©å_t
 *
__©å
, *
__°ackaddr
,

391 
size_t
 
__°acksize
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

394 #ifde‡
__USE_GNU


397 
	$±hªad_©å_£èfföôy_≈
 (
±hªad_©å_t
 *
__©å
,

398 
size_t
 
__˝u£tsize
,

399 c⁄° 
˝u_£t_t
 *
__˝u£t
)

400 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

404 
	$±hªad_©å_gëafföôy_≈
 (c⁄° 
±hªad_©å_t
 *
__©å
,

405 
size_t
 
__˝u£tsize
,

406 
˝u_£t_t
 *
__˝u£t
)

407 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

410 
	$±hªad_gë©å_deÁu…_≈
 (
±hªad_©å_t
 *
__©å
)

411 
__THROW
 
	`__n⁄nuŒ
 ((1));

415 
	$±hªad_£èâr_deÁu…_≈
 (c⁄° 
±hªad_©å_t
 *
__©å
)

416 
__THROW
 
	`__n⁄nuŒ
 ((1));

421 
	$±hªad_gë©å_≈
 (
±hªad_t
 
__th
, 
±hªad_©å_t
 *
__©å
)

422 
__THROW
 
	`__n⁄nuŒ
 ((2));

430 
	$±hªad_£tsched∑øm
 (
±hªad_t
 
__èrgë_thªad
, 
__pﬁicy
,

431 c⁄° 
sched_∑øm
 *
__∑øm
)

432 
__THROW
 
	`__n⁄nuŒ
 ((3));

435 
	$±hªad_gësched∑øm
 (
±hªad_t
 
__èrgë_thªad
,

436 *
__ª°ri˘
 
__pﬁicy
,

437 
sched_∑øm
 *
__ª°ri˘
 
__∑øm
)

438 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

441 
	$±hªad_£tsched¥io
 (
±hªad_t
 
__èrgë_thªad
, 
__¥io
)

442 
__THROW
;

445 #ifde‡
__USE_GNU


447 
	$±hªad_gë«me_≈
 (
±hªad_t
 
__èrgë_thªad
, *
__buf
,

448 
size_t
 
__buÊí
)

449 
__THROW
 
	`__n⁄nuŒ
 ((2));

452 
	$±hªad_£äame_≈
 (
±hªad_t
 
__èrgë_thªad
, c⁄° *
__«me
)

453 
__THROW
 
	`__n⁄nuŒ
 ((2));

457 #ifde‡
__USE_UNIX98


459 
	$±hªad_gëc⁄cuºícy
 (Ë
__THROW
;

462 
	$±hªad_£tc⁄cuºícy
 (
__Àvñ
Ë
__THROW
;

465 #ifde‡
__USE_GNU


470 
	$±hªad_yõld
 (Ë
__THROW
;

475 
	$±hªad_£èfföôy_≈
 (
±hªad_t
 
__th
, 
size_t
 
__˝u£tsize
,

476 c⁄° 
˝u_£t_t
 *
__˝u£t
)

477 
__THROW
 
	`__n⁄nuŒ
 ((3));

480 
	$±hªad_gëafföôy_≈
 (
±hªad_t
 
__th
, 
size_t
 
__˝u£tsize
,

481 
˝u_£t_t
 *
__˝u£t
)

482 
__THROW
 
	`__n⁄nuŒ
 ((3));

495 
	$±hªad_⁄˚
 (
±hªad_⁄˚_t
 *
__⁄˚_c⁄åﬁ
,

496 (*
__öô_routöe
Ë()Ë
	`__n⁄nuŒ
 ((1, 2));

507 
	`±hªad_£tˇn˚l°©e
 (
__°©e
, *
__ﬁd°©e
);

511 
	`±hªad_£tˇn˚…y≥
 (
__ty≥
, *
__ﬁdty≥
);

514 
	`±hªad_ˇn˚l
 (
±hªad_t
 
__th
);

519 
	`±hªad_ã°ˇn˚l
 ();

528 
__jmp_buf
 
__ˇn˚l_jmp_buf
;

529 
__mask_was_ßved
;

530 } 
__ˇn˚l_jmp_buf
[1];

531 *
__∑d
[4];

532 } 
	t__±hªad_unwöd_buf_t
 
	t__©åibuã__
 ((
	t__Æig√d__
));

535 #i‚de‡
__˛ónup_f˘_©åibuã


536 
	#__˛ónup_f˘_©åibuã


	)

541 
	s__±hªad_˛ónup_‰ame


543 (*
__ˇn˚l_routöe
) (*);

544 *
__ˇn˚l_¨g
;

545 
__do_ô
;

546 
__ˇn˚l_ty≥
;

549 #i‡
deföed
 
__GNUC__
 && deföed 
__EXCEPTIONS


550 #ifde‡
__˝lu•lus


552 ˛as†
	c__±hªad_˛ónup_˛ass


554 (*
__ˇn˚l_routöe
) (*);

555 *
__ˇn˚l_¨g
;

556 
__do_ô
;

557 
__ˇn˚l_ty≥
;

559 
public
:

560 
	$__±hªad_˛ónup_˛ass
 ((*
__f˘
Ë(*), *
__¨g
)

561 : 
	`__ˇn˚l_routöe
 (
__f˘
), 
	`__ˇn˚l_¨g
 (
__¨g
), 
	$__do_ô
 (1) { }

562 ~
	$__±hªad_˛ónup_˛ass
 (Ë{ i‡(
__do_ô
Ë
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); 
	}
}

563 
	$__£tdoô
 (
__√wvÆ
Ë{ 
__do_ô
 = __√wvÆ; 
	}
}

564 
	$__de„r
 (Ë{ 
	`±hªad_£tˇn˚…y≥
 (
PTHREAD_CANCEL_DEFERRED
,

565 &
__ˇn˚l_ty≥
); 
	}
}

566 
	$__ª°‹e
 (Ëc⁄° { 
	`±hªad_£tˇn˚…y≥
 (
__ˇn˚l_ty≥
, 0); 
	}
}

576 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

578 
__±hªad_˛ónup_˛ass
 
	`__˛‰ame
 (
routöe
, 
¨g
)

	)

582 
	#±hªad_˛ónup_p›
(
execuã
) \

583 
__˛‰ame
.
	`__£tdoô
 (
execuã
); \

584 } 0)

	)

586 #ifde‡
__USE_GNU


590 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

592 
__±hªad_˛ónup_˛ass
 
	`__˛‰ame
 (
routöe
, 
¨g
); \

593 
__˛‰ame
.
	`__de„r
 ()

	)

598 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

599 
__˛‰ame
.
	`__ª°‹e
 (); \

600 
__˛‰ame
.
	`__£tdoô
 (
execuã
); \

601 } 0)

	)

608 
__exã∫_ölöe
 

609 
	$__±hªad_˛ónup_routöe
 (
__±hªad_˛ónup_‰ame
 *
__‰ame
)

611 i‡(
__‰ame
->
__do_ô
)

612 
__‰ame
->
	`__ˇn˚l_routöe
 (__‰ame->
__ˇn˚l_¨g
);

613 
	}
}

622 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

624 
__±hªad_˛ónup_‰ame
 
__˛‰ame
 \

625 
	`__©åibuã__
 ((
	`__˛ónup__
 (
__±hªad_˛ónup_routöe
))) \

626 { .
__ˇn˚l_routöe
 = (
routöe
), .
__ˇn˚l_¨g
 = (
¨g
), \

627 .
__do_ô
 = 1 };

	)

631 
	#±hªad_˛ónup_p›
(
execuã
) \

632 
__˛‰ame
.
__do_ô
 = (
execuã
); \

633 } 0)

	)

635 #ifde‡
__USE_GNU


639 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

641 
__±hªad_˛ónup_‰ame
 
__˛‰ame
 \

642 
	`__©åibuã__
 ((
	`__˛ónup__
 (
__±hªad_˛ónup_routöe
))) \

643 { .
__ˇn˚l_routöe
 = (
routöe
), .
__ˇn˚l_¨g
 = (
¨g
), \

644 .
__do_ô
 = 1 }; \

645 (Ë
	`±hªad_£tˇn˚…y≥
 (
PTHREAD_CANCEL_DEFERRED
, \

646 &
__˛‰ame
.
__ˇn˚l_ty≥
)

	)

651 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

652 (Ë
	`±hªad_£tˇn˚…y≥
 (
__˛‰ame
.
__ˇn˚l_ty≥
, 
NULL
); \

653 
__˛‰ame
.
__do_ô
 = (
execuã
); \

654 } 0)

	)

665 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

667 
__±hªad_unwöd_buf_t
 
__ˇn˚l_buf
; \

668 (*
__ˇn˚l_routöe
Ë(*Ë(
routöe
); \

669 *
__ˇn˚l_¨g
 = (
¨g
); \

670 
__nŸ_fú°_ˇŒ
 = 
	`__sig£tjmp
 ((
__jmp_buf_èg
 *) (*) \

671 
__ˇn˚l_buf
.
__ˇn˚l_jmp_buf
, 0); \

672 i‡(
	`__glibc_u∆ikñy
 (
__nŸ_fú°_ˇŒ
)) \

674 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

675 
	`__±hªad_unwöd_√xt
 (&
__ˇn˚l_buf
); \

679 
	`__±hªad_ªgi°î_ˇn˚l
 (&
__ˇn˚l_buf
); \

680 dÿ{

	)

681 
__±hªad_ªgi°î_ˇn˚l
 (
__±hªad_unwöd_buf_t
 *
__buf
)

682 
__˛ónup_f˘_©åibuã
;

686 
	#±hªad_˛ónup_p›
(
execuã
) \

689 
	`__±hªad_uƒegi°î_ˇn˚l
 (&
__ˇn˚l_buf
); \

690 i‡(
execuã
) \

691 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

692 } 0)

	)

693 
	$__±hªad_uƒegi°î_ˇn˚l
 (
__±hªad_unwöd_buf_t
 *
__buf
)

694 
__˛ónup_f˘_©åibuã
;

696 #ifde‡
__USE_GNU


700 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

702 
__±hªad_unwöd_buf_t
 
__ˇn˚l_buf
; \

703 (*
__ˇn˚l_routöe
Ë(*Ë(
routöe
); \

704 *
__ˇn˚l_¨g
 = (
¨g
); \

705 
__nŸ_fú°_ˇŒ
 = 
	`__sig£tjmp
 ((
__jmp_buf_èg
 *) (*) \

706 
__ˇn˚l_buf
.
__ˇn˚l_jmp_buf
, 0); \

707 i‡(
	`__glibc_u∆ikñy
 (
__nŸ_fú°_ˇŒ
)) \

709 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

710 
	`__±hªad_unwöd_√xt
 (&
__ˇn˚l_buf
); \

714 
	`__±hªad_ªgi°î_ˇn˚l_de„r
 (&
__ˇn˚l_buf
); \

715 dÿ{

	)

716 
	`__±hªad_ªgi°î_ˇn˚l_de„r
 (
__±hªad_unwöd_buf_t
 *
__buf
)

717 
__˛ónup_f˘_©åibuã
;

722 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

725 
	`__±hªad_uƒegi°î_ˇn˚l_ª°‹e
 (&
__ˇn˚l_buf
); \

726 i‡(
execuã
) \

727 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

728 
	}
} 0)

	)

729 
	$__±hªad_uƒegi°î_ˇn˚l_ª°‹e
 (
__±hªad_unwöd_buf_t
 *
__buf
)

730 
__˛ónup_f˘_©åibuã
;

734 
	$__±hªad_unwöd_√xt
 (
__±hªad_unwöd_buf_t
 *
__buf
)

735 
__˛ónup_f˘_©åibuã
 
	`__©åibuã__
 ((
__n‹ëu∫__
))

736 #i‚de‡
SHARED


737 
	`__©åibuã__
 ((
__wók__
))

743 
__jmp_buf_èg
;

744 
	$__sig£tjmp
 (
__jmp_buf_èg
 *
__ív
, 
__ßvemask
Ë
__THROWNL
;

750 
	$±hªad_muãx_öô
 (
±hªad_muãx_t
 *
__muãx
,

751 c⁄° 
±hªad_muãx©å_t
 *
__muãx©å
)

752 
__THROW
 
	`__n⁄nuŒ
 ((1));

755 
	$±hªad_muãx_de°roy
 (
±hªad_muãx_t
 *
__muãx
)

756 
__THROW
 
	`__n⁄nuŒ
 ((1));

759 
	$±hªad_muãx_åylock
 (
±hªad_muãx_t
 *
__muãx
)

760 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

763 
	$±hªad_muãx_lock
 (
±hªad_muãx_t
 *
__muãx
)

764 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

766 #ifde‡
__USE_XOPEN2K


768 
	$±hªad_muãx_timedlock
 (
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

769 c⁄° 
time•ec
 *
__ª°ri˘


770 
__ab°ime
Ë
__THROWNL
 
	`__n⁄nuŒ
 ((1, 2));

774 
	$±hªad_muãx_u∆ock
 (
±hªad_muãx_t
 *
__muãx
)

775 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

779 
	$±hªad_muãx_gë¥io˚ûög
 (c⁄° 
±hªad_muãx_t
 *

780 
__ª°ri˘
 
__muãx
,

781 *
__ª°ri˘
 
__¥io˚ûög
)

782 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

786 
	$±hªad_muãx_£çrio˚ûög
 (
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

787 
__¥io˚ûög
,

788 *
__ª°ri˘
 
__ﬁd_˚ûög
)

789 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

792 #ifde‡
__USE_XOPEN2K8


794 
	$±hªad_muãx_c⁄si°ít
 (
±hªad_muãx_t
 *
__muãx
)

795 
__THROW
 
	`__n⁄nuŒ
 ((1));

796 #ifde‡
__USE_GNU


797 
	$±hªad_muãx_c⁄si°ít_≈
 (
±hªad_muãx_t
 *
__muãx
)

798 
__THROW
 
	`__n⁄nuŒ
 ((1));

807 
	$±hªad_muãx©å_öô
 (
±hªad_muãx©å_t
 *
__©å
)

808 
__THROW
 
	`__n⁄nuŒ
 ((1));

811 
	$±hªad_muãx©å_de°roy
 (
±hªad_muãx©å_t
 *
__©å
)

812 
__THROW
 
	`__n⁄nuŒ
 ((1));

815 
	$±hªad_muãx©å_gëpsh¨ed
 (c⁄° 
±hªad_muãx©å_t
 *

816 
__ª°ri˘
 
__©å
,

817 *
__ª°ri˘
 
__psh¨ed
)

818 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

821 
	$±hªad_muãx©å_£çsh¨ed
 (
±hªad_muãx©å_t
 *
__©å
,

822 
__psh¨ed
)

823 
__THROW
 
	`__n⁄nuŒ
 ((1));

825 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


827 
	$±hªad_muãx©å_gëty≥
 (c⁄° 
±hªad_muãx©å_t
 *
__ª°ri˘


828 
__©å
, *
__ª°ri˘
 
__köd
)

829 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

834 
	$±hªad_muãx©å_£ây≥
 (
±hªad_muãx©å_t
 *
__©å
, 
__köd
)

835 
__THROW
 
	`__n⁄nuŒ
 ((1));

839 
	$±hªad_muãx©å_gë¥Ÿocﬁ
 (c⁄° 
±hªad_muãx©å_t
 *

840 
__ª°ri˘
 
__©å
,

841 *
__ª°ri˘
 
__¥Ÿocﬁ
)

842 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

846 
	$±hªad_muãx©å_£çrŸocﬁ
 (
±hªad_muãx©å_t
 *
__©å
,

847 
__¥Ÿocﬁ
)

848 
__THROW
 
	`__n⁄nuŒ
 ((1));

851 
	$±hªad_muãx©å_gë¥io˚ûög
 (c⁄° 
±hªad_muãx©å_t
 *

852 
__ª°ri˘
 
__©å
,

853 *
__ª°ri˘
 
__¥io˚ûög
)

854 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

857 
	$±hªad_muãx©å_£çrio˚ûög
 (
±hªad_muãx©å_t
 *
__©å
,

858 
__¥io˚ûög
)

859 
__THROW
 
	`__n⁄nuŒ
 ((1));

861 #ifde‡
__USE_XOPEN2K


863 
	$±hªad_muãx©å_gërobu°
 (c⁄° 
±hªad_muãx©å_t
 *
__©å
,

864 *
__robu°√ss
)

865 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

866 #ifde‡
__USE_GNU


867 
	$±hªad_muãx©å_gërobu°_≈
 (c⁄° 
±hªad_muãx©å_t
 *
__©å
,

868 *
__robu°√ss
)

869 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

873 
	$±hªad_muãx©å_£åobu°
 (
±hªad_muãx©å_t
 *
__©å
,

874 
__robu°√ss
)

875 
__THROW
 
	`__n⁄nuŒ
 ((1));

876 #ifde‡
__USE_GNU


877 
	$±hªad_muãx©å_£åobu°_≈
 (
±hªad_muãx©å_t
 *
__©å
,

878 
__robu°√ss
)

879 
__THROW
 
	`__n⁄nuŒ
 ((1));

884 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


889 
	$±hªad_rwlock_öô
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

890 c⁄° 
±hªad_rwlock©å_t
 *
__ª°ri˘


891 
__©å
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

894 
	$±hªad_rwlock_de°roy
 (
±hªad_rwlock_t
 *
__rwlock
)

895 
__THROW
 
	`__n⁄nuŒ
 ((1));

898 
	$±hªad_rwlock_rdlock
 (
±hªad_rwlock_t
 *
__rwlock
)

899 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

902 
	$±hªad_rwlock_åyrdlock
 (
±hªad_rwlock_t
 *
__rwlock
)

903 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

905 #ifde‡
__USE_XOPEN2K


907 
	$±hªad_rwlock_timedrdlock
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

908 c⁄° 
time•ec
 *
__ª°ri˘


909 
__ab°ime
Ë
__THROWNL
 
	`__n⁄nuŒ
 ((1, 2));

913 
	$±hªad_rwlock_wæock
 (
±hªad_rwlock_t
 *
__rwlock
)

914 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

917 
	$±hªad_rwlock_åywæock
 (
±hªad_rwlock_t
 *
__rwlock
)

918 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

920 #ifde‡
__USE_XOPEN2K


922 
	$±hªad_rwlock_timedwæock
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

923 c⁄° 
time•ec
 *
__ª°ri˘


924 
__ab°ime
Ë
__THROWNL
 
	`__n⁄nuŒ
 ((1, 2));

928 
	$±hªad_rwlock_u∆ock
 (
±hªad_rwlock_t
 *
__rwlock
)

929 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

935 
	$±hªad_rwlock©å_öô
 (
±hªad_rwlock©å_t
 *
__©å
)

936 
__THROW
 
	`__n⁄nuŒ
 ((1));

939 
	$±hªad_rwlock©å_de°roy
 (
±hªad_rwlock©å_t
 *
__©å
)

940 
__THROW
 
	`__n⁄nuŒ
 ((1));

943 
	$±hªad_rwlock©å_gëpsh¨ed
 (c⁄° 
±hªad_rwlock©å_t
 *

944 
__ª°ri˘
 
__©å
,

945 *
__ª°ri˘
 
__psh¨ed
)

946 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

949 
	$±hªad_rwlock©å_£çsh¨ed
 (
±hªad_rwlock©å_t
 *
__©å
,

950 
__psh¨ed
)

951 
__THROW
 
	`__n⁄nuŒ
 ((1));

954 
	$±hªad_rwlock©å_gëköd_≈
 (c⁄° 
±hªad_rwlock©å_t
 *

955 
__ª°ri˘
 
__©å
,

956 *
__ª°ri˘
 
__¥ef
)

957 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

960 
	$±hªad_rwlock©å_£tköd_≈
 (
±hªad_rwlock©å_t
 *
__©å
,

961 
__¥ef
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

969 
	$±hªad_c⁄d_öô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

970 c⁄° 
±hªad_c⁄d©å_t
 *
__ª°ri˘
 
__c⁄d_©å
)

971 
__THROW
 
	`__n⁄nuŒ
 ((1));

974 
	$±hªad_c⁄d_de°roy
 (
±hªad_c⁄d_t
 *
__c⁄d
)

975 
__THROW
 
	`__n⁄nuŒ
 ((1));

978 
	$±hªad_c⁄d_sig«l
 (
±hªad_c⁄d_t
 *
__c⁄d
)

979 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

982 
	$±hªad_c⁄d_brﬂdˇ°
 (
±hªad_c⁄d_t
 *
__c⁄d
)

983 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

990 
	$±hªad_c⁄d_waô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

991 
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
)

992 
	`__n⁄nuŒ
 ((1, 2));

1001 
	$±hªad_c⁄d_timedwaô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

1002 
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

1003 c⁄° 
time•ec
 *
__ª°ri˘
 
__ab°ime
)

1004 
	`__n⁄nuŒ
 ((1, 2, 3));

1009 
	$±hªad_c⁄d©å_öô
 (
±hªad_c⁄d©å_t
 *
__©å
)

1010 
__THROW
 
	`__n⁄nuŒ
 ((1));

1013 
	$±hªad_c⁄d©å_de°roy
 (
±hªad_c⁄d©å_t
 *
__©å
)

1014 
__THROW
 
	`__n⁄nuŒ
 ((1));

1017 
	$±hªad_c⁄d©å_gëpsh¨ed
 (c⁄° 
±hªad_c⁄d©å_t
 *

1018 
__ª°ri˘
 
__©å
,

1019 *
__ª°ri˘
 
__psh¨ed
)

1020 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1023 
	$±hªad_c⁄d©å_£çsh¨ed
 (
±hªad_c⁄d©å_t
 *
__©å
,

1024 
__psh¨ed
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

1026 #ifde‡
__USE_XOPEN2K


1028 
	$±hªad_c⁄d©å_gë˛ock
 (c⁄° 
±hªad_c⁄d©å_t
 *

1029 
__ª°ri˘
 
__©å
,

1030 
__˛ockid_t
 *
__ª°ri˘
 
__˛ock_id
)

1031 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1034 
	$±hªad_c⁄d©å_£t˛ock
 (
±hªad_c⁄d©å_t
 *
__©å
,

1035 
__˛ockid_t
 
__˛ock_id
)

1036 
__THROW
 
	`__n⁄nuŒ
 ((1));

1040 #ifde‡
__USE_XOPEN2K


1045 
	$±hªad_•ö_öô
 (
±hªad_•ölock_t
 *
__lock
, 
__psh¨ed
)

1046 
__THROW
 
	`__n⁄nuŒ
 ((1));

1049 
	$±hªad_•ö_de°roy
 (
±hªad_•ölock_t
 *
__lock
)

1050 
__THROW
 
	`__n⁄nuŒ
 ((1));

1053 
	$±hªad_•ö_lock
 (
±hªad_•ölock_t
 *
__lock
)

1054 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1057 
	$±hªad_•ö_åylock
 (
±hªad_•ölock_t
 *
__lock
)

1058 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1061 
	$±hªad_•ö_u∆ock
 (
±hªad_•ölock_t
 *
__lock
)

1062 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1069 
	$±hªad_b¨rõr_öô
 (
±hªad_b¨rõr_t
 *
__ª°ri˘
 
__b¨rõr
,

1070 c⁄° 
±hªad_b¨rõøâr_t
 *
__ª°ri˘


1071 
__©å
, 
__cou¡
)

1072 
__THROW
 
	`__n⁄nuŒ
 ((1));

1075 
	$±hªad_b¨rõr_de°roy
 (
±hªad_b¨rõr_t
 *
__b¨rõr
)

1076 
__THROW
 
	`__n⁄nuŒ
 ((1));

1079 
	$±hªad_b¨rõr_waô
 (
±hªad_b¨rõr_t
 *
__b¨rõr
)

1080 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1084 
	$±hªad_b¨rõøâr_öô
 (
±hªad_b¨rõøâr_t
 *
__©å
)

1085 
__THROW
 
	`__n⁄nuŒ
 ((1));

1088 
	$±hªad_b¨rõøâr_de°roy
 (
±hªad_b¨rõøâr_t
 *
__©å
)

1089 
__THROW
 
	`__n⁄nuŒ
 ((1));

1092 
	$±hªad_b¨rõøâr_gëpsh¨ed
 (c⁄° 
±hªad_b¨rõøâr_t
 *

1093 
__ª°ri˘
 
__©å
,

1094 *
__ª°ri˘
 
__psh¨ed
)

1095 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1098 
	$±hªad_b¨rõøâr_£çsh¨ed
 (
±hªad_b¨rõøâr_t
 *
__©å
,

1099 
__psh¨ed
)

1100 
__THROW
 
	`__n⁄nuŒ
 ((1));

1112 
	$±hªad_key_¸óã
 (
±hªad_key_t
 *
__key
,

1113 (*
__de°r_fun˘i⁄
) (*))

1114 
__THROW
 
	`__n⁄nuŒ
 ((1));

1117 
	$±hªad_key_dñëe
 (
±hªad_key_t
 
__key
Ë
__THROW
;

1120 *
	$±hªad_gë•ecific
 (
±hªad_key_t
 
__key
Ë
__THROW
;

1123 
	$±hªad_£t•ecific
 (
±hªad_key_t
 
__key
,

1124 c⁄° *
__poöãr
Ë
__THROW
 ;

1127 #ifde‡
__USE_XOPEN2K


1129 
	$±hªad_gë˝u˛ockid
 (
±hªad_t
 
__thªad_id
,

1130 
__˛ockid_t
 *
__˛ock_id
)

1131 
__THROW
 
	`__n⁄nuŒ
 ((2));

1146 
	$±hªad_©f‹k
 ((*
__¥ï¨e
) (),

1147 (*
__∑ª¡
) (),

1148 (*
__chûd
Ë()Ë
__THROW
;

1151 #ifde‡
__USE_EXTERN_INLINES


1153 
__exã∫_ölöe
 

1154 
	`__NTH
 (
	$±hªad_equÆ
 (
±hªad_t
 
__thªad1
,Öthªad_à
__thªad2
))

1156  
__thªad1
 =
__thªad2
;

1157 
	}
}

1160 
	g__END_DECLS


	@/usr/include/stdint.h

22 #i‚de‡
_STDINT_H


23 
	#_STDINT_H
 1

	)

25 
	#__GLIBC_INTERNAL_STARTING_HEADER_IMPLEMENTATION


	)

26 
	~<bôs/libc-hódî-°¨t.h
>

27 
	~<bôs/ty≥s.h
>

28 
	~<bôs/wch¨.h
>

29 
	~<bôs/w‹dsize.h
>

34 
	~<bôs/°döt-öä.h
>

37 
	~<bôs/°döt-uöä.h
>

43 sig√d 
	töt_Àa°8_t
;

44 
	töt_Àa°16_t
;

45 
	töt_Àa°32_t
;

46 #i‡
__WORDSIZE
 == 64

47 
	töt_Àa°64_t
;

49 
__exãnsi⁄__


50 
	töt_Àa°64_t
;

54 
	tuöt_Àa°8_t
;

55 
	tuöt_Àa°16_t
;

56 
	tuöt_Àa°32_t
;

57 #i‡
__WORDSIZE
 == 64

58 
	tuöt_Àa°64_t
;

60 
__exãnsi⁄__


61 
	tuöt_Àa°64_t
;

68 sig√d 
	töt_Á°8_t
;

69 #i‡
__WORDSIZE
 == 64

70 
	töt_Á°16_t
;

71 
	töt_Á°32_t
;

72 
	töt_Á°64_t
;

74 
	töt_Á°16_t
;

75 
	töt_Á°32_t
;

76 
__exãnsi⁄__


77 
	töt_Á°64_t
;

81 
	tuöt_Á°8_t
;

82 #i‡
__WORDSIZE
 == 64

83 
	tuöt_Á°16_t
;

84 
	tuöt_Á°32_t
;

85 
	tuöt_Á°64_t
;

87 
	tuöt_Á°16_t
;

88 
	tuöt_Á°32_t
;

89 
__exãnsi⁄__


90 
	tuöt_Á°64_t
;

95 #i‡
__WORDSIZE
 == 64

96 #i‚de‡
__öçå_t_deföed


97 
	töçå_t
;

98 
	#__öçå_t_deföed


	)

100 
	tuöçå_t
;

102 #i‚de‡
__öçå_t_deföed


103 
	töçå_t
;

104 
	#__öçå_t_deföed


	)

106 
	tuöçå_t
;

111 
__ötmax_t
 
	tötmax_t
;

112 
__uötmax_t
 
	tuötmax_t
;

115 #i‡
__WORDSIZE
 == 64

116 
	#__INT64_C
(
c
Ë¯## 
L


	)

117 
	#__UINT64_C
(
c
Ë¯## 
UL


	)

119 
	#__INT64_C
(
c
Ë¯## 
LL


	)

120 
	#__UINT64_C
(
c
Ë¯## 
ULL


	)

126 
	#INT8_MIN
 (-128)

	)

127 
	#INT16_MIN
 (-32767-1)

	)

128 
	#INT32_MIN
 (-2147483647-1)

	)

129 
	#INT64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

131 
	#INT8_MAX
 (127)

	)

132 
	#INT16_MAX
 (32767)

	)

133 
	#INT32_MAX
 (2147483647)

	)

134 
	#INT64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

137 
	#UINT8_MAX
 (255)

	)

138 
	#UINT16_MAX
 (65535)

	)

139 
	#UINT32_MAX
 (4294967295U)

	)

140 
	#UINT64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

144 
	#INT_LEAST8_MIN
 (-128)

	)

145 
	#INT_LEAST16_MIN
 (-32767-1)

	)

146 
	#INT_LEAST32_MIN
 (-2147483647-1)

	)

147 
	#INT_LEAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

149 
	#INT_LEAST8_MAX
 (127)

	)

150 
	#INT_LEAST16_MAX
 (32767)

	)

151 
	#INT_LEAST32_MAX
 (2147483647)

	)

152 
	#INT_LEAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

155 
	#UINT_LEAST8_MAX
 (255)

	)

156 
	#UINT_LEAST16_MAX
 (65535)

	)

157 
	#UINT_LEAST32_MAX
 (4294967295U)

	)

158 
	#UINT_LEAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

162 
	#INT_FAST8_MIN
 (-128)

	)

163 #i‡
__WORDSIZE
 == 64

164 
	#INT_FAST16_MIN
 (-9223372036854775807L-1)

	)

165 
	#INT_FAST32_MIN
 (-9223372036854775807L-1)

	)

167 
	#INT_FAST16_MIN
 (-2147483647-1)

	)

168 
	#INT_FAST32_MIN
 (-2147483647-1)

	)

170 
	#INT_FAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

172 
	#INT_FAST8_MAX
 (127)

	)

173 #i‡
__WORDSIZE
 == 64

174 
	#INT_FAST16_MAX
 (9223372036854775807L)

	)

175 
	#INT_FAST32_MAX
 (9223372036854775807L)

	)

177 
	#INT_FAST16_MAX
 (2147483647)

	)

178 
	#INT_FAST32_MAX
 (2147483647)

	)

180 
	#INT_FAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

183 
	#UINT_FAST8_MAX
 (255)

	)

184 #i‡
__WORDSIZE
 == 64

185 
	#UINT_FAST16_MAX
 (18446744073709551615UL)

	)

186 
	#UINT_FAST32_MAX
 (18446744073709551615UL)

	)

188 
	#UINT_FAST16_MAX
 (4294967295U)

	)

189 
	#UINT_FAST32_MAX
 (4294967295U)

	)

191 
	#UINT_FAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

195 #i‡
__WORDSIZE
 == 64

196 
	#INTPTR_MIN
 (-9223372036854775807L-1)

	)

197 
	#INTPTR_MAX
 (9223372036854775807L)

	)

198 
	#UINTPTR_MAX
 (18446744073709551615UL)

	)

200 
	#INTPTR_MIN
 (-2147483647-1)

	)

201 
	#INTPTR_MAX
 (2147483647)

	)

202 
	#UINTPTR_MAX
 (4294967295U)

	)

207 
	#INTMAX_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

209 
	#INTMAX_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

212 
	#UINTMAX_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

218 #i‡
__WORDSIZE
 == 64

219 
	#PTRDIFF_MIN
 (-9223372036854775807L-1)

	)

220 
	#PTRDIFF_MAX
 (9223372036854775807L)

	)

222 #i‡
__WORDSIZE32_PTRDIFF_LONG


223 
	#PTRDIFF_MIN
 (-2147483647L-1)

	)

224 
	#PTRDIFF_MAX
 (2147483647L)

	)

226 
	#PTRDIFF_MIN
 (-2147483647-1)

	)

227 
	#PTRDIFF_MAX
 (2147483647)

	)

232 
	#SIG_ATOMIC_MIN
 (-2147483647-1)

	)

233 
	#SIG_ATOMIC_MAX
 (2147483647)

	)

236 #i‡
__WORDSIZE
 == 64

237 
	#SIZE_MAX
 (18446744073709551615UL)

	)

239 #i‡
__WORDSIZE32_SIZE_ULONG


240 
	#SIZE_MAX
 (4294967295UL)

	)

242 
	#SIZE_MAX
 (4294967295U)

	)

247 #i‚de‡
WCHAR_MIN


249 
	#WCHAR_MIN
 
__WCHAR_MIN


	)

250 
	#WCHAR_MAX
 
__WCHAR_MAX


	)

254 
	#WINT_MIN
 (0u)

	)

255 
	#WINT_MAX
 (4294967295u)

	)

258 
	#INT8_C
(
c
Ë
	)
c

259 
	#INT16_C
(
c
Ë
	)
c

260 
	#INT32_C
(
c
Ë
	)
c

261 #i‡
__WORDSIZE
 == 64

262 
	#INT64_C
(
c
Ë¯## 
L


	)

264 
	#INT64_C
(
c
Ë¯## 
LL


	)

268 
	#UINT8_C
(
c
Ë
	)
c

269 
	#UINT16_C
(
c
Ë
	)
c

270 
	#UINT32_C
(
c
Ë¯## 
U


	)

271 #i‡
__WORDSIZE
 == 64

272 
	#UINT64_C
(
c
Ë¯## 
UL


	)

274 
	#UINT64_C
(
c
Ë¯## 
ULL


	)

278 #i‡
__WORDSIZE
 == 64

279 
	#INTMAX_C
(
c
Ë¯## 
L


	)

280 
	#UINTMAX_C
(
c
Ë¯## 
UL


	)

282 
	#INTMAX_C
(
c
Ë¯## 
LL


	)

283 
	#UINTMAX_C
(
c
Ë¯## 
ULL


	)

286 #i‡
__GLIBC_USE
 (
IEC_60559_BFP_EXT
)

288 
	#INT8_WIDTH
 8

	)

289 
	#UINT8_WIDTH
 8

	)

290 
	#INT16_WIDTH
 16

	)

291 
	#UINT16_WIDTH
 16

	)

292 
	#INT32_WIDTH
 32

	)

293 
	#UINT32_WIDTH
 32

	)

294 
	#INT64_WIDTH
 64

	)

295 
	#UINT64_WIDTH
 64

	)

297 
	#INT_LEAST8_WIDTH
 8

	)

298 
	#UINT_LEAST8_WIDTH
 8

	)

299 
	#INT_LEAST16_WIDTH
 16

	)

300 
	#UINT_LEAST16_WIDTH
 16

	)

301 
	#INT_LEAST32_WIDTH
 32

	)

302 
	#UINT_LEAST32_WIDTH
 32

	)

303 
	#INT_LEAST64_WIDTH
 64

	)

304 
	#UINT_LEAST64_WIDTH
 64

	)

306 
	#INT_FAST8_WIDTH
 8

	)

307 
	#UINT_FAST8_WIDTH
 8

	)

308 
	#INT_FAST16_WIDTH
 
__WORDSIZE


	)

309 
	#UINT_FAST16_WIDTH
 
__WORDSIZE


	)

310 
	#INT_FAST32_WIDTH
 
__WORDSIZE


	)

311 
	#UINT_FAST32_WIDTH
 
__WORDSIZE


	)

312 
	#INT_FAST64_WIDTH
 64

	)

313 
	#UINT_FAST64_WIDTH
 64

	)

315 
	#INTPTR_WIDTH
 
__WORDSIZE


	)

316 
	#UINTPTR_WIDTH
 
__WORDSIZE


	)

318 
	#INTMAX_WIDTH
 64

	)

319 
	#UINTMAX_WIDTH
 64

	)

321 
	#PTRDIFF_WIDTH
 
__WORDSIZE


	)

322 
	#SIG_ATOMIC_WIDTH
 32

	)

323 
	#SIZE_WIDTH
 
__WORDSIZE


	)

324 
	#WCHAR_WIDTH
 32

	)

325 
	#WINT_WIDTH
 32

	)

	@/usr/include/stdio.h

23 #i‚de‡
_STDIO_H


24 
	#_STDIO_H
 1

	)

26 
	#__GLIBC_INTERNAL_STARTING_HEADER_IMPLEMENTATION


	)

27 
	~<bôs/libc-hódî-°¨t.h
>

29 
	g__BEGIN_DECLS


31 
	#__√ed_size_t


	)

32 
	#__√ed_NULL


	)

33 
	~<°ddef.h
>

35 
	~<bôs/ty≥s.h
>

36 
	~<bôs/ty≥s/__FILE.h
>

37 
	~<bôs/ty≥s/FILE.h
>

39 
	#_STDIO_USES_IOSTREAM


	)

41 
	~<bôs/libio.h
>

43 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


44 #ifde‡
__GNUC__


45 #i‚de‡
_VA_LIST_DEFINED


46 
_G_va_li°
 
	tva_li°
;

47 
	#_VA_LIST_DEFINED


	)

50 
	~<°d¨g.h
>

54 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


55 #i‚de‡
__off_t_deföed


56 #i‚de‡
__USE_FILE_OFFSET64


57 
__off_t
 
	toff_t
;

59 
__off64_t
 
	toff_t
;

61 
	#__off_t_deföed


	)

63 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


64 
__off64_t
 
	toff64_t
;

65 
	#__off64_t_deföed


	)

69 #ifde‡
__USE_XOPEN2K8


70 #i‚de‡
__ssize_t_deföed


71 
__ssize_t
 
	tssize_t
;

72 
	#__ssize_t_deföed


	)

77 #i‚de‡
__USE_FILE_OFFSET64


78 
_G_Âos_t
 
	tÂos_t
;

80 
_G_Âos64_t
 
	tÂos_t
;

82 #ifde‡
__USE_LARGEFILE64


83 
_G_Âos64_t
 
	tÂos64_t
;

87 
	#_IOFBF
 0

	)

88 
	#_IOLBF
 1

	)

89 
	#_IONBF
 2

	)

93 #i‚de‡
BUFSIZ


94 
	#BUFSIZ
 
_IO_BUFSIZ


	)

100 #i‚de‡
EOF


101 
	#EOF
 (-1)

	)

107 
	#SEEK_SET
 0

	)

108 
	#SEEK_CUR
 1

	)

109 
	#SEEK_END
 2

	)

110 #ifde‡
__USE_GNU


111 
	#SEEK_DATA
 3

	)

112 
	#SEEK_HOLE
 4

	)

116 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


118 
	#P_tmpdú
 "/tmp"

	)

131 
	~<bôs/°dio_lim.h
>

135 
_IO_FILE
 *
°dö
;

136 
_IO_FILE
 *
°dout
;

137 
_IO_FILE
 *
°dîr
;

139 
	#°dö
 
°dö


	)

140 
	#°dout
 
°dout


	)

141 
	#°dîr
 
°dîr


	)

144 
	$ªmove
 (c⁄° *
__fûíame
Ë
__THROW
;

146 
	$ª«me
 (c⁄° *
__ﬁd
, c⁄° *
__√w
Ë
__THROW
;

148 #ifde‡
__USE_ATFILE


150 
	$ª«mót
 (
__ﬁdfd
, c⁄° *
__ﬁd
, 
__√wfd
,

151 c⁄° *
__√w
Ë
__THROW
;

158 #i‚de‡
__USE_FILE_OFFSET64


159 
FILE
 *
	$tmpfûe
 (Ë
__wur
;

161 #ifde‡
__REDIRECT


162 
FILE
 *
	`__REDIRECT
 (
tmpfûe
, (), 
tmpfûe64
Ë
__wur
;

164 
	#tmpfûe
 
tmpfûe64


	)

168 #ifde‡
__USE_LARGEFILE64


169 
FILE
 *
	$tmpfûe64
 (Ë
__wur
;

173 *
	$tm≤am
 (*
__s
Ë
__THROW
 
__wur
;

175 #ifde‡
__USE_MISC


178 *
	$tm≤am_r
 (*
__s
Ë
__THROW
 
__wur
;

182 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


190 *
	$ãm≤am
 (c⁄° *
__dú
, c⁄° *
__pfx
)

191 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

199 
	`f˛o£
 (
FILE
 *
__°ªam
);

204 
	`fÊush
 (
FILE
 *
__°ªam
);

206 #ifde‡
__USE_MISC


213 
	`fÊush_u∆ocked
 (
FILE
 *
__°ªam
);

216 #ifde‡
__USE_GNU


223 
	`f˛o£Æl
 ();

227 #i‚de‡
__USE_FILE_OFFSET64


232 
FILE
 *
	$f›í
 (c⁄° *
__ª°ri˘
 
__fûíame
,

233 c⁄° *
__ª°ri˘
 
__modes
Ë
__wur
;

238 
FILE
 *
	$‰e›í
 (c⁄° *
__ª°ri˘
 
__fûíame
,

239 c⁄° *
__ª°ri˘
 
__modes
,

240 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

242 #ifde‡
__REDIRECT


243 
FILE
 *
	`__REDIRECT
 (
f›í
, (c⁄° *
__ª°ri˘
 
__fûíame
,

244 c⁄° *
__ª°ri˘
 
__modes
), 
f›í64
)

245 
__wur
;

246 
FILE
 *
	`__REDIRECT
 (
‰e›í
, (c⁄° *
__ª°ri˘
 
__fûíame
,

247 c⁄° *
__ª°ri˘
 
__modes
,

248 
FILE
 *
__ª°ri˘
 
__°ªam
), 
‰e›í64
)

249 
__wur
;

251 
	#f›í
 
f›í64


	)

252 
	#‰e›í
 
‰e›í64


	)

255 #ifde‡
__USE_LARGEFILE64


256 
FILE
 *
	$f›í64
 (c⁄° *
__ª°ri˘
 
__fûíame
,

257 c⁄° *
__ª°ri˘
 
__modes
Ë
__wur
;

258 
FILE
 *
	$‰e›í64
 (c⁄° *
__ª°ri˘
 
__fûíame
,

259 c⁄° *
__ª°ri˘
 
__modes
,

260 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

263 #ifdef 
__USE_POSIX


265 
FILE
 *
	$fd›í
 (
__fd
, c⁄° *
__modes
Ë
__THROW
 
__wur
;

268 #ifdef 
__USE_GNU


271 
FILE
 *
	$f›ícookõ
 (*
__ª°ri˘
 
__magic_cookõ
,

272 c⁄° *
__ª°ri˘
 
__modes
,

273 
_IO_cookõ_io_fun˘i⁄s_t
 
__io_funcs
Ë
__THROW
 
__wur
;

276 #i‡
deföed
 
__USE_XOPEN2K8
 || 
	`__GLIBC_USE
 (
LIB_EXT2
)

278 
FILE
 *
	$fmem›í
 (*
__s
, 
size_t
 
__Àn
, c⁄° *
__modes
)

279 
__THROW
 
__wur
;

284 
FILE
 *
	$›í_mem°ªam
 (**
__buÊoc
, 
size_t
 *
__sizñoc
Ë
__THROW
 
__wur
;

290 
	$£tbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
Ë
__THROW
;

294 
	$£tvbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

295 
__modes
, 
size_t
 
__n
Ë
__THROW
;

297 #ifdef 
__USE_MISC


300 
	$£tbuf„r
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

301 
size_t
 
__size
Ë
__THROW
;

304 
	$£éöebuf
 (
FILE
 *
__°ªam
Ë
__THROW
;

312 
	`Ârötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

313 c⁄° *
__ª°ri˘
 
__f‹m©
, ...);

318 
	`¥ötf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, ...);

320 
	$•rötf
 (*
__ª°ri˘
 
__s
,

321 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROWNL
;

327 
	`vÂrötf
 (
FILE
 *
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__f‹m©
,

328 
_G_va_li°
 
__¨g
);

333 
	`v¥ötf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
);

335 
	$v•rötf
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__f‹m©
,

336 
_G_va_li°
 
__¨g
Ë
__THROWNL
;

338 #i‡
deföed
 
__USE_ISOC99
 || deföed 
__USE_UNIX98


340 
	$¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

341 c⁄° *
__ª°ri˘
 
__f‹m©
, ...)

342 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

344 
	$v¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

345 c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

346 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

349 #i‡
	`__GLIBC_USE
 (
LIB_EXT2
)

352 
	$va•rötf
 (**
__ª°ri˘
 
__±r
, c⁄° *__ª°ri˘ 
__f
,

353 
_G_va_li°
 
__¨g
)

354 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 0))Ë
__wur
;

355 
	$__a•rötf
 (**
__ª°ri˘
 
__±r
,

356 c⁄° *
__ª°ri˘
 
__fmt
, ...)

357 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 3))Ë
__wur
;

358 
	$a•rötf
 (**
__ª°ri˘
 
__±r
,

359 c⁄° *
__ª°ri˘
 
__fmt
, ...)

360 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 3))Ë
__wur
;

363 #ifde‡
__USE_XOPEN2K8


365 
	$vd¥ötf
 (
__fd
, c⁄° *
__ª°ri˘
 
__fmt
,

366 
_G_va_li°
 
__¨g
)

367 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

368 
	$d¥ötf
 (
__fd
, c⁄° *
__ª°ri˘
 
__fmt
, ...)

369 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

377 
	$fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

378 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

383 
	$sˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

385 
	$ssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

386 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

388 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

389 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

390 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

391 #ifde‡
__REDIRECT


395 
	`__REDIRECT
 (
fsˇnf
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

396 c⁄° *
__ª°ri˘
 
__f‹m©
, ...),

397 
__isoc99_fsˇnf
Ë
__wur
;

398 
	`__REDIRECT
 (
sˇnf
, (c⁄° *
__ª°ri˘
 
__f‹m©
, ...),

399 
__isoc99_sˇnf
Ë
__wur
;

400 
	`__REDIRECT_NTH
 (
ssˇnf
, (c⁄° *
__ª°ri˘
 
__s
,

401 c⁄° *
__ª°ri˘
 
__f‹m©
, ...),

402 
__isoc99_ssˇnf
);

404 
	$__isoc99_fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

405 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

406 
	$__isoc99_sˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

407 
	$__isoc99_ssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

408 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

409 
	#fsˇnf
 
__isoc99_fsˇnf


	)

410 
	#sˇnf
 
__isoc99_sˇnf


	)

411 
	#ssˇnf
 
__isoc99_ssˇnf


	)

415 #ifdef 
__USE_ISOC99


420 
	$vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__f‹m©
,

421 
_G_va_li°
 
__¨g
)

422 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

428 
	$vsˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

429 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

432 
	$vssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

433 c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

434 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

436 #i‡!
deföed
 
__USE_GNU
 \

437 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

438 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

439 #ifde‡
__REDIRECT


443 
	`__REDIRECT
 (
vfsˇnf
,

444 (
FILE
 *
__ª°ri˘
 
__s
,

445 c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
),

446 
__isoc99_vfsˇnf
)

447 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

448 
	`__REDIRECT
 (
vsˇnf
, (c⁄° *
__ª°ri˘
 
__f‹m©
,

449 
_G_va_li°
 
__¨g
), 
__isoc99_vsˇnf
)

450 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

451 
	`__REDIRECT_NTH
 (
vssˇnf
,

452 (c⁄° *
__ª°ri˘
 
__s
,

453 c⁄° *
__ª°ri˘
 
__f‹m©
,

454 
_G_va_li°
 
__¨g
), 
__isoc99_vssˇnf
)

455 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

457 
	$__isoc99_vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
,

458 c⁄° *
__ª°ri˘
 
__f‹m©
,

459 
_G_va_li°
 
__¨g
Ë
__wur
;

460 
	$__isoc99_vsˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
,

461 
_G_va_li°
 
__¨g
Ë
__wur
;

462 
	$__isoc99_vssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

463 c⁄° *
__ª°ri˘
 
__f‹m©
,

464 
_G_va_li°
 
__¨g
Ë
__THROW
;

465 
	#vfsˇnf
 
__isoc99_vfsˇnf


	)

466 
	#vsˇnf
 
__isoc99_vsˇnf


	)

467 
	#vssˇnf
 
__isoc99_vssˇnf


	)

477 
	`fgëc
 (
FILE
 *
__°ªam
);

478 
	`gëc
 (
FILE
 *
__°ªam
);

484 
	`gëch¨
 ();

488 
	#gëc
(
_Â
Ë
	`_IO_gëc
 (_Â)

	)

490 #ifde‡
__USE_POSIX199506


495 
	`gëc_u∆ocked
 (
FILE
 *
__°ªam
);

496 
	`gëch¨_u∆ocked
 ();

499 #ifde‡
__USE_MISC


506 
	`fgëc_u∆ocked
 (
FILE
 *
__°ªam
);

517 
	`Âutc
 (
__c
, 
FILE
 *
__°ªam
);

518 
	`putc
 (
__c
, 
FILE
 *
__°ªam
);

524 
	`putch¨
 (
__c
);

528 
	#putc
(
_ch
, 
_Â
Ë
	`_IO_putc
 (_ch, _Â)

	)

530 #ifde‡
__USE_MISC


537 
	`Âutc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

540 #ifde‡
__USE_POSIX199506


545 
	`putc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

546 
	`putch¨_u∆ocked
 (
__c
);

550 #i‡
deföed
 
__USE_MISC
 \

551 || (
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

553 
	`gëw
 (
FILE
 *
__°ªam
);

556 
	`putw
 (
__w
, 
FILE
 *
__°ªam
);

564 *
	$fgës
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

565 
__wur
;

567 #i‡
	`__GLIBC_USE
 (
DEPRECATED_GETS
)

577 *
	$gës
 (*
__s
Ë
__wur
 
__©åibuã_dïªˇãd__
;

580 #ifde‡
__USE_GNU


587 *
	$fgës_u∆ocked
 (*
__ª°ri˘
 
__s
, 
__n
,

588 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

592 #i‡
deföed
 
__USE_XOPEN2K8
 || 
	`__GLIBC_USE
 (
LIB_EXT2
)

603 
_IO_ssize_t
 
	$__gëdñim
 (**
__ª°ri˘
 
__löïå
,

604 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

605 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

606 
_IO_ssize_t
 
	$gëdñim
 (**
__ª°ri˘
 
__löïå
,

607 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

608 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

616 
_IO_ssize_t
 
	$gëlöe
 (**
__ª°ri˘
 
__löïå
,

617 
size_t
 *
__ª°ri˘
 
__n
,

618 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

626 
	`Âuts
 (c⁄° *
__ª°ri˘
 
__s
, 
FILE
 *__ª°ri˘ 
__°ªam
);

632 
	`puts
 (c⁄° *
__s
);

639 
	`ungëc
 (
__c
, 
FILE
 *
__°ªam
);

646 
size_t
 
	$‰ód
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

647 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

652 
size_t
 
	`fwrôe
 (c⁄° *
__ª°ri˘
 
__±r
, size_à
__size
,

653 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__s
);

655 #ifde‡
__USE_GNU


662 
	`Âuts_u∆ocked
 (c⁄° *
__ª°ri˘
 
__s
,

663 
FILE
 *
__ª°ri˘
 
__°ªam
);

666 #ifde‡
__USE_MISC


673 
size_t
 
	$‰ód_u∆ocked
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

674 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

675 
size_t
 
	`fwrôe_u∆ocked
 (c⁄° *
__ª°ri˘
 
__±r
, size_à
__size
,

676 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
);

684 
	`f£ek
 (
FILE
 *
__°ªam
, 
__off
, 
__whí˚
);

689 
	$·ñl
 (
FILE
 *
__°ªam
Ë
__wur
;

694 
	`ªwöd
 (
FILE
 *
__°ªam
);

701 #i‡
deföed
 
__USE_LARGEFILE
 || deföed 
__USE_XOPEN2K


702 #i‚de‡
__USE_FILE_OFFSET64


707 
	`f£eko
 (
FILE
 *
__°ªam
, 
__off_t
 
__off
, 
__whí˚
);

712 
__off_t
 
	$·ñlo
 (
FILE
 *
__°ªam
Ë
__wur
;

714 #ifde‡
__REDIRECT


715 
	`__REDIRECT
 (
f£eko
,

716 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
),

717 
f£eko64
);

718 
__off64_t
 
	`__REDIRECT
 (
·ñlo
, (
FILE
 *
__°ªam
), 
·ñlo64
);

720 
	#f£eko
 
f£eko64


	)

721 
	#·ñlo
 
·ñlo64


	)

726 #i‚de‡
__USE_FILE_OFFSET64


731 
	`fgëpos
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos_t
 *__ª°ri˘ 
__pos
);

736 
	`f£ços
 (
FILE
 *
__°ªam
, c⁄° 
Âos_t
 *
__pos
);

738 #ifde‡
__REDIRECT


739 
	`__REDIRECT
 (
fgëpos
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

740 
Âos_t
 *
__ª°ri˘
 
__pos
), 
fgëpos64
);

741 
	`__REDIRECT
 (
f£ços
,

742 (
FILE
 *
__°ªam
, c⁄° 
Âos_t
 *
__pos
), 
f£ços64
);

744 
	#fgëpos
 
fgëpos64


	)

745 
	#f£ços
 
f£ços64


	)

749 #ifde‡
__USE_LARGEFILE64


750 
	`f£eko64
 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
);

751 
__off64_t
 
	$·ñlo64
 (
FILE
 *
__°ªam
Ë
__wur
;

752 
	`fgëpos64
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos64_t
 *__ª°ri˘ 
__pos
);

753 
	`f£ços64
 (
FILE
 *
__°ªam
, c⁄° 
Âos64_t
 *
__pos
);

757 
	$˛óªº
 (
FILE
 *
__°ªam
Ë
__THROW
;

759 
	$„of
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

761 
	$„º‹
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

763 #ifde‡
__USE_MISC


765 
	$˛óªº_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
;

766 
	$„of_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

767 
	$„º‹_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

775 
	`≥º‹
 (c⁄° *
__s
);

781 
	~<bôs/sys_îæi°.h
>

784 #ifdef 
__USE_POSIX


786 
	$fûío
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

789 #ifde‡
__USE_MISC


791 
	$fûío_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

795 #ifde‡
__USE_POSIX2


800 
FILE
 *
	$p›í
 (c⁄° *
__comm™d
, c⁄° *
__modes
Ë
__wur
;

806 
	`p˛o£
 (
FILE
 *
__°ªam
);

810 #ifdef 
__USE_POSIX


812 *
	$˘îmid
 (*
__s
Ë
__THROW
;

816 #i‡(
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
Ë|| deföed 
__USE_GNU


818 *
	`cu£rid
 (*
__s
);

822 #ifdef 
__USE_GNU


823 
ob°ack
;

826 
	$ob°ack_¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

827 c⁄° *
__ª°ri˘
 
__f‹m©
, ...)

828 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

829 
	$ob°ack_v¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

830 c⁄° *
__ª°ri˘
 
__f‹m©
,

831 
_G_va_li°
 
__¨gs
)

832 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

836 #ifde‡
__USE_POSIX199506


840 
	$Êockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

844 
	$·rylockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

847 
	$fu∆ockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

850 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


853 
	~<bôs/gë›t_posix.h
>

858 #ifde‡
__USE_EXTERN_INLINES


859 
	~<bôs/°dio.h
>

861 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


862 
	~<bôs/°dio2.h
>

864 #ifde‡
__LDBL_COMPAT


865 
	~<bôs/°dio-ldbl.h
>

868 
__END_DECLS


	@/usr/include/stdlib.h

22 #i‚def 
_STDLIB_H


24 
	#__GLIBC_INTERNAL_STARTING_HEADER_IMPLEMENTATION


	)

25 
	~<bôs/libc-hódî-°¨t.h
>

28 
	#__√ed_size_t


	)

29 
	#__√ed_wch¨_t


	)

30 
	#__√ed_NULL


	)

31 
	~<°ddef.h
>

33 
	g__BEGIN_DECLS


35 
	#_STDLIB_H
 1

	)

37 #i‡(
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8
Ë&& !deföed 
_SYS_WAIT_H


39 
	~<bôs/waôÊags.h
>

40 
	~<bôs/waô°©us.h
>

43 
	#WEXITSTATUS
(
°©us
Ë
	`__WEXITSTATUS
 (°©us)

	)

44 
	#WTERMSIG
(
°©us
Ë
	`__WTERMSIG
 (°©us)

	)

45 
	#WSTOPSIG
(
°©us
Ë
	`__WSTOPSIG
 (°©us)

	)

46 
	#WIFEXITED
(
°©us
Ë
	`__WIFEXITED
 (°©us)

	)

47 
	#WIFSIGNALED
(
°©us
Ë
	`__WIFSIGNALED
 (°©us)

	)

48 
	#WIFSTOPPED
(
°©us
Ë
	`__WIFSTOPPED
 (°©us)

	)

49 #ifde‡
__WIFCONTINUED


50 
	#WIFCONTINUED
(
°©us
Ë
	`__WIFCONTINUED
 (°©us)

	)

55 
	~<bôs/Êﬂä.h
>

60 
	mquŸ
;

61 
	mªm
;

62 } 
	tdiv_t
;

65 #i‚de‡
__ldiv_t_deföed


68 
	mquŸ
;

69 
	mªm
;

70 } 
	tldiv_t
;

71 
	#__ldiv_t_deföed
 1

	)

74 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__Œdiv_t_deföed


76 
__exãnsi⁄__
 struct

78 
	mquŸ
;

79 
	mªm
;

80 } 
	tŒdiv_t
;

81 
	#__Œdiv_t_deföed
 1

	)

86 
	#RAND_MAX
 2147483647

	)

91 
	#EXIT_FAILURE
 1

	)

92 
	#EXIT_SUCCESS
 0

	)

96 
	#MB_CUR_MAX
 (
	`__˘y≥_gë_mb_cur_max
 ())

	)

97 
size_t
 
	$__˘y≥_gë_mb_cur_max
 (Ë
__THROW
 
__wur
;

101 
	$©of
 (c⁄° *
__≈å
)

102 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

104 
	$©oi
 (c⁄° *
__≈å
)

105 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

107 
	$©ﬁ
 (c⁄° *
__≈å
)

108 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

110 #ifde‡
__USE_ISOC99


112 
__exãnsi⁄__
 
	$©ﬁl
 (c⁄° *
__≈å
)

113 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

117 
	$°πod
 (c⁄° *
__ª°ri˘
 
__≈å
,

118 **
__ª°ri˘
 
__íd±r
)

119 
__THROW
 
	`__n⁄nuŒ
 ((1));

121 #ifdef 
__USE_ISOC99


123 
	$°πof
 (c⁄° *
__ª°ri˘
 
__≈å
,

124 **
__ª°ri˘
 
__íd±r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

126 
	$°πﬁd
 (c⁄° *
__ª°ri˘
 
__≈å
,

127 **
__ª°ri˘
 
__íd±r
)

128 
__THROW
 
	`__n⁄nuŒ
 ((1));

133 #i‡
__HAVE_FLOAT16
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

134 
_Flﬂt16
 
	$°πof16
 (c⁄° *
__ª°ri˘
 
__≈å
,

135 **
__ª°ri˘
 
__íd±r
)

136 
__THROW
 
	`__n⁄nuŒ
 ((1));

139 #i‡
__HAVE_FLOAT32
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

140 
_Flﬂt32
 
	$°πof32
 (c⁄° *
__ª°ri˘
 
__≈å
,

141 **
__ª°ri˘
 
__íd±r
)

142 
__THROW
 
	`__n⁄nuŒ
 ((1));

145 #i‡
__HAVE_FLOAT64
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

146 
_Flﬂt64
 
	$°πof64
 (c⁄° *
__ª°ri˘
 
__≈å
,

147 **
__ª°ri˘
 
__íd±r
)

148 
__THROW
 
	`__n⁄nuŒ
 ((1));

151 #i‡
__HAVE_FLOAT128
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

152 
_Flﬂt128
 
	$°πof128
 (c⁄° *
__ª°ri˘
 
__≈å
,

153 **
__ª°ri˘
 
__íd±r
)

154 
__THROW
 
	`__n⁄nuŒ
 ((1));

157 #i‡
__HAVE_FLOAT32X
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

158 
_Flﬂt32x
 
	$°πof32x
 (c⁄° *
__ª°ri˘
 
__≈å
,

159 **
__ª°ri˘
 
__íd±r
)

160 
__THROW
 
	`__n⁄nuŒ
 ((1));

163 #i‡
__HAVE_FLOAT64X
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

164 
_Flﬂt64x
 
	$°πof64x
 (c⁄° *
__ª°ri˘
 
__≈å
,

165 **
__ª°ri˘
 
__íd±r
)

166 
__THROW
 
	`__n⁄nuŒ
 ((1));

169 #i‡
__HAVE_FLOAT128X
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

170 
_Flﬂt128x
 
	$°πof128x
 (c⁄° *
__ª°ri˘
 
__≈å
,

171 **
__ª°ri˘
 
__íd±r
)

172 
__THROW
 
	`__n⁄nuŒ
 ((1));

176 
	$°πﬁ
 (c⁄° *
__ª°ri˘
 
__≈å
,

177 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

178 
__THROW
 
	`__n⁄nuŒ
 ((1));

180 
	$°πoul
 (c⁄° *
__ª°ri˘
 
__≈å
,

181 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

182 
__THROW
 
	`__n⁄nuŒ
 ((1));

184 #ifde‡
__USE_MISC


186 
__exãnsi⁄__


187 
	$°πoq
 (c⁄° *
__ª°ri˘
 
__≈å
,

188 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

189 
__THROW
 
	`__n⁄nuŒ
 ((1));

191 
__exãnsi⁄__


192 
	$°πouq
 (c⁄° *
__ª°ri˘
 
__≈å
,

193 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

194 
__THROW
 
	`__n⁄nuŒ
 ((1));

197 #ifde‡
__USE_ISOC99


199 
__exãnsi⁄__


200 
	$°πﬁl
 (c⁄° *
__ª°ri˘
 
__≈å
,

201 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

202 
__THROW
 
	`__n⁄nuŒ
 ((1));

204 
__exãnsi⁄__


205 
	$°πouŒ
 (c⁄° *
__ª°ri˘
 
__≈å
,

206 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

207 
__THROW
 
	`__n⁄nuŒ
 ((1));

211 #i‡
	`__GLIBC_USE
 (
IEC_60559_BFP_EXT
)

212 
	$°r‰omd
 (*
__de°
, 
size_t
 
__size
, c⁄° *
__f‹m©
,

213 
__f
)

214 
__THROW
 
	`__n⁄nuŒ
 ((3));

216 
	$°r‰omf
 (*
__de°
, 
size_t
 
__size
, c⁄° *
__f‹m©
,

217 
__f
)

218 
__THROW
 
	`__n⁄nuŒ
 ((3));

220 
	$°r‰oml
 (*
__de°
, 
size_t
 
__size
, c⁄° *
__f‹m©
,

221 
__f
)

222 
__THROW
 
	`__n⁄nuŒ
 ((3));

225 #i‡
__HAVE_FLOAT16
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

226 
	$°r‰omf16
 (*
__de°
, 
size_t
 
__size
, c⁄° * 
__f‹m©
,

227 
_Flﬂt16
 
__f
)

228 
__THROW
 
	`__n⁄nuŒ
 ((3));

231 #i‡
__HAVE_FLOAT32
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

232 
	$°r‰omf32
 (*
__de°
, 
size_t
 
__size
, c⁄° * 
__f‹m©
,

233 
_Flﬂt32
 
__f
)

234 
__THROW
 
	`__n⁄nuŒ
 ((3));

237 #i‡
__HAVE_FLOAT64
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

238 
	$°r‰omf64
 (*
__de°
, 
size_t
 
__size
, c⁄° * 
__f‹m©
,

239 
_Flﬂt64
 
__f
)

240 
__THROW
 
	`__n⁄nuŒ
 ((3));

243 #i‡
__HAVE_FLOAT128
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

244 
	$°r‰omf128
 (*
__de°
, 
size_t
 
__size
, c⁄° * 
__f‹m©
,

245 
_Flﬂt128
 
__f
)

246 
__THROW
 
	`__n⁄nuŒ
 ((3));

249 #i‡
__HAVE_FLOAT32X
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

250 
	$°r‰omf32x
 (*
__de°
, 
size_t
 
__size
, c⁄° * 
__f‹m©
,

251 
_Flﬂt32x
 
__f
)

252 
__THROW
 
	`__n⁄nuŒ
 ((3));

255 #i‡
__HAVE_FLOAT64X
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

256 
	$°r‰omf64x
 (*
__de°
, 
size_t
 
__size
, c⁄° * 
__f‹m©
,

257 
_Flﬂt64x
 
__f
)

258 
__THROW
 
	`__n⁄nuŒ
 ((3));

261 #i‡
__HAVE_FLOAT128X
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

262 
	$°r‰omf128x
 (*
__de°
, 
size_t
 
__size
, c⁄° * 
__f‹m©
,

263 
_Flﬂt128x
 
__f
)

264 
__THROW
 
	`__n⁄nuŒ
 ((3));

268 #ifde‡
__USE_GNU


272 
	~<bôs/ty≥s/loˇÀ_t.h
>

274 
	$°πﬁ_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

275 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

276 
loˇÀ_t
 
__loc
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

278 
	$°πoul_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

279 **
__ª°ri˘
 
__íd±r
,

280 
__ba£
, 
loˇÀ_t
 
__loc
)

281 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

283 
__exãnsi⁄__


284 
	$°πﬁl_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

285 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

286 
loˇÀ_t
 
__loc
)

287 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

289 
__exãnsi⁄__


290 
	$°πouŒ_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

291 **
__ª°ri˘
 
__íd±r
,

292 
__ba£
, 
loˇÀ_t
 
__loc
)

293 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

295 
	$°πod_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

296 **
__ª°ri˘
 
__íd±r
, 
loˇÀ_t
 
__loc
)

297 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

299 
	$°πof_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

300 **
__ª°ri˘
 
__íd±r
, 
loˇÀ_t
 
__loc
)

301 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

303 
	$°πﬁd_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

304 **
__ª°ri˘
 
__íd±r
,

305 
loˇÀ_t
 
__loc
)

306 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

308 #i‡
__HAVE_FLOAT16


309 
_Flﬂt16
 
	$°πof16_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

310 **
__ª°ri˘
 
__íd±r
,

311 
loˇÀ_t
 
__loc
)

312 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

315 #i‡
__HAVE_FLOAT32


316 
_Flﬂt32
 
	$°πof32_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

317 **
__ª°ri˘
 
__íd±r
,

318 
loˇÀ_t
 
__loc
)

319 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

322 #i‡
__HAVE_FLOAT64


323 
_Flﬂt64
 
	$°πof64_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

324 **
__ª°ri˘
 
__íd±r
,

325 
loˇÀ_t
 
__loc
)

326 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

329 #i‡
__HAVE_FLOAT128


330 
_Flﬂt128
 
	$°πof128_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

331 **
__ª°ri˘
 
__íd±r
,

332 
loˇÀ_t
 
__loc
)

333 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

336 #i‡
__HAVE_FLOAT32X


337 
_Flﬂt32x
 
	$°πof32x_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

338 **
__ª°ri˘
 
__íd±r
,

339 
loˇÀ_t
 
__loc
)

340 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

343 #i‡
__HAVE_FLOAT64X


344 
_Flﬂt64x
 
	$°πof64x_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

345 **
__ª°ri˘
 
__íd±r
,

346 
loˇÀ_t
 
__loc
)

347 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

350 #i‡
__HAVE_FLOAT128X


351 
_Flﬂt128x
 
	$°πof128x_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

352 **
__ª°ri˘
 
__íd±r
,

353 
loˇÀ_t
 
__loc
)

354 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

359 #ifde‡
__USE_EXTERN_INLINES


360 
__exã∫_ölöe
 

361 
	`__NTH
 (
	$©oi
 (c⁄° *
__≈å
))

363  (Ë
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

364 
	}
}

365 
__exã∫_ölöe
 

366 
__NTH
 (
	$©ﬁ
 (c⁄° *
__≈å
))

368  
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

369 
	}
}

371 #ifde‡
__USE_ISOC99


372 
__exãnsi⁄__
 
__exã∫_ölöe
 

373 
__NTH
 (
	$©ﬁl
 (c⁄° *
__≈å
))

375  
	`°πﬁl
 (
__≈å
, (**Ë
NULL
, 10);

376 
	}
}

381 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


385 *
	$l64a
 (
__n
Ë
__THROW
 
__wur
;

388 
	$a64l
 (c⁄° *
__s
)

389 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

393 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


394 
	~<sys/ty≥s.h
>

401 
	$øndom
 (Ë
__THROW
;

404 
	$§™dom
 (
__£ed
Ë
__THROW
;

410 *
	$öô°©e
 (
__£ed
, *
__°©ebuf
,

411 
size_t
 
__°©ñí
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

415 *
	$£t°©e
 (*
__°©ebuf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

418 #ifde‡
__USE_MISC


423 
	søndom_d©a


425 
öt32_t
 *
Âå
;

426 
öt32_t
 *
Ωå
;

427 
öt32_t
 *
°©e
;

428 
ønd_ty≥
;

429 
ønd_deg
;

430 
ønd_£p
;

431 
öt32_t
 *
íd_±r
;

434 
	$øndom_r
 (
øndom_d©a
 *
__ª°ri˘
 
__buf
,

435 
öt32_t
 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

437 
	$§™dom_r
 (
__£ed
, 
øndom_d©a
 *
__buf
)

438 
__THROW
 
	`__n⁄nuŒ
 ((2));

440 
	$öô°©e_r
 (
__£ed
, *
__ª°ri˘
 
__°©ebuf
,

441 
size_t
 
__°©ñí
,

442 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

443 
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

445 
	$£t°©e_r
 (*
__ª°ri˘
 
__°©ebuf
,

446 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

447 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

453 
	$ønd
 (Ë
__THROW
;

455 
	$§™d
 (
__£ed
Ë
__THROW
;

457 #ifde‡
__USE_POSIX199506


459 
	$ønd_r
 (*
__£ed
Ë
__THROW
;

463 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


467 
	$dønd48
 (Ë
__THROW
;

468 
	$î™d48
 (
__xsubi
[3]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

471 
	$Ã™d48
 (Ë
__THROW
;

472 
	$ƒ™d48
 (
__xsubi
[3])

473 
__THROW
 
	`__n⁄nuŒ
 ((1));

476 
	$mønd48
 (Ë
__THROW
;

477 
	$jønd48
 (
__xsubi
[3])

478 
__THROW
 
	`__n⁄nuŒ
 ((1));

481 
	$§™d48
 (
__£edvÆ
Ë
__THROW
;

482 *
	$£ed48
 (
__£ed16v
[3])

483 
__THROW
 
	`__n⁄nuŒ
 ((1));

484 
	$lc⁄g48
 (
__∑øm
[7]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

486 #ifde‡
__USE_MISC


490 
	sdønd48_d©a


492 
__x
[3];

493 
__ﬁd_x
[3];

494 
__c
;

495 
__öô
;

496 
__exãnsi⁄__
 
__a
;

501 
	$dønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

502 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

503 
	$î™d48_r
 (
__xsubi
[3],

504 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

505 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

508 
	$Ã™d48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

509 *
__ª°ri˘
 
__ªsu…
)

510 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

511 
	$ƒ™d48_r
 (
__xsubi
[3],

512 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

513 *
__ª°ri˘
 
__ªsu…
)

514 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

517 
	$mønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

518 *
__ª°ri˘
 
__ªsu…
)

519 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

520 
	$jønd48_r
 (
__xsubi
[3],

521 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

522 *
__ª°ri˘
 
__ªsu…
)

523 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

526 
	$§™d48_r
 (
__£edvÆ
, 
dønd48_d©a
 *
__buf„r
)

527 
__THROW
 
	`__n⁄nuŒ
 ((2));

529 
	$£ed48_r
 (
__£ed16v
[3],

530 
dønd48_d©a
 *
__buf„r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

532 
	$lc⁄g48_r
 (
__∑øm
[7],

533 
dønd48_d©a
 *
__buf„r
)

534 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

539 *
	$mÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

541 *
	$ˇŒoc
 (
size_t
 
__nmemb
, size_à
__size
)

542 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

549 *
	$ªÆloc
 (*
__±r
, 
size_t
 
__size
)

550 
__THROW
 
__©åibuã_w¨n_unu£d_ªsu…__
;

552 #ifde‡
__USE_GNU


558 *
	$ªÆloˇºay
 (*
__±r
, 
size_t
 
__nmemb
, size_à
__size
)

559 
__THROW
 
__©åibuã_w¨n_unu£d_ªsu…__
;

563 
	$‰ì
 (*
__±r
Ë
__THROW
;

565 #ifde‡
__USE_MISC


566 
	~<Æloˇ.h
>

569 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

570 || 
deföed
 
__USE_MISC


572 *
	$vÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

575 #ifde‡
__USE_XOPEN2K


577 
	$posix_memÆign
 (**
__mem±r
, 
size_t
 
__Æignmít
, size_à
__size
)

578 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

581 #ifde‡
__USE_ISOC11


583 *
	$Æig√d_Æloc
 (
size_t
 
__Æignmít
, size_à
__size
)

584 
__THROW
 
__©åibuã_mÆloc__
 
	`__©åibuã_Æloc_size__
 ((2)Ë
__wur
;

588 
	$ab‹t
 (Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

592 
	$©exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

594 #i‡
deföed
 
__USE_ISOC11
 || deföed 
__USE_ISOCXX11


596 #ifde‡
__˝lu•lus


597 "C++" 
	$©_quick_exô
 ((*
__func
) ())

598 
__THROW
 
	`__asm
 ("©_quick_exô"Ë
	`__n⁄nuŒ
 ((1));

600 
	$©_quick_exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

604 #ifdef 
__USE_MISC


607 
	$⁄_exô
 ((*
__func
Ë(
__°©us
, *
__¨g
), *__arg)

608 
__THROW
 
	`__n⁄nuŒ
 ((1));

614 
	$exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

616 #i‡
deföed
 
__USE_ISOC11
 || deföed 
__USE_ISOCXX11


620 
	$quick_exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

623 #ifde‡
__USE_ISOC99


626 
	$_Exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

631 *
	$gëív
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

633 #ifde‡
__USE_GNU


636 *
	$£cuª_gëív
 (c⁄° *
__«me
)

637 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

640 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


644 
	$puãnv
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

647 #ifde‡
__USE_XOPEN2K


650 
	$£ãnv
 (c⁄° *
__«me
, c⁄° *
__vÆue
, 
__ª∂a˚
)

651 
__THROW
 
	`__n⁄nuŒ
 ((2));

654 
	$un£ãnv
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

657 #ifdef 
__USE_MISC


661 
	$˛óªnv
 (Ë
__THROW
;

665 #i‡
deföed
 
__USE_MISC
 \

666 || (
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
)

672 *
	$mkãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

675 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


684 #i‚de‡
__USE_FILE_OFFSET64


685 
	$mk°emp
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

687 #ifde‡
__REDIRECT


688 
	`__REDIRECT
 (
mk°emp
, (*
__ãm∂©e
), 
mk°emp64
)

689 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

691 
	#mk°emp
 
mk°emp64


	)

694 #ifde‡
__USE_LARGEFILE64


695 
	$mk°emp64
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

699 #ifde‡
__USE_MISC


706 #i‚de‡
__USE_FILE_OFFSET64


707 
	$mk°emps
 (*
__ãm∂©e
, 
__suffixÀn
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

709 #ifde‡
__REDIRECT


710 
	`__REDIRECT
 (
mk°emps
, (*
__ãm∂©e
, 
__suffixÀn
),

711 
mk°emps64
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

713 
	#mk°emps
 
mk°emps64


	)

716 #ifde‡
__USE_LARGEFILE64


717 
	$mk°emps64
 (*
__ãm∂©e
, 
__suffixÀn
)

718 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

722 #ifde‡
__USE_XOPEN2K8


728 *
	$mkdãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

731 #ifde‡
__USE_GNU


738 #i‚de‡
__USE_FILE_OFFSET64


739 
	$mko°emp
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

741 #ifde‡
__REDIRECT


742 
	`__REDIRECT
 (
mko°emp
, (*
__ãm∂©e
, 
__Êags
), 
mko°emp64
)

743 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

745 
	#mko°emp
 
mko°emp64


	)

748 #ifde‡
__USE_LARGEFILE64


749 
	$mko°emp64
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

758 #i‚de‡
__USE_FILE_OFFSET64


759 
	$mko°emps
 (*
__ãm∂©e
, 
__suffixÀn
, 
__Êags
)

760 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

762 #ifde‡
__REDIRECT


763 
	`__REDIRECT
 (
mko°emps
, (*
__ãm∂©e
, 
__suffixÀn
,

764 
__Êags
), 
mko°emps64
)

765 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

767 
	#mko°emps
 
mko°emps64


	)

770 #ifde‡
__USE_LARGEFILE64


771 
	$mko°emps64
 (*
__ãm∂©e
, 
__suffixÀn
, 
__Êags
)

772 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

781 
	$sy°em
 (c⁄° *
__comm™d
Ë
__wur
;

784 #ifdef 
__USE_GNU


787 *
	$ˇn⁄iˇlize_fûe_«me
 (c⁄° *
__«me
)

788 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

791 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


797 *
	$ªÆ∑th
 (c⁄° *
__ª°ri˘
 
__«me
,

798 *
__ª°ri˘
 
__ªsﬁved
Ë
__THROW
 
__wur
;

803 #i‚de‡
__COMPAR_FN_T


804 
	#__COMPAR_FN_T


	)

805 (*
	t__com∑r_‚_t
) (const *, const *);

807 #ifdef 
__USE_GNU


808 
__com∑r_‚_t
 
	tcom∑ris⁄_‚_t
;

811 #ifde‡
__USE_GNU


812 (*
	t__com∑r_d_‚_t
) (const *, const *, *);

817 *
	$b£¨ch
 (c⁄° *
__key
, c⁄° *
__ba£
,

818 
size_t
 
__nmemb
, size_à
__size
, 
__com∑r_‚_t
 
__com∑r
)

819 
	`__n⁄nuŒ
 ((1, 2, 5)Ë
__wur
;

821 #ifde‡
__USE_EXTERN_INLINES


822 
	~<bôs/°dlib-b£¨ch.h
>

827 
	$qs‹t
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

828 
__com∑r_‚_t
 
__com∑r
Ë
	`__n⁄nuŒ
 ((1, 4));

829 #ifde‡
__USE_GNU


830 
	$qs‹t_r
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

831 
__com∑r_d_‚_t
 
__com∑r
, *
__¨g
)

832 
	`__n⁄nuŒ
 ((1, 4));

837 
	$abs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

838 
	$œbs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

840 #ifde‡
__USE_ISOC99


841 
__exãnsi⁄__
 
	$Œabs
 (
__x
)

842 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

849 
div_t
 
	$div
 (
__numî
, 
__díom
)

850 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

851 
ldiv_t
 
	$ldiv
 (
__numî
, 
__díom
)

852 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

854 #ifde‡
__USE_ISOC99


855 
__exãnsi⁄__
 
Œdiv_t
 
	$Œdiv
 (
__numî
,

856 
__díom
)

857 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

861 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

862 || 
deföed
 
__USE_MISC


869 *
	$ecvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

870 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

875 *
	$fcvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

876 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

881 *
	$gcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

882 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

885 #ifde‡
__USE_MISC


887 *
	$qecvt
 (
__vÆue
, 
__ndigô
,

888 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

889 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

890 *
	$qfcvt
 (
__vÆue
, 
__ndigô
,

891 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

892 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

893 *
	$qgcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

894 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

899 
	$ecvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

900 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

901 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

902 
	$fcvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

903 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

904 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

906 
	$qecvt_r
 (
__vÆue
, 
__ndigô
,

907 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

908 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

909 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

910 
	$qfcvt_r
 (
__vÆue
, 
__ndigô
,

911 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

912 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

913 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

919 
	$mbÀn
 (c⁄° *
__s
, 
size_t
 
__n
Ë
__THROW
;

922 
	$mbtowc
 (
wch¨_t
 *
__ª°ri˘
 
__pwc
,

923 c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
;

926 
	$w˘omb
 (*
__s
, 
wch¨_t
 
__wch¨
Ë
__THROW
;

930 
size_t
 
	$mb°owcs
 (
wch¨_t
 *
__ª°ri˘
 
__pwcs
,

931 c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
;

933 
size_t
 
	$wc°ombs
 (*
__ª°ri˘
 
__s
,

934 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__pwcs
, 
size_t
 
__n
)

935 
__THROW
;

938 #ifde‡
__USE_MISC


943 
	$Ωm©ch
 (c⁄° *
__ª•⁄£
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

947 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


954 
	$gësub›t
 (**
__ª°ri˘
 
__›ti⁄p
,

955 *c⁄° *
__ª°ri˘
 
__tokís
,

956 **
__ª°ri˘
 
__vÆuï
)

957 
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3)Ë
__wur
;

961 #ifde‡
__USE_XOPEN


963 
	$£tkey
 (c⁄° *
__key
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

969 #ifde‡
__USE_XOPEN2KXSI


971 
	$posix_›í±
 (
__oÊag
Ë
__wur
;

974 #ifde‡
__USE_XOPEN_EXTENDED


979 
	$gø¡±
 (
__fd
Ë
__THROW
;

983 
	$u∆ock±
 (
__fd
Ë
__THROW
;

988 *
	$±¢ame
 (
__fd
Ë
__THROW
 
__wur
;

991 #ifde‡
__USE_GNU


995 
	$±¢ame_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
)

996 
__THROW
 
	`__n⁄nuŒ
 ((2));

999 
	`gë±
 ();

1002 #ifde‡
__USE_MISC


1006 
	$gëlﬂdavg
 (
__lﬂdavg
[], 
__√Àm
)

1007 
__THROW
 
	`__n⁄nuŒ
 ((1));

1010 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K


1013 
	$ây¶Ÿ
 (Ë
__THROW
;

1016 
	~<bôs/°dlib-Êﬂt.h
>

1019 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


1020 
	~<bôs/°dlib.h
>

1022 #ifde‡
__LDBL_COMPAT


1023 
	~<bôs/°dlib-ldbl.h
>

1026 
__END_DECLS


	@/usr/include/string.h

22 #i‚def 
_STRING_H


23 
	#_STRING_H
 1

	)

25 
	#__GLIBC_INTERNAL_STARTING_HEADER_IMPLEMENTATION


	)

26 
	~<bôs/libc-hódî-°¨t.h
>

28 
	g__BEGIN_DECLS


31 
	#__√ed_size_t


	)

32 
	#__√ed_NULL


	)

33 
	~<°ddef.h
>

36 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (4, 4)

37 
	#__CORRECT_ISO_CPP_STRING_H_PROTO


	)

42 *
	$mem˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

43 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

46 *
	$memmove
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
)

47 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

52 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


53 *
	$memc˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

54 
__c
, 
size_t
 
__n
)

55 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

60 *
	$mem£t
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

63 
	$memcmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

64 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

67 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


70 *
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

71 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

72 c⁄° *
	`memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

73 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

75 #ifde‡
__OPTIMIZE__


76 
__exã∫_Æways_ölöe
 *

77 
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


79  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

82 
__exã∫_Æways_ölöe
 const *

83 
	`memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


85  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

88 
	}
}

90 *
	$memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

91 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

94 #ifde‡
__USE_GNU


97 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


98 "C++" *
	$øwmemchr
 (*
__s
, 
__c
)

99 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

100 "C++" c⁄° *
	$øwmemchr
 (c⁄° *
__s
, 
__c
)

101 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

103 *
	$øwmemchr
 (c⁄° *
__s
, 
__c
)

104 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

108 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


109 "C++" *
	$memrchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

110 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

111 "C++" c⁄° *
	$memrchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

112 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

114 *
	$memrchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

115 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

121 *
	$°r˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

122 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

124 *
	$°∫˝y
 (*
__ª°ri˘
 
__de°
,

125 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

126 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

129 *
	$°rˇt
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

130 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

132 *
	$°∫ˇt
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

133 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

136 
	$°rcmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

137 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

139 
	$°∫cmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

140 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

143 
	$°rcﬁl
 (c⁄° *
__s1
, c⁄° *
__s2
)

144 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

146 
size_t
 
	$°rx‰m
 (*
__ª°ri˘
 
__de°
,

147 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

148 
__THROW
 
	`__n⁄nuŒ
 ((2));

150 #ifde‡
__USE_XOPEN2K8


152 
	~<bôs/ty≥s/loˇÀ_t.h
>

155 
	$°rcﬁl_l
 (c⁄° *
__s1
, c⁄° *
__s2
, 
loˇÀ_t
 
__l
)

156 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

159 
size_t
 
	$°rx‰m_l
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
,

160 
loˇÀ_t
 
__l
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

163 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8
 \

164 || 
	$__GLIBC_USE
 (
LIB_EXT2
))

166 *
	$°rdup
 (c⁄° *
__s
)

167 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

173 #i‡
deföed
 
__USE_XOPEN2K8
 || 
	`__GLIBC_USE
 (
LIB_EXT2
)

174 *
	$°∫dup
 (c⁄° *
__°rög
, 
size_t
 
__n
)

175 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

178 #i‡
deföed
 
__USE_GNU
 && deföed 
__GNUC__


180 
	#°rdu∑
(
s
) \

181 (
__exãnsi⁄__
 \

183 c⁄° *
__ﬁd
 = (
s
); \

184 
size_t
 
__Àn
 = 
	`°æí
 (
__ﬁd
) + 1; \

185 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
); \

186 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

187 
	}
}))

	)

190 
	#°∫du∑
(
s
, 
n
) \

191 (
__exãnsi⁄__
 \

193 c⁄° *
__ﬁd
 = (
s
); \

194 
size_t
 
__Àn
 = 
	`°∫Àn
 (
__ﬁd
, (
n
)); \

195 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
 + 1); \

196 
__√w
[
__Àn
] = '\0'; \

197 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

198 }))

	)

202 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


205 *
°rchr
 (*
__s
, 
__c
)

206 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

207 c⁄° *
°rchr
 (c⁄° *
__s
, 
__c
)

208 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

210 #ifde‡
__OPTIMIZE__


211 
__exã∫_Æways_ölöe
 *

212 
°rchr
 (*
__s
, 
__c
Ë
	g__THROW


214  
__buûtö_°rchr
 (
__s
, 
__c
);

217 
__exã∫_Æways_ölöe
 const *

218 
°rchr
 (c⁄° *
__s
, 
__c
Ë
	g__THROW


220  
__buûtö_°rchr
 (
__s
, 
__c
);

225 *
	$°rchr
 (c⁄° *
__s
, 
__c
)

226 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

229 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


232 *
	`°ºchr
 (*
__s
, 
__c
)

233 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

234 c⁄° *
	`°ºchr
 (c⁄° *
__s
, 
__c
)

235 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

237 #ifde‡
__OPTIMIZE__


238 
__exã∫_Æways_ölöe
 *

239 
	`°ºchr
 (*
__s
, 
__c
Ë
__THROW


241  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

244 
__exã∫_Æways_ölöe
 const *

245 
	`°ºchr
 (c⁄° *
__s
, 
__c
Ë
__THROW


247  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

250 
	}
}

252 *
	$°ºchr
 (c⁄° *
__s
, 
__c
)

253 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

256 #ifde‡
__USE_GNU


259 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


260 "C++" *
	$°rch∫ul
 (*
__s
, 
__c
)

261 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

262 "C++" c⁄° *
	$°rch∫ul
 (c⁄° *
__s
, 
__c
)

263 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

265 *
	$°rch∫ul
 (c⁄° *
__s
, 
__c
)

266 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

272 
size_t
 
	$°rc•n
 (c⁄° *
__s
, c⁄° *
__ªje˘
)

273 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

276 
size_t
 
	$°r•n
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

277 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

279 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


282 *
	`°Ωbrk
 (*
__s
, c⁄° *
__ac˚±
)

283 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

284 c⁄° *
	`°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

285 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

287 #ifde‡
__OPTIMIZE__


288 
__exã∫_Æways_ölöe
 *

289 
	`°Ωbrk
 (*
__s
, c⁄° *
__ac˚±
Ë
__THROW


291  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

294 
__exã∫_Æways_ölöe
 const *

295 
	`°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
Ë
__THROW


297  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

300 
	}
}

302 *
	$°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

303 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

306 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


309 *
	`°r°r
 (*
__hay°ack
, c⁄° *
__√edÀ
)

310 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

311 c⁄° *
	`°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

312 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

314 #ifde‡
__OPTIMIZE__


315 
__exã∫_Æways_ölöe
 *

316 
	`°r°r
 (*
__hay°ack
, c⁄° *
__√edÀ
Ë
__THROW


318  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

321 
__exã∫_Æways_ölöe
 const *

322 
	`°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
Ë
__THROW


324  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

327 
	}
}

329 *
	$°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

330 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

335 *
	$°πok
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__dñim
)

336 
__THROW
 
	`__n⁄nuŒ
 ((2));

340 *
	$__°πok_r
 (*
__ª°ri˘
 
__s
,

341 c⁄° *
__ª°ri˘
 
__dñim
,

342 **
__ª°ri˘
 
__ßve_±r
)

343 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

344 #ifde‡
__USE_POSIX


345 *
	$°πok_r
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__dñim
,

346 **
__ª°ri˘
 
__ßve_±r
)

347 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

350 #ifde‡
__USE_GNU


352 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


353 "C++" *
	$°rˇ£°r
 (*
__hay°ack
, c⁄° *
__√edÀ
)

354 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

355 "C++" c⁄° *
	$°rˇ£°r
 (c⁄° *
__hay°ack
,

356 c⁄° *
__√edÀ
)

357 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

359 *
	$°rˇ£°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

360 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

364 #ifde‡
__USE_GNU


368 *
	$memmem
 (c⁄° *
__hay°ack
, 
size_t
 
__hay°ackÀn
,

369 c⁄° *
__√edÀ
, 
size_t
 
__√edÀÀn
)

370 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 3));

374 *
	$__memp˝y
 (*
__ª°ri˘
 
__de°
,

375 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

376 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

377 *
	$memp˝y
 (*
__ª°ri˘
 
__de°
,

378 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

379 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

384 
size_t
 
	$°æí
 (c⁄° *
__s
)

385 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

387 #ifdef 
__USE_XOPEN2K8


390 
size_t
 
	$°∫Àn
 (c⁄° *
__°rög
, 
size_t
 
__maxÀn
)

391 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

396 *
	$°ªº‹
 (
__î∫um
Ë
__THROW
;

397 #ifde‡
__USE_XOPEN2K


405 #i‡
deföed
 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


408 #ifde‡
__REDIRECT_NTH


409 
	`__REDIRECT_NTH
 (
°ªº‹_r
,

410 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
),

411 
__xpg_°ªº‹_r
Ë
	`__n⁄nuŒ
 ((2));

413 
	$__xpg_°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

414 
__THROW
 
	`__n⁄nuŒ
 ((2));

415 
	#°ªº‹_r
 
__xpg_°ªº‹_r


	)

420 *
	$°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

421 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

425 #ifde‡
__USE_XOPEN2K8


427 *
	$°ªº‹_l
 (
__î∫um
, 
loˇÀ_t
 
__l
Ë
__THROW
;

430 #ifde‡
__USE_MISC


431 
	~<°rögs.h
>

435 
	$ex∂icô_bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

439 *
	$°r£p
 (**
__ª°ri˘
 
__°rögp
,

440 c⁄° *
__ª°ri˘
 
__dñim
)

441 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

444 #ifdef 
__USE_XOPEN2K8


446 *
	$°rsig«l
 (
__sig
Ë
__THROW
;

449 *
	$__°p˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

450 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

451 *
	$°p˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

452 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

456 *
	$__°≤˝y
 (*
__ª°ri˘
 
__de°
,

457 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

458 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

459 *
	$°≤˝y
 (*
__ª°ri˘
 
__de°
,

460 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

461 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

464 #ifdef 
__USE_GNU


466 
	$°rvîscmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

467 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

470 *
	$°r‰y
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

473 *
	$mem‰ob
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

475 #i‚de‡
ba£«me


480 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


481 "C++" *
	$ba£«me
 (*
__fûíame
)

482 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

483 "C++" c⁄° *
	$ba£«me
 (c⁄° *
__fûíame
)

484 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

486 *
	$ba£«me
 (c⁄° *
__fûíame
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

491 #i‡
	`__GNUC_PREREQ
 (3,4)

492 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


494 
	~<bôs/°rög_f‹tifõd.h
>

498 
__END_DECLS


	@/usr/include/time.h

22 #i‚def 
_TIME_H


23 
	#_TIME_H
 1

	)

25 
	~<„©uªs.h
>

27 
	#__√ed_size_t


	)

28 
	#__√ed_NULL


	)

29 
	~<°ddef.h
>

33 
	~<bôs/time.h
>

37 
	~<bôs/ty≥s/˛ock_t.h
>

38 
	~<bôs/ty≥s/time_t.h
>

39 
	~<bôs/ty≥s/°ru˘_tm.h
>

41 #i‡
deföed
 
__USE_POSIX199309
 || deföed 
__USE_ISOC11


42 
	~<bôs/ty≥s/°ru˘_time•ec.h
>

45 #ifde‡
__USE_POSIX199309


46 
	~<bôs/ty≥s/˛ockid_t.h
>

47 
	~<bôs/ty≥s/timî_t.h
>

48 
	~<bôs/ty≥s/°ru˘_ôimî•ec.h
>

49 
	gsigevít
;

52 #ifde‡
__USE_XOPEN2K


53 #i‚de‡
__pid_t_deföed


54 
__pid_t
 
	tpid_t
;

55 
	#__pid_t_deföed


	)

59 #ifde‡
__USE_XOPEN2K8


60 
	~<bôs/ty≥s/loˇÀ_t.h
>

63 #ifde‡
__USE_ISOC11


65 
	#TIME_UTC
 1

	)

68 
__BEGIN_DECLS


72 
˛ock_t
 
	$˛ock
 (Ë
__THROW
;

75 
time_t
 
	$time
 (
time_t
 *
__timî
Ë
__THROW
;

78 
	$dif·ime
 (
time_t
 
__time1
,Åime_à
__time0
)

79 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

82 
time_t
 
	$mktime
 (
tm
 *
__ç
Ë
__THROW
;

88 
size_t
 
	$°r·ime
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

89 c⁄° *
__ª°ri˘
 
__f‹m©
,

90 c⁄° 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

92 #ifde‡
__USE_XOPEN


95 *
	$°Ωtime
 (c⁄° *
__ª°ri˘
 
__s
,

96 c⁄° *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
)

97 
__THROW
;

100 #ifde‡
__USE_XOPEN2K8


104 
size_t
 
	$°r·ime_l
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

105 c⁄° *
__ª°ri˘
 
__f‹m©
,

106 c⁄° 
tm
 *
__ª°ri˘
 
__ç
,

107 
loˇÀ_t
 
__loc
Ë
__THROW
;

110 #ifde‡
__USE_GNU


111 *
	$°Ωtime_l
 (c⁄° *
__ª°ri˘
 
__s
,

112 c⁄° *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
,

113 
loˇÀ_t
 
__loc
Ë
__THROW
;

119 
tm
 *
	$gmtime
 (c⁄° 
time_t
 *
__timî
Ë
__THROW
;

123 
tm
 *
	$loˇ…ime
 (c⁄° 
time_t
 *
__timî
Ë
__THROW
;

125 #ifde‡
__USE_POSIX


128 
tm
 *
	$gmtime_r
 (c⁄° 
time_t
 *
__ª°ri˘
 
__timî
,

129 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

133 
tm
 *
	$loˇ…ime_r
 (c⁄° 
time_t
 *
__ª°ri˘
 
__timî
,

134 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

139 *
	$as˘ime
 (c⁄° 
tm
 *
__ç
Ë
__THROW
;

142 *
	$˘ime
 (c⁄° 
time_t
 *
__timî
Ë
__THROW
;

144 #ifde‡
__USE_POSIX


149 *
	$as˘ime_r
 (c⁄° 
tm
 *
__ª°ri˘
 
__ç
,

150 *
__ª°ri˘
 
__buf
Ë
__THROW
;

153 *
	$˘ime_r
 (c⁄° 
time_t
 *
__ª°ri˘
 
__timî
,

154 *
__ª°ri˘
 
__buf
Ë
__THROW
;

159 *
__tz«me
[2];

160 
__daylight
;

161 
__timez⁄e
;

164 #ifdef 
__USE_POSIX


166 *
tz«me
[2];

170 
	$tz£t
 (Ë
__THROW
;

173 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


174 
daylight
;

175 
timez⁄e
;

178 #ifde‡
__USE_MISC


181 
	$°ime
 (c⁄° 
time_t
 *
__whí
Ë
__THROW
;

187 
	#__i¶óp
(
yór
) \

188 ((
yór
Ë% 4 =0 && ((yórË% 100 !0 || (yórË% 400 =0))

	)

191 #ifde‡
__USE_MISC


196 
time_t
 
	$timegm
 (
tm
 *
__ç
Ë
__THROW
;

199 
time_t
 
	$timñoˇl
 (
tm
 *
__ç
Ë
__THROW
;

202 
	$dysize
 (
__yór
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

206 #ifde‡
__USE_POSIX199309


211 
	`«no¶ìp
 (c⁄° 
time•ec
 *
__ªque°ed_time
,

212 
time•ec
 *
__ªmaöög
);

216 
	$˛ock_gëªs
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ªs
Ë
__THROW
;

219 
	$˛ock_gëtime
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ç
Ë
__THROW
;

222 
	$˛ock_£âime
 (
˛ockid_t
 
__˛ock_id
, c⁄° 
time•ec
 *
__ç
)

223 
__THROW
;

225 #ifde‡
__USE_XOPEN2K


230 
	`˛ock_«no¶ìp
 (
˛ockid_t
 
__˛ock_id
, 
__Êags
,

231 c⁄° 
time•ec
 *
__ªq
,

232 
time•ec
 *
__ªm
);

235 
	$˛ock_gë˝u˛ockid
 (
pid_t
 
__pid
, 
˛ockid_t
 *
__˛ock_id
Ë
__THROW
;

240 
	$timî_¸óã
 (
˛ockid_t
 
__˛ock_id
,

241 
sigevít
 *
__ª°ri˘
 
__evp
,

242 
timî_t
 *
__ª°ri˘
 
__timîid
Ë
__THROW
;

245 
	$timî_dñëe
 (
timî_t
 
__timîid
Ë
__THROW
;

248 
	$timî_£âime
 (
timî_t
 
__timîid
, 
__Êags
,

249 c⁄° 
ôimî•ec
 *
__ª°ri˘
 
__vÆue
,

250 
ôimî•ec
 *
__ª°ri˘
 
__ovÆue
Ë
__THROW
;

253 
	$timî_gëtime
 (
timî_t
 
__timîid
, 
ôimî•ec
 *
__vÆue
)

254 
__THROW
;

257 
	$timî_gëovîrun
 (
timî_t
 
__timîid
Ë
__THROW
;

261 #ifde‡
__USE_ISOC11


263 
	$time•ec_gë
 (
time•ec
 *
__ts
, 
__ba£
)

264 
__THROW
 
	`__n⁄nuŒ
 ((1));

268 #ifde‡
__USE_XOPEN_EXTENDED


280 
gëd©e_îr
;

289 
tm
 *
	`gëd©e
 (c⁄° *
__°rög
);

292 #ifde‡
__USE_GNU


303 
	`gëd©e_r
 (c⁄° *
__ª°ri˘
 
__°rög
,

304 
tm
 *
__ª°ri˘
 
__ªsbuÂ
);

307 
__END_DECLS


	@/usr/include/unistd.h

22 #i‚def 
_UNISTD_H


23 
	#_UNISTD_H
 1

	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


32 #ifde‡
__USE_XOPEN2K8


34 
	#_POSIX_VERSION
 200809L

	)

35 #ñi‡
deföed
 
__USE_XOPEN2K


37 
	#_POSIX_VERSION
 200112L

	)

38 #ñi‡
deföed
 
__USE_POSIX199506


40 
	#_POSIX_VERSION
 199506L

	)

41 #ñi‡
deföed
 
__USE_POSIX199309


43 
	#_POSIX_VERSION
 199309L

	)

46 
	#_POSIX_VERSION
 199009L

	)

52 #ifde‡
__USE_XOPEN2K8


53 
	#__POSIX2_THIS_VERSION
 200809L

	)

55 #ñi‡
deföed
 
__USE_XOPEN2K


57 
	#__POSIX2_THIS_VERSION
 200112L

	)

58 #ñi‡
deföed
 
__USE_POSIX199506


60 
	#__POSIX2_THIS_VERSION
 199506L

	)

63 
	#__POSIX2_THIS_VERSION
 199209L

	)

67 
	#_POSIX2_VERSION
 
__POSIX2_THIS_VERSION


	)

70 
	#_POSIX2_C_VERSION
 
__POSIX2_THIS_VERSION


	)

74 
	#_POSIX2_C_BIND
 
__POSIX2_THIS_VERSION


	)

78 
	#_POSIX2_C_DEV
 
__POSIX2_THIS_VERSION


	)

82 
	#_POSIX2_SW_DEV
 
__POSIX2_THIS_VERSION


	)

86 
	#_POSIX2_LOCALEDEF
 
__POSIX2_THIS_VERSION


	)

89 #ifde‡
__USE_XOPEN2K8


90 
	#_XOPEN_VERSION
 700

	)

91 #ñi‡
deföed
 
__USE_XOPEN2K


92 
	#_XOPEN_VERSION
 600

	)

93 #ñi‡
deföed
 
__USE_UNIX98


94 
	#_XOPEN_VERSION
 500

	)

96 
	#_XOPEN_VERSION
 4

	)

100 
	#_XOPEN_XCU_VERSION
 4

	)

103 
	#_XOPEN_XPG2
 1

	)

104 
	#_XOPEN_XPG3
 1

	)

105 
	#_XOPEN_XPG4
 1

	)

108 
	#_XOPEN_UNIX
 1

	)

111 
	#_XOPEN_CRYPT
 1

	)

115 
	#_XOPEN_ENH_I18N
 1

	)

118 
	#_XOPEN_LEGACY
 1

	)

205 
	~<bôs/posix_›t.h
>

208 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


209 
	~<bôs/ívú⁄míts.h
>

213 
	#STDIN_FILENO
 0

	)

214 
	#STDOUT_FILENO
 1

	)

215 
	#STDERR_FILENO
 2

	)

220 
	~<bôs/ty≥s.h
>

222 #i‚def 
__ssize_t_deföed


223 
__ssize_t
 
	tssize_t
;

224 
	#__ssize_t_deföed


	)

227 
	#__√ed_size_t


	)

228 
	#__√ed_NULL


	)

229 
	~<°ddef.h
>

231 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


234 #i‚de‡
__gid_t_deföed


235 
__gid_t
 
	tgid_t
;

236 
	#__gid_t_deföed


	)

239 #i‚de‡
__uid_t_deföed


240 
__uid_t
 
	tuid_t
;

241 
	#__uid_t_deföed


	)

244 #i‚de‡
__off_t_deföed


245 #i‚de‡
__USE_FILE_OFFSET64


246 
__off_t
 
	toff_t
;

248 
__off64_t
 
	toff_t
;

250 
	#__off_t_deföed


	)

252 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


253 
__off64_t
 
	toff64_t
;

254 
	#__off64_t_deföed


	)

257 #i‚de‡
__u£c⁄ds_t_deföed


258 
__u£c⁄ds_t
 
	tu£c⁄ds_t
;

259 
	#__u£c⁄ds_t_deföed


	)

262 #i‚de‡
__pid_t_deföed


263 
__pid_t
 
	tpid_t
;

264 
	#__pid_t_deföed


	)

268 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


269 #i‚de‡
__öçå_t_deföed


270 
__öçå_t
 
	töçå_t
;

271 
	#__öçå_t_deföed


	)

275 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


276 #i‚de‡
__sockÀn_t_deföed


277 
__sockÀn_t
 
	tsockÀn_t
;

278 
	#__sockÀn_t_deföed


	)

284 
	#R_OK
 4

	)

285 
	#W_OK
 2

	)

286 
	#X_OK
 1

	)

287 
	#F_OK
 0

	)

290 
	$ac˚ss
 (c⁄° *
__«me
, 
__ty≥
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

292 #ifde‡
__USE_GNU


295 
	$euidac˚ss
 (c⁄° *
__«me
, 
__ty≥
)

296 
__THROW
 
	`__n⁄nuŒ
 ((1));

299 
	$óc˚ss
 (c⁄° *
__«me
, 
__ty≥
)

300 
__THROW
 
	`__n⁄nuŒ
 ((1));

303 #ifde‡
__USE_ATFILE


307 
	$Ác˚sßt
 (
__fd
, c⁄° *
__fûe
, 
__ty≥
, 
__Êag
)

308 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

313 #i‚def 
_STDIO_H


314 
	#SEEK_SET
 0

	)

315 
	#SEEK_CUR
 1

	)

316 
	#SEEK_END
 2

	)

317 #ifde‡
__USE_GNU


318 
	#SEEK_DATA
 3

	)

319 
	#SEEK_HOLE
 4

	)

323 #i‡
deföed
 
__USE_MISC
 && !deföed 
L_SET


325 
	#L_SET
 
SEEK_SET


	)

326 
	#L_INCR
 
SEEK_CUR


	)

327 
	#L_XTND
 
SEEK_END


	)

336 #i‚de‡
__USE_FILE_OFFSET64


337 
__off_t
 
	$l£ek
 (
__fd
, 
__off_t
 
__off£t
, 
__whí˚
Ë
__THROW
;

339 #ifde‡
__REDIRECT_NTH


340 
__off64_t
 
	`__REDIRECT_NTH
 (
l£ek
,

341 (
__fd
, 
__off64_t
 
__off£t
, 
__whí˚
),

342 
l£ek64
);

344 
	#l£ek
 
l£ek64


	)

347 #ifde‡
__USE_LARGEFILE64


348 
__off64_t
 
	$l£ek64
 (
__fd
, 
__off64_t
 
__off£t
, 
__whí˚
)

349 
__THROW
;

356 
	`˛o£
 (
__fd
);

363 
ssize_t
 
	$ªad
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
Ë
__wur
;

369 
ssize_t
 
	$wrôe
 (
__fd
, c⁄° *
__buf
, 
size_t
 
__n
Ë
__wur
;

371 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


372 #i‚de‡
__USE_FILE_OFFSET64


379 
ssize_t
 
	$¥ód
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

380 
__off_t
 
__off£t
Ë
__wur
;

387 
ssize_t
 
	$pwrôe
 (
__fd
, c⁄° *
__buf
, 
size_t
 
__n
,

388 
__off_t
 
__off£t
Ë
__wur
;

390 #ifde‡
__REDIRECT


391 
ssize_t
 
	`__REDIRECT
 (
¥ód
, (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

392 
__off64_t
 
__off£t
),

393 
¥ód64
Ë
__wur
;

394 
ssize_t
 
	`__REDIRECT
 (
pwrôe
, (
__fd
, c⁄° *
__buf
,

395 
size_t
 
__nbyãs
, 
__off64_t
 
__off£t
),

396 
pwrôe64
Ë
__wur
;

398 
	#¥ód
 
¥ód64


	)

399 
	#pwrôe
 
pwrôe64


	)

403 #ifde‡
__USE_LARGEFILE64


407 
ssize_t
 
	$¥ód64
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

408 
__off64_t
 
__off£t
Ë
__wur
;

411 
ssize_t
 
	$pwrôe64
 (
__fd
, c⁄° *
__buf
, 
size_t
 
__n
,

412 
__off64_t
 
__off£t
Ë
__wur
;

420 
	$pùe
 (
__pùedes
[2]Ë
__THROW
 
__wur
;

422 #ifde‡
__USE_GNU


425 
	$pùe2
 (
__pùedes
[2], 
__Êags
Ë
__THROW
 
__wur
;

435 
	$Æ¨m
 (
__£c⁄ds
Ë
__THROW
;

447 
	`¶ìp
 (
__£c⁄ds
);

449 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

450 || 
deföed
 
__USE_MISC


455 
__u£c⁄ds_t
 
	$uÆ¨m
 (
__u£c⁄ds_t
 
__vÆue
, __u£c⁄ds_à
__öãrvÆ
)

456 
__THROW
;

463 
	`u¶ìp
 (
__u£c⁄ds_t
 
__u£c⁄ds
);

472 
	`∑u£
 ();

476 
	$chown
 (c⁄° *
__fûe
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
)

477 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

479 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


481 
	$fchown
 (
__fd
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
Ë
__THROW
 
__wur
;

486 
	$lchown
 (c⁄° *
__fûe
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
)

487 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

491 #ifde‡
__USE_ATFILE


494 
	$fchow«t
 (
__fd
, c⁄° *
__fûe
, 
__uid_t
 
__ow√r
,

495 
__gid_t
 
__group
, 
__Êag
)

496 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

500 
	$chdú
 (c⁄° *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

502 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


504 
	$fchdú
 (
__fd
Ë
__THROW
 
__wur
;

514 *
	$gëcwd
 (*
__buf
, 
size_t
 
__size
Ë
__THROW
 
__wur
;

516 #ifdef 
__USE_GNU


520 *
	$gë_cuºít_dú_«me
 (Ë
__THROW
;

523 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

524 || 
deföed
 
__USE_MISC


528 *
	$gëwd
 (*
__buf
)

529 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_dïªˇãd__
 
__wur
;

534 
	$dup
 (
__fd
Ë
__THROW
 
__wur
;

537 
	$dup2
 (
__fd
, 
__fd2
Ë
__THROW
;

539 #ifde‡
__USE_GNU


542 
	$dup3
 (
__fd
, 
__fd2
, 
__Êags
Ë
__THROW
;

546 **
__ívú⁄
;

547 #ifde‡
__USE_GNU


548 **
ívú⁄
;

554 
	$execve
 (c⁄° *
__∑th
, *c⁄° 
__¨gv
[],

555 *c⁄° 
__ívp
[]Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

557 #ifde‡
__USE_XOPEN2K8


560 
	$„xecve
 (
__fd
, *c⁄° 
__¨gv
[], *c⁄° 
__ívp
[])

561 
__THROW
 
	`__n⁄nuŒ
 ((2));

566 
	$execv
 (c⁄° *
__∑th
, *c⁄° 
__¨gv
[])

567 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

571 
	$exe˛e
 (c⁄° *
__∑th
, c⁄° *
__¨g
, ...)

572 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

576 
	$exe˛
 (c⁄° *
__∑th
, c⁄° *
__¨g
, ...)

577 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

581 
	$execvp
 (c⁄° *
__fûe
, *c⁄° 
__¨gv
[])

582 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

587 
	$exe˛p
 (c⁄° *
__fûe
, c⁄° *
__¨g
, ...)

588 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

590 #ifde‡
__USE_GNU


593 
	$execv≥
 (c⁄° *
__fûe
, *c⁄° 
__¨gv
[],

594 *c⁄° 
__ívp
[])

595 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

599 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


601 
	$ni˚
 (
__öc
Ë
__THROW
 
__wur
;

606 
	$_exô
 (
__°©us
Ë
	`__©åibuã__
 ((
__n‹ëu∫__
));

612 
	~<bôs/c⁄‚ame.h
>

615 
	$∑thc⁄f
 (c⁄° *
__∑th
, 
__«me
)

616 
__THROW
 
	`__n⁄nuŒ
 ((1));

619 
	$Â©hc⁄f
 (
__fd
, 
__«me
Ë
__THROW
;

622 
	$sysc⁄f
 (
__«me
Ë
__THROW
;

624 #ifdef 
__USE_POSIX2


626 
size_t
 
	$c⁄f°r
 (
__«me
, *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

631 
__pid_t
 
	$gëpid
 (Ë
__THROW
;

634 
__pid_t
 
	$gëµid
 (Ë
__THROW
;

637 
__pid_t
 
	$gëpgΩ
 (Ë
__THROW
;

640 
__pid_t
 
	$__gëpgid
 (
__pid_t
 
__pid
Ë
__THROW
;

641 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


642 
__pid_t
 
	$gëpgid
 (
__pid_t
 
__pid
Ë
__THROW
;

649 
	$£çgid
 (
__pid_t
 
__pid
, __pid_à
__pgid
Ë
__THROW
;

651 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


663 
	$£çgΩ
 (Ë
__THROW
;

670 
__pid_t
 
	$£tsid
 (Ë
__THROW
;

672 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


674 
__pid_t
 
	$gësid
 (
__pid_t
 
__pid
Ë
__THROW
;

678 
__uid_t
 
	$gëuid
 (Ë
__THROW
;

681 
__uid_t
 
	$gëeuid
 (Ë
__THROW
;

684 
__gid_t
 
	$gëgid
 (Ë
__THROW
;

687 
__gid_t
 
	$gëegid
 (Ë
__THROW
;

692 
	$gëgroups
 (
__size
, 
__gid_t
 
__li°
[]Ë
__THROW
 
__wur
;

694 #ifdef 
__USE_GNU


696 
	$group_membî
 (
__gid_t
 
__gid
Ë
__THROW
;

703 
	$£tuid
 (
__uid_t
 
__uid
Ë
__THROW
 
__wur
;

705 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


708 
	$£åeuid
 (
__uid_t
 
__ruid
, __uid_à
__euid
Ë
__THROW
 
__wur
;

711 #ifde‡
__USE_XOPEN2K


713 
	$£ãuid
 (
__uid_t
 
__uid
Ë
__THROW
 
__wur
;

720 
	$£tgid
 (
__gid_t
 
__gid
Ë
__THROW
 
__wur
;

722 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


725 
	$£åegid
 (
__gid_t
 
__rgid
, __gid_à
__egid
Ë
__THROW
 
__wur
;

728 #ifde‡
__USE_XOPEN2K


730 
	$£ãgid
 (
__gid_t
 
__gid
Ë
__THROW
 
__wur
;

733 #ifde‡
__USE_GNU


736 
	$gëªsuid
 (
__uid_t
 *
__ruid
, __uid_à*
__euid
, __uid_à*
__suid
)

737 
__THROW
;

741 
	$gëªsgid
 (
__gid_t
 *
__rgid
, __gid_à*
__egid
, __gid_à*
__sgid
)

742 
__THROW
;

746 
	$£åesuid
 (
__uid_t
 
__ruid
, __uid_à
__euid
, __uid_à
__suid
)

747 
__THROW
 
__wur
;

751 
	$£åesgid
 (
__gid_t
 
__rgid
, __gid_à
__egid
, __gid_à
__sgid
)

752 
__THROW
 
__wur
;

759 
__pid_t
 
	$f‹k
 (Ë
__THROWNL
;

761 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

762 || 
deföed
 
__USE_MISC


767 
__pid_t
 
	$vf‹k
 (Ë
__THROW
;

773 *
	$ây«me
 (
__fd
Ë
__THROW
;

777 
	$ây«me_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
)

778 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

782 
	$ißây
 (
__fd
Ë
__THROW
;

784 #ifde‡
__USE_MISC


787 
	$ây¶Ÿ
 (Ë
__THROW
;

792 
	$lök
 (c⁄° *
__‰om
, c⁄° *
__to
)

793 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

795 #ifde‡
__USE_ATFILE


798 
	$lök©
 (
__‰omfd
, c⁄° *
__‰om
, 
__tofd
,

799 c⁄° *
__to
, 
__Êags
)

800 
__THROW
 
	`__n⁄nuŒ
 ((2, 4)Ë
__wur
;

803 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


805 
	$symlök
 (c⁄° *
__‰om
, c⁄° *
__to
)

806 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

811 
ssize_t
 
	$ªadlök
 (c⁄° *
__ª°ri˘
 
__∑th
,

812 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

813 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

816 #ifde‡
__USE_ATFILE


818 
	$symlök©
 (c⁄° *
__‰om
, 
__tofd
,

819 c⁄° *
__to
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

822 
ssize_t
 
	$ªadlök©
 (
__fd
, c⁄° *
__ª°ri˘
 
__∑th
,

823 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

824 
__THROW
 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
;

828 
	$u∆ök
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

830 #ifde‡
__USE_ATFILE


832 
	$u∆ök©
 (
__fd
, c⁄° *
__«me
, 
__Êag
)

833 
__THROW
 
	`__n⁄nuŒ
 ((2));

837 
	$rmdú
 (c⁄° *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

841 
__pid_t
 
	$tcgëpgΩ
 (
__fd
Ë
__THROW
;

844 
	$tc£çgΩ
 (
__fd
, 
__pid_t
 
__pgΩ_id
Ë
__THROW
;

851 *
	`gëlogö
 ();

852 #ifde‡
__USE_POSIX199506


859 
	$gëlogö_r
 (*
__«me
, 
size_t
 
__«me_Àn
Ë
	`__n⁄nuŒ
 ((1));

862 #ifdef 
__USE_MISC


864 
	$£éogö
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

868 #ifdef 
__USE_POSIX2


872 
	~<bôs/gë›t_posix.h
>

876 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


880 
	$gëho°«me
 (*
__«me
, 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

884 #i‡
deföed
 
__USE_MISC


887 
	$£tho°«me
 (c⁄° *
__«me
, 
size_t
 
__Àn
)

888 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

892 
	$£tho°id
 (
__id
Ë
__THROW
 
__wur
;

898 
	$gëdomaö«me
 (*
__«me
, 
size_t
 
__Àn
)

899 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

900 
	$£tdomaö«me
 (c⁄° *
__«me
, 
size_t
 
__Àn
)

901 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

907 
	$vh™gup
 (Ë
__THROW
;

910 
	$ªvoke
 (c⁄° *
__fûe
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

918 
	$¥ofû
 (*
__ßm∂e_buf„r
, 
size_t
 
__size
,

919 
size_t
 
__off£t
, 
__sˇÀ
)

920 
__THROW
 
	`__n⁄nuŒ
 ((1));

926 
	$ac˘
 (c⁄° *
__«me
Ë
__THROW
;

930 *
	$gëu£rshñl
 (Ë
__THROW
;

931 
	$ídu£rshñl
 (Ë
__THROW
;

932 
	$£tu£rshñl
 (Ë
__THROW
;

938 
	$d´m⁄
 (
__nochdú
, 
__no˛o£
Ë
__THROW
 
__wur
;

942 #i‡
deföed
 
__USE_MISC
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

945 
	$chroŸ
 (c⁄° *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

949 *
	$gë∑ss
 (c⁄° *
__¥om±
Ë
	`__n⁄nuŒ
 ((1));

957 
	`fsync
 (
__fd
);

960 #ifde‡
__USE_GNU


963 
	$syncfs
 (
__fd
Ë
__THROW
;

967 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


970 
	`gëho°id
 ();

973 
	$sync
 (Ë
__THROW
;

976 #i‡
deföed
 
__USE_MISC
 || !deföed 
__USE_XOPEN2K


979 
	$gë∑gesize
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

984 
	$gëdèbÀsize
 (Ë
__THROW
;

990 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


993 #i‚de‡
__USE_FILE_OFFSET64


994 
	$åunˇã
 (c⁄° *
__fûe
, 
__off_t
 
__Àngth
)

995 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

997 #ifde‡
__REDIRECT_NTH


998 
	`__REDIRECT_NTH
 (
åunˇã
,

999 (c⁄° *
__fûe
, 
__off64_t
 
__Àngth
),

1000 
åunˇã64
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

1002 
	#åunˇã
 
åunˇã64


	)

1005 #ifde‡
__USE_LARGEFILE64


1006 
	$åunˇã64
 (c⁄° *
__fûe
, 
__off64_t
 
__Àngth
)

1007 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

1012 #i‡
deföed
 
__USE_POSIX199309
 \

1013 || 
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


1016 #i‚de‡
__USE_FILE_OFFSET64


1017 
	$·runˇã
 (
__fd
, 
__off_t
 
__Àngth
Ë
__THROW
 
__wur
;

1019 #ifde‡
__REDIRECT_NTH


1020 
	`__REDIRECT_NTH
 (
·runˇã
, (
__fd
, 
__off64_t
 
__Àngth
),

1021 
·runˇã64
Ë
__wur
;

1023 
	#·runˇã
 
·runˇã64


	)

1026 #ifde‡
__USE_LARGEFILE64


1027 
	$·runˇã64
 (
__fd
, 
__off64_t
 
__Àngth
Ë
__THROW
 
__wur
;

1033 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

1034 || 
deföed
 
__USE_MISC


1038 
	$brk
 (*
__addr
Ë
__THROW
 
__wur
;

1044 *
	$sbrk
 (
öçå_t
 
__dñè
Ë
__THROW
;

1048 #ifde‡
__USE_MISC


1059 
	$sysˇŒ
 (
__sy¢o
, ...Ë
__THROW
;

1064 #i‡(
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
Ë&& !deföed 
F_LOCK


1076 
	#F_ULOCK
 0

	)

1077 
	#F_LOCK
 1

	)

1078 
	#F_TLOCK
 2

	)

1079 
	#F_TEST
 3

	)

1081 #i‚de‡
__USE_FILE_OFFSET64


1082 
	$lockf
 (
__fd
, 
__cmd
, 
__off_t
 
__Àn
Ë
__wur
;

1084 #ifde‡
__REDIRECT


1085 
	`__REDIRECT
 (
lockf
, (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
),

1086 
lockf64
Ë
__wur
;

1088 
	#lockf
 
lockf64


	)

1091 #ifde‡
__USE_LARGEFILE64


1092 
	$lockf64
 (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
Ë
__wur
;

1097 #ifde‡
__USE_GNU


1102 
	#TEMP_FAILURE_RETRY
(
ex¥essi⁄
) \

1103 (
__exãnsi⁄__
 \

1104 ({ 
__ªsu…
; \

1105 dÿ
__ªsu…
 = (Ë(
ex¥essi⁄
); \

1106 
__ªsu…
 =-1L && 
î∫o
 =
EINTR
); \

1107 
__ªsu…
; 
	}
}))

	)

1110 
ssize_t
 
c›y_fûe_ønge
 (
__öfd
, 
__off64_t
 *
__pöoff
,

1111 
__outfd
, 
__off64_t
 *
__poutoff
,

1112 
size_t
 
__Àngth
, 
__Êags
);

1115 #i‡
deföed
 
__USE_POSIX199309
 || deföed 
__USE_UNIX98


1118 
fd©async
 (
__fûdes
);

1124 #ifdef 
__USE_XOPEN


1126 *
	$¸y±
 (c⁄° *
__key
, c⁄° *
__ß…
)

1127 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1131 
	$í¸y±
 (*
__glibc_block
, 
__edÊag
)

1132 
__THROW
 
	`__n⁄nuŒ
 ((1));

1139 
	$swab
 (c⁄° *
__ª°ri˘
 
__‰om
, *__ª°ri˘ 
__to
,

1140 
ssize_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1147 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K


1149 *
	$˘îmid
 (*
__s
Ë
__THROW
;

1152 *
	`cu£rid
 (*
__s
);

1158 #i‡
deföed
 
__USE_UNIX98
 && !deföed 
__USE_XOPEN2K


1159 
	$±hªad_©f‹k
 ((*
__¥ï¨e
) (),

1160 (*
__∑ª¡
) (),

1161 (*
__chûd
Ë()Ë
__THROW
;

1164 #ifde‡
__USE_MISC


1167 
	$gëíå›y
 (*
__buf„r
, 
size_t
 
__Àngth
Ë
__wur
;

1171 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


1172 
	~<bôs/uni°d.h
>

1175 
__END_DECLS


	@/usr/include/alloca.h

18 #i‚def 
_ALLOCA_H


19 
	#_ALLOCA_H
 1

	)

21 
	~<„©uªs.h
>

23 
	#__√ed_size_t


	)

24 
	~<°ddef.h
>

26 
	g__BEGIN_DECLS


29 #unde‡
Æloˇ


32 *
	$Æloˇ
 (
size_t
 
__size
Ë
__THROW
;

34 #ifdef 
__GNUC__


35 
	#Æloˇ
(
size
Ë
	`__buûtö_Æloˇ
 (size)

	)

38 
__END_DECLS


	@/usr/include/endian.h

18 #i‚def 
_ENDIAN_H


19 
	#_ENDIAN_H
 1

	)

21 
	~<„©uªs.h
>

31 
	#__LITTLE_ENDIAN
 1234

	)

32 
	#__BIG_ENDIAN
 4321

	)

33 
	#__PDP_ENDIAN
 3412

	)

36 
	~<bôs/ídün.h
>

40 #i‚de‡
__FLOAT_WORD_ORDER


41 
	#__FLOAT_WORD_ORDER
 
__BYTE_ORDER


	)

44 #ifdef 
__USE_MISC


45 
	#LITTLE_ENDIAN
 
__LITTLE_ENDIAN


	)

46 
	#BIG_ENDIAN
 
__BIG_ENDIAN


	)

47 
	#PDP_ENDIAN
 
__PDP_ENDIAN


	)

48 
	#BYTE_ORDER
 
__BYTE_ORDER


	)

51 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


52 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËLO, 
	)
HI

53 #ñi‡
__BYTE_ORDER
 =
__BIG_ENDIAN


54 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËHI, 
	)
LO

58 #i‡
deföed
 
__USE_MISC
 && !deföed 
__ASSEMBLER__


60 
	~<bôs/byãsw≠.h
>

61 
	~<bôs/uöä-idítôy.h
>

63 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


64 
	#htobe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

65 
	#htﬁe16
(
x
Ë
	`__uöt16_idítôy
 (x)

	)

66 
	#be16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

67 
	#À16toh
(
x
Ë
	`__uöt16_idítôy
 (x)

	)

69 
	#htobe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

70 
	#htﬁe32
(
x
Ë
	`__uöt32_idítôy
 (x)

	)

71 
	#be32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

72 
	#À32toh
(
x
Ë
	`__uöt32_idítôy
 (x)

	)

74 
	#htobe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

75 
	#htﬁe64
(
x
Ë
	`__uöt64_idítôy
 (x)

	)

76 
	#be64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

77 
	#À64toh
(
x
Ë
	`__uöt64_idítôy
 (x)

	)

80 
	#htobe16
(
x
Ë
	`__uöt16_idítôy
 (x)

	)

81 
	#htﬁe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

82 
	#be16toh
(
x
Ë
	`__uöt16_idítôy
 (x)

	)

83 
	#À16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

85 
	#htobe32
(
x
Ë
	`__uöt32_idítôy
 (x)

	)

86 
	#htﬁe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

87 
	#be32toh
(
x
Ë
	`__uöt32_idítôy
 (x)

	)

88 
	#À32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

90 
	#htobe64
(
x
Ë
	`__uöt64_idítôy
 (x)

	)

91 
	#htﬁe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

92 
	#be64toh
(
x
Ë
	`__uöt64_idítôy
 (x)

	)

93 
	#À64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

	@/usr/include/features.h

18 #i‚def 
_FEATURES_H


19 
	#_FEATURES_H
 1

	)

119 #unde‡
__USE_ISOC11


120 #unde‡
__USE_ISOC99


121 #unde‡
__USE_ISOC95


122 #unde‡
__USE_ISOCXX11


123 #unde‡
__USE_POSIX


124 #unde‡
__USE_POSIX2


125 #unde‡
__USE_POSIX199309


126 #unde‡
__USE_POSIX199506


127 #unde‡
__USE_XOPEN


128 #unde‡
__USE_XOPEN_EXTENDED


129 #unde‡
__USE_UNIX98


130 #unde‡
__USE_XOPEN2K


131 #unde‡
__USE_XOPEN2KXSI


132 #unde‡
__USE_XOPEN2K8


133 #unde‡
__USE_XOPEN2K8XSI


134 #unde‡
__USE_LARGEFILE


135 #unde‡
__USE_LARGEFILE64


136 #unde‡
__USE_FILE_OFFSET64


137 #unde‡
__USE_MISC


138 #unde‡
__USE_ATFILE


139 #unde‡
__USE_GNU


140 #unde‡
__USE_FORTIFY_LEVEL


141 #unde‡
__KERNEL_STRICT_NAMES


142 #unde‡
__GLIBC_USE_DEPRECATED_GETS


146 #i‚de‡
_LOOSE_KERNEL_NAMES


147 
	#__KERNEL_STRICT_NAMES


	)

157 #i‡
deföed
 
__GNUC__
 && deföed 
__GNUC_MINOR__


158 
	#__GNUC_PREREQ
(
maj
, 
mö
) \

159 ((
__GNUC__
 << 16Ë+ 
__GNUC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

161 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë0

	)

168 #i‡
deföed
 
__˛™g_maj‹__
 && deföed 
__˛™g_mö‹__


169 
	#__glibc_˛™g_¥îeq
(
maj
, 
mö
) \

170 ((
__˛™g_maj‹__
 << 16Ë+ 
__˛™g_mö‹__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

172 
	#__glibc_˛™g_¥îeq
(
maj
, 
mö
Ë0

	)

176 
	#__GLIBC_USE
(
F
Ë
__GLIBC_USE_
 ## 
	)
F

182 #i‡(
deföed
 
_BSD_SOURCE
 || deföed 
_SVID_SOURCE
) \

183 && !
deföed
 
	g_DEFAULT_SOURCE


185 #unde‡
_DEFAULT_SOURCE


186 
	#_DEFAULT_SOURCE
 1

	)

190 #ifde‡
_GNU_SOURCE


191 #unde‡
_ISOC95_SOURCE


192 
	#_ISOC95_SOURCE
 1

	)

193 #unde‡
_ISOC99_SOURCE


194 
	#_ISOC99_SOURCE
 1

	)

195 #unde‡
_ISOC11_SOURCE


196 
	#_ISOC11_SOURCE
 1

	)

197 #unde‡
_POSIX_SOURCE


198 
	#_POSIX_SOURCE
 1

	)

199 #unde‡
_POSIX_C_SOURCE


200 
	#_POSIX_C_SOURCE
 200809L

	)

201 #unde‡
_XOPEN_SOURCE


202 
	#_XOPEN_SOURCE
 700

	)

203 #unde‡
_XOPEN_SOURCE_EXTENDED


204 
	#_XOPEN_SOURCE_EXTENDED
 1

	)

205 #unde‡
_LARGEFILE64_SOURCE


206 
	#_LARGEFILE64_SOURCE
 1

	)

207 #unde‡
_DEFAULT_SOURCE


208 
	#_DEFAULT_SOURCE
 1

	)

209 #unde‡
_ATFILE_SOURCE


210 
	#_ATFILE_SOURCE
 1

	)

215 #i‡(
deföed
 
_DEFAULT_SOURCE
 \

216 || (!
deföed
 
	g__STRICT_ANSI__
 \

217 && !
deföed
 
	g_ISOC99_SOURCE
 \

218 && !
deföed
 
	g_POSIX_SOURCE
 && !deföed 
	g_POSIX_C_SOURCE
 \

219 && !
deföed
 
	g_XOPEN_SOURCE
))

220 #unde‡
_DEFAULT_SOURCE


221 
	#_DEFAULT_SOURCE
 1

	)

225 #i‡(
deföed
 
_ISOC11_SOURCE
 \

226 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 201112L))

227 
	#__USE_ISOC11
 1

	)

231 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC11_SOURCE
 \

232 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L))

233 
	#__USE_ISOC99
 1

	)

237 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC11_SOURCE
 \

238 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199409L))

239 
	#__USE_ISOC95
 1

	)

242 #ifde‡
__˝lu•lus


244 #i‡
__˝lu•lus
 >= 201703L

245 
	#__USE_ISOC11
 1

	)

249 #i‡
__˝lu•lus
 >201103L || 
deföed
 
__GXX_EXPERIMENTAL_CXX0X__


250 
	#__USE_ISOCXX11
 1

	)

251 
	#__USE_ISOC99
 1

	)

258 #ifde‡
_DEFAULT_SOURCE


259 #i‡!
deföed
 
_POSIX_SOURCE
 && !deföed 
_POSIX_C_SOURCE


260 
	#__USE_POSIX_IMPLICITLY
 1

	)

262 #unde‡
_POSIX_SOURCE


263 
	#_POSIX_SOURCE
 1

	)

264 #unde‡
_POSIX_C_SOURCE


265 
	#_POSIX_C_SOURCE
 200809L

	)

268 #i‡((!
deföed
 
__STRICT_ANSI__
 \

269 || (
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) >= 500)) \

270 && !
deföed
 
_POSIX_SOURCE
 && !deföed 
_POSIX_C_SOURCE
)

271 
	#_POSIX_SOURCE
 1

	)

272 #i‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 500

273 
	#_POSIX_C_SOURCE
 2

	)

274 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 600

275 
	#_POSIX_C_SOURCE
 199506L

	)

276 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 700

277 
	#_POSIX_C_SOURCE
 200112L

	)

279 
	#_POSIX_C_SOURCE
 200809L

	)

281 
	#__USE_POSIX_IMPLICITLY
 1

	)

290 #i‡((!
deföed
 
_POSIX_C_SOURCE
 || (_POSIX_C_SOURCE - 0) < 199506L) \

291 && (
deföed
 
_REENTRANT
 || deföed 
_THREAD_SAFE
))

292 
	#_POSIX_SOURCE
 1

	)

293 #unde‡
_POSIX_C_SOURCE


294 
	#_POSIX_C_SOURCE
 199506L

	)

297 #i‡(
deföed
 
_POSIX_SOURCE
 \

298 || (
deföed
 
_POSIX_C_SOURCE
 && _POSIX_C_SOURCE >= 1) \

299 || 
deföed
 
_XOPEN_SOURCE
)

300 
	#__USE_POSIX
 1

	)

303 #i‡
deföed
 
_POSIX_C_SOURCE
 && _POSIX_C_SOURCE >2 || deföed 
_XOPEN_SOURCE


304 
	#__USE_POSIX2
 1

	)

307 #i‡
deföed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 199309L

308 
	#__USE_POSIX199309
 1

	)

311 #i‡
deföed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 199506L

312 
	#__USE_POSIX199506
 1

	)

315 #i‡
deföed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 200112L

316 
	#__USE_XOPEN2K
 1

	)

317 #unde‡
__USE_ISOC95


318 
	#__USE_ISOC95
 1

	)

319 #unde‡
__USE_ISOC99


320 
	#__USE_ISOC99
 1

	)

323 #i‡
deföed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 200809L

324 
	#__USE_XOPEN2K8
 1

	)

325 #unde‡
_ATFILE_SOURCE


326 
	#_ATFILE_SOURCE
 1

	)

329 #ifdef 
_XOPEN_SOURCE


330 
	#__USE_XOPEN
 1

	)

331 #i‡(
_XOPEN_SOURCE
 - 0) >= 500

332 
	#__USE_XOPEN_EXTENDED
 1

	)

333 
	#__USE_UNIX98
 1

	)

334 #unde‡
_LARGEFILE_SOURCE


335 
	#_LARGEFILE_SOURCE
 1

	)

336 #i‡(
_XOPEN_SOURCE
 - 0) >= 600

337 #i‡(
_XOPEN_SOURCE
 - 0) >= 700

338 
	#__USE_XOPEN2K8
 1

	)

339 
	#__USE_XOPEN2K8XSI
 1

	)

341 
	#__USE_XOPEN2K
 1

	)

342 
	#__USE_XOPEN2KXSI
 1

	)

343 #unde‡
__USE_ISOC95


344 
	#__USE_ISOC95
 1

	)

345 #unde‡
__USE_ISOC99


346 
	#__USE_ISOC99
 1

	)

349 #ifde‡
_XOPEN_SOURCE_EXTENDED


350 
	#__USE_XOPEN_EXTENDED
 1

	)

355 #ifde‡
_LARGEFILE_SOURCE


356 
	#__USE_LARGEFILE
 1

	)

359 #ifde‡
_LARGEFILE64_SOURCE


360 
	#__USE_LARGEFILE64
 1

	)

363 #i‡
deföed
 
_FILE_OFFSET_BITS
 && _FILE_OFFSET_BITS == 64

364 
	#__USE_FILE_OFFSET64
 1

	)

367 #i‡
deföed
 
_DEFAULT_SOURCE


368 
	#__USE_MISC
 1

	)

371 #ifdef 
_ATFILE_SOURCE


372 
	#__USE_ATFILE
 1

	)

375 #ifdef 
_GNU_SOURCE


376 
	#__USE_GNU
 1

	)

379 #i‡
deföed
 
_FORTIFY_SOURCE
 && _FORTIFY_SOURCE > 0 \

380 && 
__GNUC_PREREQ
 (4, 1Ë&& 
deföed
 
	g__OPTIMIZE__
 && __OPTIMIZE__ > 0

381 #i‡
_FORTIFY_SOURCE
 > 1

382 
	#__USE_FORTIFY_LEVEL
 2

	)

384 
	#__USE_FORTIFY_LEVEL
 1

	)

387 
	#__USE_FORTIFY_LEVEL
 0

	)

394 #i‡
deföed
 
__˝lu•lus
 ? __˝lu•lu†>201402L : deföed 
__USE_ISOC11


395 
	#__GLIBC_USE_DEPRECATED_GETS
 0

	)

397 
	#__GLIBC_USE_DEPRECATED_GETS
 1

	)

402 
	~<°dc-¥edef.h
>

410 #unde‡
__GNU_LIBRARY__


411 
	#__GNU_LIBRARY__
 6

	)

415 
	#__GLIBC__
 2

	)

416 
	#__GLIBC_MINOR__
 27

	)

418 
	#__GLIBC_PREREQ
(
maj
, 
mö
) \

419 ((
__GLIBC__
 << 16Ë+ 
__GLIBC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

422 #i‚de‡
__ASSEMBLER__


423 #i‚de‡
_SYS_CDEFS_H


424 
	~<sys/cdefs.h
>

429 #i‡
deföed
 
__USE_FILE_OFFSET64
 && !deföed 
__REDIRECT


430 
	#__USE_LARGEFILE
 1

	)

431 
	#__USE_LARGEFILE64
 1

	)

437 #i‡
__GNUC_PREREQ
 (2, 7Ë&& 
deföed
 
__OPTIMIZE__
 \

438 && !
deföed
 
	g__OPTIMIZE_SIZE__
 && !deföed 
	g__NO_INLINE__
 \

439 && 
deföed
 
	g__exã∫_ölöe


440 
	#__USE_EXTERN_INLINES
 1

	)

448 
	~<gnu/°ubs.h
>

	@/usr/include/openssl/e_os2.h

56 
	~<›ís¶/›ís¶c⁄f.h
>

58 #i‚de‡
HEADER_E_OS2_H


59 
	#HEADER_E_OS2_H


	)

61 #ifde‡ 
__˝lu•lus


71 
	#OPENSSL_SYS_UNIX


	)

74 #i‡
deföed
(
__MWERKS__
Ë&& deföed(
macötosh
Ë|| deföed(
OPENSSL_SYSNAME_MAC
)

75 #unde‡
OPENSSL_SYS_UNIX


76 
	#OPENSSL_SYS_MACINTOSH_CLASSIC


	)

80 #i‡
deföed
(
NETWARE
Ë|| deföed(
OPENSSL_SYSNAME_NETWARE
)

81 #unde‡
OPENSSL_SYS_UNIX


82 
	#OPENSSL_SYS_NETWARE


	)

91 #i‡
deföed
(
OPENSSL_SYSNAME_MSDOS
)

92 #unde‡
OPENSSL_SYS_UNIX


93 
	#OPENSSL_SYS_MSDOS


	)

100 #i‡
deföed
(
OPENSSL_SYSNAME_UWIN
)

101 #unde‡
OPENSSL_SYS_UNIX


102 
	#OPENSSL_SYS_WIN32_UWIN


	)

104 #i‡
deföed
(
__CYGWIN__
Ë|| deföed(
OPENSSL_SYSNAME_CYGWIN
)

105 #unde‡
OPENSSL_SYS_UNIX


106 
	#OPENSSL_SYS_WIN32_CYGWIN


	)

108 #i‡
deföed
(
_WIN32
Ë|| deföed(
OPENSSL_SYSNAME_WIN32
)

109 #unde‡
OPENSSL_SYS_UNIX


110 
	#OPENSSL_SYS_WIN32


	)

112 #i‡
deföed
(
_WIN64
Ë|| deföed(
OPENSSL_SYSNAME_WIN64
)

113 #unde‡
OPENSSL_SYS_UNIX


114 #i‡!
deföed
(
OPENSSL_SYS_WIN64
)

115 
	#OPENSSL_SYS_WIN64


	)

118 #i‡
deföed
(
OPENSSL_SYSNAME_WINNT
)

119 #unde‡
OPENSSL_SYS_UNIX


120 
	#OPENSSL_SYS_WINNT


	)

122 #i‡
deföed
(
OPENSSL_SYSNAME_WINCE
)

123 #unde‡
OPENSSL_SYS_UNIX


124 
	#OPENSSL_SYS_WINCE


	)

130 #i‡
deföed
(
OPENSSL_SYS_WIN32
Ë|| deföed(
OPENSSL_SYS_WIN64
Ë|| deföed(
OPENSSL_SYS_WINNT
Ë|| deföed(
OPENSSL_SYS_WINCE
)

131 #unde‡
OPENSSL_SYS_UNIX


132 
	#OPENSSL_SYS_WINDOWS


	)

133 #i‚de‡
OPENSSL_SYS_MSDOS


134 
	#OPENSSL_SYS_MSDOS


	)

143 #ifde‡
OPENSSL_SYS_WINDOWS


144 #i‚de‡
OPENSSL_OPT_WINDLL


145 #i‡
deföed
(
_WINDLL
)

147 
	#OPENSSL_OPT_WINDLL


	)

153 #i‡
deföed
(
__VMS
Ë|| deföed(
VMS
Ë|| deföed(
OPENSSL_SYSNAME_VMS
)

154 #unde‡
OPENSSL_SYS_UNIX


155 
	#OPENSSL_SYS_VMS


	)

156 #i‡
deföed
(
__DECC
)

157 
	#OPENSSL_SYS_VMS_DECC


	)

158 #ñi‡
deföed
(
__DECCXX
)

159 
	#OPENSSL_SYS_VMS_DECC


	)

160 
	#OPENSSL_SYS_VMS_DECCXX


	)

162 
	#OPENSSL_SYS_VMS_NODECC


	)

167 #i‡
deföed
(
__EMX__
Ë|| deföed(
__OS2__
)

168 #unde‡
OPENSSL_SYS_UNIX


169 
	#OPENSSL_SYS_OS2


	)

173 #ifde‡
OPENSSL_SYS_UNIX


174 #i‡
deföed
(
löux
Ë|| deföed(
__löux__
Ë|| deföed(
OPENSSL_SYSNAME_LINUX
)

175 
	#OPENSSL_SYS_LINUX


	)

177 #ifde‡
OPENSSL_SYSNAME_MPE


178 
	#OPENSSL_SYS_MPE


	)

180 #ifde‡
OPENSSL_SYSNAME_SNI


181 
	#OPENSSL_SYS_SNI


	)

183 #ifde‡
OPENSSL_SYSNAME_ULTRASPARC


184 
	#OPENSSL_SYS_ULTRASPARC


	)

186 #ifde‡
OPENSSL_SYSNAME_NEWS4


187 
	#OPENSSL_SYS_NEWS4


	)

189 #ifde‡
OPENSSL_SYSNAME_MACOSX


190 
	#OPENSSL_SYS_MACOSX


	)

192 #ifde‡
OPENSSL_SYSNAME_MACOSX_RHAPSODY


193 
	#OPENSSL_SYS_MACOSX_RHAPSODY


	)

194 
	#OPENSSL_SYS_MACOSX


	)

196 #ifde‡
OPENSSL_SYSNAME_SUNOS


197 
	#OPENSSL_SYS_SUNOS


	)

199 #i‡
deföed
(
_CRAY
Ë|| deföed(
OPENSSL_SYSNAME_CRAY
)

200 
	#OPENSSL_SYS_CRAY


	)

202 #i‡
deföed
(
_AIX
Ë|| deföed(
OPENSSL_SYSNAME_AIX
)

203 
	#OPENSSL_SYS_AIX


	)

208 #i‡
deföed
(
__VOS__
Ë|| deföed(
OPENSSL_SYSNAME_VOS
)

209 
	#OPENSSL_SYS_VOS


	)

210 #ifde‡
__HPPA__


211 
	#OPENSSL_SYS_VOS_HPPA


	)

213 #ifde‡
__IA32__


214 
	#OPENSSL_SYS_VOS_IA32


	)

219 #ifde‡
OPENSSL_SYSNAME_VXWORKS


220 
	#OPENSSL_SYS_VXWORKS


	)

224 #i‡
deföed
(
__BEOS__
)

225 
	#OPENSSL_SYS_BEOS


	)

226 
	~<sys/sockë.h
>

227 #i‡
deföed
(
BONE_VERSION
)

228 
	#OPENSSL_SYS_BEOS_BONE


	)

230 
	#OPENSSL_SYS_BEOS_R5


	)

239 #ifde‡
OPENSSL_SYS_MSDOS


240 
	#OPENSSL_UNISTD_IO
 <
io
.
h
>

	)

241 
	#OPENSSL_DECLARE_EXIT
 
	`exô
();

	)

243 
	#OPENSSL_UNISTD_IO
 
OPENSSL_UNISTD


	)

244 
	#OPENSSL_DECLARE_EXIT


	)

267 #i‡
deföed
(
OPENSSL_SYS_VMS_NODECC
)

268 
	#OPENSSL_EXPORT
 
globÆªf


	)

269 
	#OPENSSL_IMPORT
 
globÆªf


	)

270 
	#OPENSSL_GLOBAL
 
globÆdef


	)

271 #ñi‡
deföed
(
OPENSSL_SYS_WINDOWS
Ë&& deföed(
OPENSSL_OPT_WINDLL
)

272 
	#OPENSSL_EXPORT
 
	`__de˛•ec
(
dŒexp‹t
)

	)

273 
	#OPENSSL_IMPORT
 
	`__de˛•ec
(
dŒimp‹t
)

	)

274 
	#OPENSSL_GLOBAL


	)

276 
	#OPENSSL_EXPORT
 

	)

277 
	#OPENSSL_IMPORT
 

	)

278 
	#OPENSSL_GLOBAL


	)

280 
	#OPENSSL_EXTERN
 
OPENSSL_IMPORT


	)

293 #ifde‡
OPENSSL_EXPORT_VAR_AS_FUNCTION


294 
	#OPENSSL_IMPLEMENT_GLOBAL
(
ty≥
,
«me
,
vÆue
) \

295 
ty≥
 *
_shadow_
##
	`«me
() \

296 { 
ty≥
 
_hide_
##
«me
=
vÆue
;  &_hide_##«me; }

	)

297 
	#OPENSSL_DECLARE_GLOBAL
(
ty≥
,
«me
Ëty≥ *
_shadow_
##
	`«me
()

	)

298 
	#OPENSSL_GLOBAL_REF
(
«me
Ë(*(
_shadow_
##
	`«me
()))

	)

300 
	#OPENSSL_IMPLEMENT_GLOBAL
(
ty≥
,
«me
,
vÆue
Ë
OPENSSL_GLOBAL
Åy≥ 
_shadow_
##«me=vÆue;

	)

301 
	#OPENSSL_DECLARE_GLOBAL
(
ty≥
,
«me
Ë
OPENSSL_EXPORT
Åy≥ 
_shadow_
##
	)
name

302 
	#OPENSSL_GLOBAL_REF
(
«me
Ë
_shadow_
##
	)
name

305 #i‡
deföed
(
OPENSSL_SYS_MACINTOSH_CLASSIC
Ë&& 
macötosh
==1 && !deföed(
MAC_OS_GUSI_SOURCE
)

306 
	#os¶_ssize_t
 

	)

309 #ifde‡
OPENSSL_SYS_MSDOS


310 
	#os¶_ssize_t
 

	)

313 #i‡
deföed
(
NeXT
Ë|| deföed(
OPENSSL_SYS_NEWS4
Ë|| deföed(
OPENSSL_SYS_SUNOS
)

314 
	#ssize_t
 

	)

317 #i‡
deföed
(
__u…rix
Ë&& !deföed(
ssize_t
)

318 
	#os¶_ssize_t
 

	)

321 #i‚de‡
os¶_ssize_t


322 
	#os¶_ssize_t
 
ssize_t


	)

325 #ifde‡ 
__˝lu•lus


	@/usr/include/sched.h

19 #i‚def 
_SCHED_H


20 
	#_SCHED_H
 1

	)

22 
	~<„©uªs.h
>

25 
	~<bôs/ty≥s.h
>

27 
	#__√ed_size_t


	)

28 
	#__√ed_NULL


	)

29 
	~<°ddef.h
>

31 
	~<bôs/ty≥s/time_t.h
>

32 
	~<bôs/ty≥s/°ru˘_time•ec.h
>

33 #i‚de‡
__USE_XOPEN2K


34 
	~<time.h
>

37 #i‚de‡
__pid_t_deföed


38 
__pid_t
 
	tpid_t
;

39 
	#__pid_t_deföed


	)

43 
	~<bôs/sched.h
>

44 
	~<bôs/˝u-£t.h
>

47 
	#sched_¥i‹ôy
 
sched_¥i‹ôy


	)

48 
	#__sched_¥i‹ôy
 
sched_¥i‹ôy


	)

51 
__BEGIN_DECLS


54 
	$sched_£ç¨am
 (
__pid_t
 
__pid
, c⁄° 
sched_∑øm
 *
__∑øm
)

55 
__THROW
;

58 
	$sched_gë∑øm
 (
__pid_t
 
__pid
, 
sched_∑øm
 *
__∑øm
Ë
__THROW
;

61 
	$sched_£tscheduÀr
 (
__pid_t
 
__pid
, 
__pﬁicy
,

62 c⁄° 
sched_∑øm
 *
__∑øm
Ë
__THROW
;

65 
	$sched_gëscheduÀr
 (
__pid_t
 
__pid
Ë
__THROW
;

68 
	$sched_yõld
 (Ë
__THROW
;

71 
	$sched_gë_¥i‹ôy_max
 (
__Æg‹ôhm
Ë
__THROW
;

74 
	$sched_gë_¥i‹ôy_mö
 (
__Æg‹ôhm
Ë
__THROW
;

77 
	$sched_º_gë_öãrvÆ
 (
__pid_t
 
__pid
, 
time•ec
 *
__t
Ë
__THROW
;

80 #ifde‡
__USE_GNU


82 
	#CPU_SETSIZE
 
__CPU_SETSIZE


	)

83 
	#CPU_SET
(
˝u
, 
˝u£ç
Ë
	`__CPU_SET_S
 (˝u,  (
˝u_£t_t
), cpu£ç)

	)

84 
	#CPU_CLR
(
˝u
, 
˝u£ç
Ë
	`__CPU_CLR_S
 (˝u,  (
˝u_£t_t
), cpu£ç)

	)

85 
	#CPU_ISSET
(
˝u
, 
˝u£ç
Ë
	`__CPU_ISSET_S
 (˝u,  (
˝u_£t_t
), \

86 
˝u£ç
)

	)

87 
	#CPU_ZERO
(
˝u£ç
Ë
	`__CPU_ZERO_S
 ( (
˝u_£t_t
), cpu£ç)

	)

88 
	#CPU_COUNT
(
˝u£ç
Ë
	`__CPU_COUNT_S
 ( (
˝u_£t_t
), cpu£ç)

	)

90 
	#CPU_SET_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_SET_S
 (˝u, sësize, cpu£ç)

	)

91 
	#CPU_CLR_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_CLR_S
 (˝u, sësize, cpu£ç)

	)

92 
	#CPU_ISSET_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_ISSET_S
 (cpu, setsize, \

93 
˝u£ç
)

	)

94 
	#CPU_ZERO_S
(
£tsize
, 
˝u£ç
Ë
	`__CPU_ZERO_S
 (£tsize, cpu£ç)

	)

95 
	#CPU_COUNT_S
(
£tsize
, 
˝u£ç
Ë
	`__CPU_COUNT_S
 (£tsize, cpu£ç)

	)

97 
	#CPU_EQUAL
(
˝u£ç1
, 
˝u£ç2
) \

98 
	`__CPU_EQUAL_S
 ( (
˝u_£t_t
), 
˝u£ç1
, 
˝u£ç2
)

	)

99 
	#CPU_EQUAL_S
(
£tsize
, 
˝u£ç1
, 
˝u£ç2
) \

100 
	`__CPU_EQUAL_S
 (
£tsize
, 
˝u£ç1
, 
˝u£ç2
)

	)

102 
	#CPU_AND
(
de°£t
, 
§c£t1
, 
§c£t2
) \

103 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, &)

	)

104 
	#CPU_OR
(
de°£t
, 
§c£t1
, 
§c£t2
) \

105 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, |)

	)

106 
	#CPU_XOR
(
de°£t
, 
§c£t1
, 
§c£t2
) \

107 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, ^)

	)

108 
	#CPU_AND_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

109 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, &)

	)

110 
	#CPU_OR_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

111 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, |)

	)

112 
	#CPU_XOR_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

113 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, ^)

	)

115 
	#CPU_ALLOC_SIZE
(
cou¡
Ë
	`__CPU_ALLOC_SIZE
 (cou¡)

	)

116 
	#CPU_ALLOC
(
cou¡
Ë
	`__CPU_ALLOC
 (cou¡)

	)

117 
	#CPU_FREE
(
˝u£t
Ë
	`__CPU_FREE
 (˝u£t)

	)

121 
	$sched_£èfföôy
 (
__pid_t
 
__pid
, 
size_t
 
__˝u£tsize
,

122 c⁄° 
˝u_£t_t
 *
__˝u£t
Ë
__THROW
;

125 
	$sched_gëafföôy
 (
__pid_t
 
__pid
, 
size_t
 
__˝u£tsize
,

126 
˝u_£t_t
 *
__˝u£t
Ë
__THROW
;

129 
__END_DECLS


	@/usr/include/strings.h

18 #i‚def 
_STRINGS_H


19 
	#_STRINGS_H
 1

	)

21 
	~<„©uªs.h
>

22 
	#__√ed_size_t


	)

23 
	~<°ddef.h
>

26 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (4, 4)

27 
	#__CORRECT_ISO_CPP_STRINGS_H_PROTO


	)

30 
	g__BEGIN_DECLS


32 #i‡
deföed
 
__USE_MISC
 || !deföed 
__USE_XOPEN2K8


34 
	$bcmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

35 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

38 
	$bc›y
 (c⁄° *
__§c
, *
__de°
, 
size_t
 
__n
)

39 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

42 
	$bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

45 #ifde‡
__CORRECT_ISO_CPP_STRINGS_H_PROTO


48 *
	`ödex
 (*
__s
, 
__c
)

49 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

50 c⁄° *
	`ödex
 (c⁄° *
__s
, 
__c
)

51 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

53 #i‡
deföed
 
__OPTIMIZE__


54 
__exã∫_Æways_ölöe
 *

55 
	`ödex
 (*
__s
, 
__c
Ë
__THROW


57  
	`__buûtö_ödex
 (
__s
, 
__c
);

60 
__exã∫_Æways_ölöe
 const *

61 
	`ödex
 (c⁄° *
__s
, 
__c
Ë
__THROW


63  
	`__buûtö_ödex
 (
__s
, 
__c
);

66 
	}
}

68 *
	$ödex
 (c⁄° *
__s
, 
__c
)

69 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

73 #ifde‡
__CORRECT_ISO_CPP_STRINGS_H_PROTO


76 *
	`rödex
 (*
__s
, 
__c
)

77 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

78 c⁄° *
	`rödex
 (c⁄° *
__s
, 
__c
)

79 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

81 #i‡
deföed
 
__OPTIMIZE__


82 
__exã∫_Æways_ölöe
 *

83 
	`rödex
 (*
__s
, 
__c
Ë
__THROW


85  
	`__buûtö_rödex
 (
__s
, 
__c
);

88 
__exã∫_Æways_ölöe
 const *

89 
	`rödex
 (c⁄° *
__s
, 
__c
Ë
__THROW


91  
	`__buûtö_rödex
 (
__s
, 
__c
);

94 
	}
}

96 *
	$rödex
 (c⁄° *
__s
, 
__c
)

97 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

101 #i‡
deföed
 
__USE_MISC
 || !deföed 
__USE_XOPEN2K8
 || deföed 
__USE_XOPEN2K8XSI


104 
	$ffs
 (
__i
Ë
__THROW
 
__©åibuã_c⁄°__
;

109 #ifdef 
__USE_MISC


110 
	$ff¶
 (
__l
Ë
__THROW
 
__©åibuã_c⁄°__
;

111 
__exãnsi⁄__
 
	$ff¶l
 (
__Œ
)

112 
__THROW
 
__©åibuã_c⁄°__
;

116 
	$°rˇ£cmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

117 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

120 
	$°∫ˇ£cmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

121 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

123 #ifdef 
__USE_XOPEN2K8


125 
	~<bôs/ty≥s/loˇÀ_t.h
>

128 
	$°rˇ£cmp_l
 (c⁄° *
__s1
, c⁄° *
__s2
, 
loˇÀ_t
 
__loc
)

129 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

133 
	$°∫ˇ£cmp_l
 (c⁄° *
__s1
, c⁄° *
__s2
,

134 
size_t
 
__n
, 
loˇÀ_t
 
__loc
)

135 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 4));

138 
__END_DECLS


140 #i‡
	`__GNUC_PREREQ
 (3,4Ë&& 
__USE_FORTIFY_LEVEL
 > 0 \

141 && 
deföed
 
__f‹tify_fun˘i⁄


143 #i‡
deföed
 
__USE_MISC
 || !deföed 
__USE_XOPEN2K8


144 
	~<bôs/°rögs_f‹tifõd.h
>

	@/usr/include/stdc-predef.h

18 #i‚def 
_STDC_PREDEF_H


19 
	#_STDC_PREDEF_H
 1

	)

36 #ifde‡
__GCC_IEC_559


37 #i‡
__GCC_IEC_559
 > 0

38 
	#__STDC_IEC_559__
 1

	)

41 
	#__STDC_IEC_559__
 1

	)

44 #ifde‡
__GCC_IEC_559_COMPLEX


45 #i‡
__GCC_IEC_559_COMPLEX
 > 0

46 
	#__STDC_IEC_559_COMPLEX__
 1

	)

49 
	#__STDC_IEC_559_COMPLEX__
 1

	)

58 
	#__STDC_ISO_10646__
 201706L

	)

61 
	#__STDC_NO_THREADS__
 1

	)

	@
1
.
1
/usr/include
98
1481
DP/catalan_number.c
DP/logest_common_string.c
DP/longest_increasing_sequence.c
DP/making_change.c
DP/maxSubArray.c
DP/max_sum.c
LC/binary_search.c
LC/merge_sort.c
array.c
array_2_bst.c
avl_tree.c
avl_tree.h
b_plus_tree.c
b_tree.c
b_tree.h
binary_search.c
bitwise.c
buffer_extract.c
check_signed.c
const.c
contiguous_max.c
duplicate_number.c
endian.c
f32.c
find_missing_number.c
float.c
fork.c
forloop.c
format_specifier.c
graph.c
hash.c
hash.h
heap.c
if.c
linked_list.c
linked_list.h
longest_palindrome.c
merge_sort.c
new_st.c
non_null.c
noop.c
pkt_extract.c
pointer_test.c
poll.c
prime.c
prime.h
queue.c
queue.h
queue_main.c
quick_sort.c
remove_duplicate.c
ring_buffer.c
rotate_array.c
second_max.c
segment_tree.c
shared_mem.c
simple_fsm.c
stack.c
stack.h
stack_test.c
struct.c
ternery.c
test_timer.c
test_timer.h
threads.c
tree.c
tree.h
trie.c
typecast.c
unary.c
unix_socket.c
url_cache_db/main.c
url_cache_db/url_cache.c
url_cache_db/url_cache.h
url_cache_db/url_include.h
while.c
/usr/include/assert.h
/usr/include/errno.h
/usr/include/fcntl.h
/usr/include/inttypes.h
/usr/include/limits.h
/usr/include/math.h
/usr/include/openssl/md5.h
/usr/include/poll.h
/usr/include/pthread.h
/usr/include/stdint.h
/usr/include/stdio.h
/usr/include/stdlib.h
/usr/include/string.h
/usr/include/time.h
/usr/include/unistd.h
/usr/include/alloca.h
/usr/include/endian.h
/usr/include/features.h
/usr/include/openssl/e_os2.h
/usr/include/sched.h
/usr/include/strings.h
/usr/include/stdc-predef.h
